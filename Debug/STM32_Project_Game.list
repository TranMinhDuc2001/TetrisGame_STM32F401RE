
STM32_Project_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  08005b48  08005b48  00015b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800619c  0800619c  000205e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800619c  0800619c  000205e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800619c  0800619c  000205e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061a0  080061a0  000161a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005e8  20000000  080061a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018ec  200005e8  0800678c  000205e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ed4  0800678c  00021ed4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205e8  2**0
                  CONTENTS, READONLY
 12 .comment      000000be  00000000  00000000  00020618  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003909f  00000000  00000000  000206d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003357  00000000  00000000  00059775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  0005cad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004b0  00000000  00000000  0005d910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000110b5  00000000  00000000  0005ddc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ce0b  00000000  00000000  0006ee75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000527b7  00000000  00000000  0007bc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d08  00000000  00000000  000ce438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d2140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000670  00000000  00000000  000d21a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200005e8 	.word	0x200005e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b30 	.word	0x08005b30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200005ec 	.word	0x200005ec
 80001dc:	08005b30 	.word	0x08005b30

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000288:	2300      	movs	r3, #0
 800028a:	73fb      	strb	r3, [r7, #15]
 800028c:	2300      	movs	r3, #0
 800028e:	73bb      	strb	r3, [r7, #14]
 8000290:	230f      	movs	r3, #15
 8000292:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	78db      	ldrb	r3, [r3, #3]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d039      	beq.n	8000310 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800029c:	4b27      	ldr	r3, [pc, #156]	; (800033c <NVIC_Init+0xbc>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	43db      	mvns	r3, r3
 80002a2:	0a1b      	lsrs	r3, r3, #8
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	f003 0307 	and.w	r3, r3, #7
 80002aa:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80002ac:	7bfb      	ldrb	r3, [r7, #15]
 80002ae:	f1c3 0304 	rsb	r3, r3, #4
 80002b2:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80002b4:	7b7a      	ldrb	r2, [r7, #13]
 80002b6:	7bfb      	ldrb	r3, [r7, #15]
 80002b8:	fa42 f303 	asr.w	r3, r2, r3
 80002bc:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	785b      	ldrb	r3, [r3, #1]
 80002c2:	461a      	mov	r2, r3
 80002c4:	7bbb      	ldrb	r3, [r7, #14]
 80002c6:	fa02 f303 	lsl.w	r3, r2, r3
 80002ca:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	789a      	ldrb	r2, [r3, #2]
 80002d0:	7b7b      	ldrb	r3, [r7, #13]
 80002d2:	4013      	ands	r3, r2
 80002d4:	b2da      	uxtb	r2, r3
 80002d6:	7bfb      	ldrb	r3, [r7, #15]
 80002d8:	4313      	orrs	r3, r2
 80002da:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80002dc:	7bfb      	ldrb	r3, [r7, #15]
 80002de:	011b      	lsls	r3, r3, #4
 80002e0:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80002e2:	4a17      	ldr	r2, [pc, #92]	; (8000340 <NVIC_Init+0xc0>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	4413      	add	r3, r2
 80002ea:	7bfa      	ldrb	r2, [r7, #15]
 80002ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002f8:	4911      	ldr	r1, [pc, #68]	; (8000340 <NVIC_Init+0xc0>)
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	7812      	ldrb	r2, [r2, #0]
 80002fe:	0952      	lsrs	r2, r2, #5
 8000300:	b2d2      	uxtb	r2, r2
 8000302:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000304:	2201      	movs	r2, #1
 8000306:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800030a:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800030e:	e00f      	b.n	8000330 <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000318:	4909      	ldr	r1, [pc, #36]	; (8000340 <NVIC_Init+0xc0>)
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	7812      	ldrb	r2, [r2, #0]
 800031e:	0952      	lsrs	r2, r2, #5
 8000320:	b2d2      	uxtb	r2, r2
 8000322:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000324:	2201      	movs	r2, #1
 8000326:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000328:	f100 0320 	add.w	r3, r0, #32
 800032c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000330:	bf00      	nop
 8000332:	3714      	adds	r7, #20
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	e000ed00 	.word	0xe000ed00
 8000340:	e000e100 	.word	0xe000e100

08000344 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8000348:	2101      	movs	r1, #1
 800034a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800034e:	f000 fc5b 	bl	8000c08 <RCC_APB2PeriphResetCmd>

  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8000352:	2100      	movs	r1, #0
 8000354:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000358:	f000 fc56 	bl	8000c08 <RCC_APB2PeriphResetCmd>
}
 800035c:	bf00      	nop
 800035e:	bd80      	pop	{r7, pc}

08000360 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800036a:	2300      	movs	r3, #0
 800036c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign));
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	60fb      	str	r3, [r7, #12]

  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800037e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000382:	60fb      	str	r3, [r7, #12]

  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	791b      	ldrb	r3, [r3, #4]
 8000388:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800038e:	4313      	orrs	r3, r2
 8000390:	68fa      	ldr	r2, [r7, #12]
 8000392:	4313      	orrs	r3, r2
 8000394:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	68fa      	ldr	r2, [r7, #12]
 800039a:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	689b      	ldr	r3, [r3, #8]
 80003a0:	60fb      	str	r3, [r7, #12]

  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80003a2:	68fa      	ldr	r2, [r7, #12]
 80003a4:	4b18      	ldr	r3, [pc, #96]	; (8000408 <ADC_Init+0xa8>)
 80003a6:	4013      	ands	r3, r2
 80003a8:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv |
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80003b2:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv |
 80003b8:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	795b      	ldrb	r3, [r3, #5]
 80003be:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80003c0:	4313      	orrs	r3, r2
 80003c2:	68fa      	ldr	r2, [r7, #12]
 80003c4:	4313      	orrs	r3, r2
 80003c6:	60fb      	str	r3, [r7, #12]

  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	68fa      	ldr	r2, [r7, #12]
 80003cc:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d2:	60fb      	str	r3, [r7, #12]

  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80003da:	60fb      	str	r3, [r7, #12]

  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	7d1b      	ldrb	r3, [r3, #20]
 80003e0:	3b01      	subs	r3, #1
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	7afb      	ldrb	r3, [r7, #11]
 80003e6:	4313      	orrs	r3, r2
 80003e8:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80003ea:	7afb      	ldrb	r3, [r7, #11]
 80003ec:	051b      	lsls	r3, r3, #20
 80003ee:	68fa      	ldr	r2, [r7, #12]
 80003f0:	4313      	orrs	r3, r2
 80003f2:	60fb      	str	r3, [r7, #12]

  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	68fa      	ldr	r2, [r7, #12]
 80003f8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80003fa:	bf00      	nop
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	c0fff7fd 	.word	0xc0fff7fd

0800040c <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000418:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <ADC_CommonInit+0x48>)
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	60fb      	str	r3, [r7, #12]

  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 800041e:	68fa      	ldr	r2, [r7, #12]
 8000420:	4b0d      	ldr	r3, [pc, #52]	; (8000458 <ADC_CommonInit+0x4c>)
 8000422:	4013      	ands	r3, r2
 8000424:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode |
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler |
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode |
 800042e:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode |
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler |
 8000434:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode |
 800043a:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode |
 800043c:	68fa      	ldr	r2, [r7, #12]
 800043e:	4313      	orrs	r3, r2
 8000440:	60fb      	str	r3, [r7, #12]

  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000442:	4a04      	ldr	r2, [pc, #16]	; (8000454 <ADC_CommonInit+0x48>)
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	6053      	str	r3, [r2, #4]
}
 8000448:	bf00      	nop
 800044a:	3714      	adds	r7, #20
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	40012300 	.word	0x40012300
 8000458:	fffc30e0 	.word	0xfffc30e0

0800045c <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	460b      	mov	r3, r1
 8000466:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000468:	78fb      	ldrb	r3, [r7, #3]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d006      	beq.n	800047c <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	f043 0201 	orr.w	r2, r3, #1
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 800047a:	e005      	b.n	8000488 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	689b      	ldr	r3, [r3, #8]
 8000480:	f023 0201 	bic.w	r2, r3, #1
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	609a      	str	r2, [r3, #8]
}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	4608      	mov	r0, r1
 800049e:	4611      	mov	r1, r2
 80004a0:	461a      	mov	r2, r3
 80004a2:	4603      	mov	r3, r0
 80004a4:	70fb      	strb	r3, [r7, #3]
 80004a6:	460b      	mov	r3, r1
 80004a8:	70bb      	strb	r3, [r7, #2]
 80004aa:	4613      	mov	r3, r2
 80004ac:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	2300      	movs	r3, #0
 80004b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80004b6:	78fb      	ldrb	r3, [r7, #3]
 80004b8:	2b09      	cmp	r3, #9
 80004ba:	d923      	bls.n	8000504 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80004c2:	78fb      	ldrb	r3, [r7, #3]
 80004c4:	f1a3 020a 	sub.w	r2, r3, #10
 80004c8:	4613      	mov	r3, r2
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	4413      	add	r3, r2
 80004ce:	2207      	movs	r2, #7
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	60bb      	str	r3, [r7, #8]

    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	43db      	mvns	r3, r3
 80004da:	68fa      	ldr	r2, [r7, #12]
 80004dc:	4013      	ands	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80004e0:	7879      	ldrb	r1, [r7, #1]
 80004e2:	78fb      	ldrb	r3, [r7, #3]
 80004e4:	f1a3 020a 	sub.w	r2, r3, #10
 80004e8:	4613      	mov	r3, r2
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	4413      	add	r3, r2
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	60bb      	str	r3, [r7, #8]

    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80004f4:	68fa      	ldr	r2, [r7, #12]
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4313      	orrs	r3, r2
 80004fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	68fa      	ldr	r2, [r7, #12]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	e01e      	b.n	8000542 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	691b      	ldr	r3, [r3, #16]
 8000508:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 800050a:	78fa      	ldrb	r2, [r7, #3]
 800050c:	4613      	mov	r3, r2
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	4413      	add	r3, r2
 8000512:	2207      	movs	r2, #7
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	60bb      	str	r3, [r7, #8]

    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	43db      	mvns	r3, r3
 800051e:	68fa      	ldr	r2, [r7, #12]
 8000520:	4013      	ands	r3, r2
 8000522:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000524:	7879      	ldrb	r1, [r7, #1]
 8000526:	78fa      	ldrb	r2, [r7, #3]
 8000528:	4613      	mov	r3, r2
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	4413      	add	r3, r2
 800052e:	fa01 f303 	lsl.w	r3, r1, r3
 8000532:	60bb      	str	r3, [r7, #8]

    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000534:	68fa      	ldr	r2, [r7, #12]
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	4313      	orrs	r3, r2
 800053a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	68fa      	ldr	r2, [r7, #12]
 8000540:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000542:	78bb      	ldrb	r3, [r7, #2]
 8000544:	2b06      	cmp	r3, #6
 8000546:	d821      	bhi.n	800058c <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800054c:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 800054e:	78bb      	ldrb	r3, [r7, #2]
 8000550:	1e5a      	subs	r2, r3, #1
 8000552:	4613      	mov	r3, r2
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4413      	add	r3, r2
 8000558:	221f      	movs	r2, #31
 800055a:	fa02 f303 	lsl.w	r3, r2, r3
 800055e:	60bb      	str	r3, [r7, #8]

    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	43db      	mvns	r3, r3
 8000564:	68fa      	ldr	r2, [r7, #12]
 8000566:	4013      	ands	r3, r2
 8000568:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800056a:	78f9      	ldrb	r1, [r7, #3]
 800056c:	78bb      	ldrb	r3, [r7, #2]
 800056e:	1e5a      	subs	r2, r3, #1
 8000570:	4613      	mov	r3, r2
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	4413      	add	r3, r2
 8000576:	fa01 f303 	lsl.w	r3, r1, r3
 800057a:	60bb      	str	r3, [r7, #8]

    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800057c:	68fa      	ldr	r2, [r7, #12]
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	4313      	orrs	r3, r2
 8000582:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	68fa      	ldr	r2, [r7, #12]
 8000588:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;

    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800058a:	e047      	b.n	800061c <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 800058c:	78bb      	ldrb	r3, [r7, #2]
 800058e:	2b0c      	cmp	r3, #12
 8000590:	d821      	bhi.n	80005d6 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000598:	78bb      	ldrb	r3, [r7, #2]
 800059a:	1fda      	subs	r2, r3, #7
 800059c:	4613      	mov	r3, r2
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	4413      	add	r3, r2
 80005a2:	221f      	movs	r2, #31
 80005a4:	fa02 f303 	lsl.w	r3, r2, r3
 80005a8:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	43db      	mvns	r3, r3
 80005ae:	68fa      	ldr	r2, [r7, #12]
 80005b0:	4013      	ands	r3, r2
 80005b2:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80005b4:	78f9      	ldrb	r1, [r7, #3]
 80005b6:	78bb      	ldrb	r3, [r7, #2]
 80005b8:	1fda      	subs	r2, r3, #7
 80005ba:	4613      	mov	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	fa01 f303 	lsl.w	r3, r1, r3
 80005c4:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	4313      	orrs	r3, r2
 80005cc:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80005d4:	e022      	b.n	800061c <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005da:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 80005dc:	78bb      	ldrb	r3, [r7, #2]
 80005de:	f1a3 020d 	sub.w	r2, r3, #13
 80005e2:	4613      	mov	r3, r2
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	4413      	add	r3, r2
 80005e8:	221f      	movs	r2, #31
 80005ea:	fa02 f303 	lsl.w	r3, r2, r3
 80005ee:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	43db      	mvns	r3, r3
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	4013      	ands	r3, r2
 80005f8:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80005fa:	78f9      	ldrb	r1, [r7, #3]
 80005fc:	78bb      	ldrb	r3, [r7, #2]
 80005fe:	f1a3 020d 	sub.w	r2, r3, #13
 8000602:	4613      	mov	r3, r2
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	4413      	add	r3, r2
 8000608:	fa01 f303 	lsl.w	r3, r1, r3
 800060c:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	4313      	orrs	r3, r2
 8000614:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800061c:	bf00      	nop
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	609a      	str	r2, [r3, #8]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000654:	78fb      	ldrb	r3, [r7, #3]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d006      	beq.n	8000668 <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
  }
}
 8000666:	e005      	b.n	8000674 <ADC_EOCOnEachRegularChannelCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	609a      	str	r2, [r3, #8]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d006      	beq.n	80006a0 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	f043 0202 	orr.w	r2, r3, #2
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
  }
}
 800069e:	e005      	b.n	80006ac <ADC_ContinuousModeCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	f023 0202 	bic.w	r2, r3, #2
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	609a      	str	r2, [r3, #8]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));

  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	60fb      	str	r3, [r7, #12]

  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80006d8:	60fb      	str	r3, [r7, #12]

  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 80006da:	78fb      	ldrb	r3, [r7, #3]
 80006dc:	3b01      	subs	r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	035b      	lsls	r3, r3, #13
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	60fb      	str	r3, [r7, #12]

  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	605a      	str	r2, [r3, #4]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000708:	78fb      	ldrb	r3, [r7, #3]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d006      	beq.n	800071c <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
  }
}
 800071a:	e005      	b.n	8000728 <ADC_DiscModeCmd+0x2c>
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	605a      	str	r2, [r3, #4]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d006      	beq.n	8000754 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8000752:	e005      	b.n	8000760 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	609a      	str	r2, [r3, #8]
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d006      	beq.n	800078c <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 800078a:	e005      	b.n	8000798 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	609a      	str	r2, [r3, #8]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80007b0:	4b34      	ldr	r3, [pc, #208]	; (8000884 <EXTI_Init+0xe0>)
 80007b2:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	799b      	ldrb	r3, [r3, #6]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d04f      	beq.n	800085c <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80007bc:	4b31      	ldr	r3, [pc, #196]	; (8000884 <EXTI_Init+0xe0>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	43db      	mvns	r3, r3
 80007c6:	492f      	ldr	r1, [pc, #188]	; (8000884 <EXTI_Init+0xe0>)
 80007c8:	4013      	ands	r3, r2
 80007ca:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80007cc:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <EXTI_Init+0xe0>)
 80007ce:	685a      	ldr	r2, [r3, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	43db      	mvns	r3, r3
 80007d6:	492b      	ldr	r1, [pc, #172]	; (8000884 <EXTI_Init+0xe0>)
 80007d8:	4013      	ands	r3, r2
 80007da:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	791b      	ldrb	r3, [r3, #4]
 80007e0:	461a      	mov	r2, r3
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	4413      	add	r3, r2
 80007e6:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	6819      	ldr	r1, [r3, #0]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	430a      	orrs	r2, r1
 80007f4:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <EXTI_Init+0xe0>)
 80007f8:	689a      	ldr	r2, [r3, #8]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	43db      	mvns	r3, r3
 8000800:	4920      	ldr	r1, [pc, #128]	; (8000884 <EXTI_Init+0xe0>)
 8000802:	4013      	ands	r3, r2
 8000804:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <EXTI_Init+0xe0>)
 8000808:	68da      	ldr	r2, [r3, #12]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	43db      	mvns	r3, r3
 8000810:	491c      	ldr	r1, [pc, #112]	; (8000884 <EXTI_Init+0xe0>)
 8000812:	4013      	ands	r3, r2
 8000814:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	795b      	ldrb	r3, [r3, #5]
 800081a:	2b10      	cmp	r3, #16
 800081c:	d10e      	bne.n	800083c <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <EXTI_Init+0xe0>)
 8000820:	689a      	ldr	r2, [r3, #8]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4917      	ldr	r1, [pc, #92]	; (8000884 <EXTI_Init+0xe0>)
 8000828:	4313      	orrs	r3, r2
 800082a:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <EXTI_Init+0xe0>)
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4913      	ldr	r1, [pc, #76]	; (8000884 <EXTI_Init+0xe0>)
 8000836:	4313      	orrs	r3, r2
 8000838:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800083a:	e01d      	b.n	8000878 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <EXTI_Init+0xe0>)
 800083e:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	795b      	ldrb	r3, [r3, #5]
 8000844:	461a      	mov	r2, r3
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	4413      	add	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	6819      	ldr	r1, [r3, #0]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	430a      	orrs	r2, r1
 8000858:	601a      	str	r2, [r3, #0]
}
 800085a:	e00d      	b.n	8000878 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	791b      	ldrb	r3, [r3, #4]
 8000860:	461a      	mov	r2, r3
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	4413      	add	r3, r2
 8000866:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	6819      	ldr	r1, [r3, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	43da      	mvns	r2, r3
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	400a      	ands	r2, r1
 8000876:	601a      	str	r2, [r3, #0]
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	40013c00 	.word	0x40013c00

08000888 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <EXTI_GetFlagStatus+0x30>)
 8000896:	695a      	ldr	r2, [r3, #20]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4013      	ands	r3, r2
 800089c:	2b00      	cmp	r3, #0
 800089e:	d002      	beq.n	80008a6 <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 80008a0:	2301      	movs	r3, #1
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	e001      	b.n	80008aa <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 80008a6:	2300      	movs	r3, #0
 80008a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	40013c00 	.word	0x40013c00

080008bc <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <EXTI_ClearITPendingBit+0x1c>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6153      	str	r3, [r2, #20]
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40013c00 	.word	0x40013c00

080008dc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80008dc:	b480      	push	{r7}
 80008de:	b087      	sub	sp, #28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	e076      	b.n	80009e6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80008f8:	2201      	movs	r2, #1
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4013      	ands	r3, r2
 800090a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	429a      	cmp	r2, r3
 8000912:	d165      	bne.n	80009e0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	2103      	movs	r1, #3
 800091e:	fa01 f303 	lsl.w	r3, r1, r3
 8000922:	43db      	mvns	r3, r3
 8000924:	401a      	ands	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	791b      	ldrb	r3, [r3, #4]
 8000932:	4619      	mov	r1, r3
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	fa01 f303 	lsl.w	r3, r1, r3
 800093c:	431a      	orrs	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	791b      	ldrb	r3, [r3, #4]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d003      	beq.n	8000952 <GPIO_Init+0x76>
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	791b      	ldrb	r3, [r3, #4]
 800094e:	2b02      	cmp	r3, #2
 8000950:	d12e      	bne.n	80009b0 <GPIO_Init+0xd4>
      {
        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	689a      	ldr	r2, [r3, #8]
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	2103      	movs	r1, #3
 800095c:	fa01 f303 	lsl.w	r3, r1, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	401a      	ands	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	795b      	ldrb	r3, [r3, #5]
 8000970:	4619      	mov	r1, r3
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	431a      	orrs	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	609a      	str	r2, [r3, #8]

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	685a      	ldr	r2, [r3, #4]
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	b29b      	uxth	r3, r3
 8000988:	4619      	mov	r1, r3
 800098a:	2301      	movs	r3, #1
 800098c:	408b      	lsls	r3, r1
 800098e:	43db      	mvns	r3, r3
 8000990:	401a      	ands	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	7992      	ldrb	r2, [r2, #6]
 800099e:	4611      	mov	r1, r2
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	b292      	uxth	r2, r2
 80009a4:	fa01 f202 	lsl.w	r2, r1, r2
 80009a8:	b292      	uxth	r2, r2
 80009aa:	431a      	orrs	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	68da      	ldr	r2, [r3, #12]
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	2103      	movs	r1, #3
 80009bc:	fa01 f303 	lsl.w	r3, r1, r3
 80009c0:	43db      	mvns	r3, r3
 80009c2:	401a      	ands	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	68da      	ldr	r2, [r3, #12]
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	79db      	ldrb	r3, [r3, #7]
 80009d0:	4619      	mov	r1, r3
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	431a      	orrs	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	3301      	adds	r3, #1
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	2b0f      	cmp	r3, #15
 80009ea:	d985      	bls.n	80008f8 <GPIO_Init+0x1c>
    }
  }
}
 80009ec:	bf00      	nop
 80009ee:	bf00      	nop
 80009f0:	371c      	adds	r7, #28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	460b      	mov	r3, r1
 8000a04:	807b      	strh	r3, [r7, #2]
 8000a06:	4613      	mov	r3, r2
 8000a08:	707b      	strb	r3, [r7, #1]
  if (BitVal != Bit_RESET)
 8000a0a:	787b      	ldrb	r3, [r7, #1]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d003      	beq.n	8000a18 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	887a      	ldrh	r2, [r7, #2]
 8000a14:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000a16:	e002      	b.n	8000a1e <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	887a      	ldrh	r2, [r7, #2]
 8000a1c:	835a      	strh	r2, [r3, #26]
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b089      	sub	sp, #36	; 0x24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
 8000a40:	2302      	movs	r3, #2
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	2302      	movs	r3, #2
 8000a4a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a4c:	4b4a      	ldr	r3, [pc, #296]	; (8000b78 <RCC_GetClocksFreq+0x14c>)
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	f003 030c 	and.w	r3, r3, #12
 8000a54:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	d011      	beq.n	8000a80 <RCC_GetClocksFreq+0x54>
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	2b08      	cmp	r3, #8
 8000a60:	d844      	bhi.n	8000aec <RCC_GetClocksFreq+0xc0>
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <RCC_GetClocksFreq+0x44>
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	d004      	beq.n	8000a78 <RCC_GetClocksFreq+0x4c>
 8000a6e:	e03d      	b.n	8000aec <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a42      	ldr	r2, [pc, #264]	; (8000b7c <RCC_GetClocksFreq+0x150>)
 8000a74:	601a      	str	r2, [r3, #0]
    break;
 8000a76:	e03d      	b.n	8000af4 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a41      	ldr	r2, [pc, #260]	; (8000b80 <RCC_GetClocksFreq+0x154>)
 8000a7c:	601a      	str	r2, [r3, #0]
    break;
 8000a7e:	e039      	b.n	8000af4 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000a80:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <RCC_GetClocksFreq+0x14c>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	0d9b      	lsrs	r3, r3, #22
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a8c:	4b3a      	ldr	r3, [pc, #232]	; (8000b78 <RCC_GetClocksFreq+0x14c>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a94:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d00c      	beq.n	8000ab6 <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a9c:	4a38      	ldr	r2, [pc, #224]	; (8000b80 <RCC_GetClocksFreq+0x154>)
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa4:	4a34      	ldr	r2, [pc, #208]	; (8000b78 <RCC_GetClocksFreq+0x14c>)
 8000aa6:	6852      	ldr	r2, [r2, #4]
 8000aa8:	0992      	lsrs	r2, r2, #6
 8000aaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000aae:	fb02 f303 	mul.w	r3, r2, r3
 8000ab2:	61fb      	str	r3, [r7, #28]
 8000ab4:	e00b      	b.n	8000ace <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000ab6:	4a31      	ldr	r2, [pc, #196]	; (8000b7c <RCC_GetClocksFreq+0x150>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000abe:	4a2e      	ldr	r2, [pc, #184]	; (8000b78 <RCC_GetClocksFreq+0x14c>)
 8000ac0:	6852      	ldr	r2, [r2, #4]
 8000ac2:	0992      	lsrs	r2, r2, #6
 8000ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ac8:	fb02 f303 	mul.w	r3, r2, r3
 8000acc:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000ace:	4b2a      	ldr	r3, [pc, #168]	; (8000b78 <RCC_GetClocksFreq+0x14c>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	0c1b      	lsrs	r3, r3, #16
 8000ad4:	f003 0303 	and.w	r3, r3, #3
 8000ad8:	3301      	adds	r3, #1
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000ade:	69fa      	ldr	r2, [r7, #28]
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	601a      	str	r2, [r3, #0]
    break;
 8000aea:	e003      	b.n	8000af4 <RCC_GetClocksFreq+0xc8>
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a23      	ldr	r2, [pc, #140]	; (8000b7c <RCC_GetClocksFreq+0x150>)
 8000af0:	601a      	str	r2, [r3, #0]
    break;
 8000af2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000af4:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <RCC_GetClocksFreq+0x14c>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000afc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	091b      	lsrs	r3, r3, #4
 8000b02:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000b04:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <RCC_GetClocksFreq+0x158>)
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	4413      	add	r3, r2
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	40da      	lsrs	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <RCC_GetClocksFreq+0x14c>)
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000b24:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	0a9b      	lsrs	r3, r3, #10
 8000b2a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000b2c:	4a15      	ldr	r2, [pc, #84]	; (8000b84 <RCC_GetClocksFreq+0x158>)
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	4413      	add	r3, r2
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	40da      	lsrs	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <RCC_GetClocksFreq+0x14c>)
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000b4c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	0b5b      	lsrs	r3, r3, #13
 8000b52:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000b54:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <RCC_GetClocksFreq+0x158>)
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	4413      	add	r3, r2
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	40da      	lsrs	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	60da      	str	r2, [r3, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3724      	adds	r7, #36	; 0x24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	00f42400 	.word	0x00f42400
 8000b80:	017d7840 	.word	0x017d7840
 8000b84:	20000000 	.word	0x20000000

08000b88 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b94:	78fb      	ldrb	r3, [r7, #3]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d006      	beq.n	8000ba8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b9e:	4909      	ldr	r1, [pc, #36]	; (8000bc4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000ba6:	e006      	b.n	8000bb6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000baa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	4904      	ldr	r1, [pc, #16]	; (8000bc4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bd4:	78fb      	ldrb	r3, [r7, #3]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d006      	beq.n	8000be8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <RCC_APB2PeriphClockCmd+0x3c>)
 8000bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bde:	4909      	ldr	r1, [pc, #36]	; (8000c04 <RCC_APB2PeriphClockCmd+0x3c>)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000be6:	e006      	b.n	8000bf6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <RCC_APB2PeriphClockCmd+0x3c>)
 8000bea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	4904      	ldr	r1, [pc, #16]	; (8000c04 <RCC_APB2PeriphClockCmd+0x3c>)
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c14:	78fb      	ldrb	r3, [r7, #3]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d006      	beq.n	8000c28 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <RCC_APB2PeriphResetCmd+0x3c>)
 8000c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c1e:	4909      	ldr	r1, [pc, #36]	; (8000c44 <RCC_APB2PeriphResetCmd+0x3c>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000c26:	e006      	b.n	8000c36 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <RCC_APB2PeriphResetCmd+0x3c>)
 8000c2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	4904      	ldr	r1, [pc, #16]	; (8000c44 <RCC_APB2PeriphResetCmd+0x3c>)
 8000c32:	4013      	ands	r3, r2
 8000c34:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800

08000c48 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	460a      	mov	r2, r1
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	220f      	movs	r2, #15
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000c6c:	4a16      	ldr	r2, [pc, #88]	; (8000cc8 <SYSCFG_EXTILineConfig+0x80>)
 8000c6e:	79bb      	ldrb	r3, [r7, #6]
 8000c70:	089b      	lsrs	r3, r3, #2
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	3302      	adds	r3, #2
 8000c76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	4812      	ldr	r0, [pc, #72]	; (8000cc8 <SYSCFG_EXTILineConfig+0x80>)
 8000c80:	79b9      	ldrb	r1, [r7, #6]
 8000c82:	0889      	lsrs	r1, r1, #2
 8000c84:	b2c9      	uxtb	r1, r1
 8000c86:	401a      	ands	r2, r3
 8000c88:	1c8b      	adds	r3, r1, #2
 8000c8a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <SYSCFG_EXTILineConfig+0x80>)
 8000c90:	79bb      	ldrb	r3, [r7, #6]
 8000c92:	089b      	lsrs	r3, r3, #2
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	3302      	adds	r3, #2
 8000c98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c9c:	79f9      	ldrb	r1, [r7, #7]
 8000c9e:	79bb      	ldrb	r3, [r7, #6]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <SYSCFG_EXTILineConfig+0x80>)
 8000cac:	79b9      	ldrb	r1, [r7, #6]
 8000cae:	0889      	lsrs	r1, r1, #2
 8000cb0:	b2c9      	uxtb	r1, r1
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	1c8b      	adds	r3, r1, #2
 8000cb6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40013800 	.word	0x40013800

08000ccc <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	889b      	ldrh	r3, [r3, #4]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000cde:	b29b      	uxth	r3, r3
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000d04:	2300      	movs	r3, #0
 8000d06:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	095b      	lsrs	r3, r3, #5
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000d12:	887b      	ldrh	r3, [r7, #2]
 8000d14:	f003 031f 	and.w	r3, r3, #31
 8000d18:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d107      	bne.n	8000d3a <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	899b      	ldrh	r3, [r3, #12]
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	461a      	mov	r2, r3
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	4013      	ands	r3, r2
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	e011      	b.n	8000d5e <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d107      	bne.n	8000d50 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	8a1b      	ldrh	r3, [r3, #16]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	e006      	b.n	8000d5e <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	8a9b      	ldrh	r3, [r3, #20]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	461a      	mov	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000d5e:	887b      	ldrh	r3, [r7, #2]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000d66:	2201      	movs	r2, #1
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d005      	beq.n	8000d90 <USART_GetITStatus+0xa4>
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d002      	beq.n	8000d90 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	74fb      	strb	r3, [r7, #19]
 8000d8e:	e001      	b.n	8000d94 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000d90:	2300      	movs	r3, #0
 8000d92:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000d94:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	371c      	adds	r7, #28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b085      	sub	sp, #20
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	460b      	mov	r3, r1
 8000dac:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8000dae:	2300      	movs	r3, #0
 8000db0:	81fb      	strh	r3, [r7, #14]
 8000db2:	2300      	movs	r3, #0
 8000db4:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8000db6:	887b      	ldrh	r3, [r7, #2]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000dbc:	89fb      	ldrh	r3, [r7, #14]
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8000dc6:	89bb      	ldrh	r3, [r7, #12]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	801a      	strh	r2, [r3, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <BUTTON_Interrupt_Init_B1>:
	{0,1,1,0},
	{0,0,0,0}
};

/*--------------------------------------------------------------------Define Button-------------------------------------------------------*/
static void BUTTON_Interrupt_Init_B1(void){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIO_InitStructure;
	EXTI_InitTypeDef	EXTI_InitStructure;
	NVIC_InitTypeDef	NVIC_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000de2:	2101      	movs	r1, #1
 8000de4:	2002      	movs	r0, #2
 8000de6:	f7ff fecf 	bl	8000b88 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000dea:	2300      	movs	r3, #0
 8000dec:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Pin = BUTTON_UP_B1_PIN;
 8000dee:	2320      	movs	r3, #32
 8000df0:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000df6:	2302      	movs	r3, #2
 8000df8:	757b      	strb	r3, [r7, #21]

	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4814      	ldr	r0, [pc, #80]	; (8000e54 <BUTTON_Interrupt_Init_B1+0x78>)
 8000e02:	f7ff fd6b 	bl	80008dc <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000e06:	2101      	movs	r1, #1
 8000e08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e0c:	f7ff fedc 	bl	8000bc8 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource5);
 8000e10:	2105      	movs	r1, #5
 8000e12:	2001      	movs	r0, #1
 8000e14:	f7ff ff18 	bl	8000c48 <SYSCFG_EXTILineConfig>
	EXTI_InitStructure.EXTI_Line =  EXTI_Line5;
 8000e18:	2320      	movs	r3, #32
 8000e1a:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	73bb      	strb	r3, [r7, #14]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000e20:	2300      	movs	r3, #0
 8000e22:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 8000e24:	230c      	movs	r3, #12
 8000e26:	737b      	strb	r3, [r7, #13]

	EXTI_Init(&EXTI_InitStructure);
 8000e28:	f107 0308 	add.w	r3, r7, #8
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fcb9 	bl	80007a4 <EXTI_Init>

	NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;
 8000e32:	2317      	movs	r3, #23
 8000e34:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000e36:	2301      	movs	r3, #1
 8000e38:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStructure);
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fa1b 	bl	8000280 <NVIC_Init>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40020400 	.word	0x40020400

08000e58 <BUTTON_Interrupt_Init_B2>:

static void BUTTON_Interrupt_Init_B2(void){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIO_InitStructure;
	EXTI_InitTypeDef	EXTI_InitStructure;
	NVIC_InitTypeDef	NVIC_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000e5e:	2101      	movs	r1, #1
 8000e60:	2002      	movs	r0, #2
 8000e62:	f7ff fe91 	bl	8000b88 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000e66:	2300      	movs	r3, #0
 8000e68:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Pin = BUTTON_LEFT_B2_PIN;
 8000e6a:	2308      	movs	r3, #8
 8000e6c:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000e72:	2302      	movs	r3, #2
 8000e74:	757b      	strb	r3, [r7, #21]

	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4814      	ldr	r0, [pc, #80]	; (8000ed0 <BUTTON_Interrupt_Init_B2+0x78>)
 8000e7e:	f7ff fd2d 	bl	80008dc <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000e82:	2101      	movs	r1, #1
 8000e84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e88:	f7ff fe9e 	bl	8000bc8 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource3);
 8000e8c:	2103      	movs	r1, #3
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f7ff feda 	bl	8000c48 <SYSCFG_EXTILineConfig>
	EXTI_InitStructure.EXTI_Line =  EXTI_Line3;
 8000e94:	2308      	movs	r3, #8
 8000e96:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	73bb      	strb	r3, [r7, #14]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 8000ea0:	230c      	movs	r3, #12
 8000ea2:	737b      	strb	r3, [r7, #13]

	EXTI_Init(&EXTI_InitStructure);
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fc7b 	bl	80007a4 <EXTI_Init>

	NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQn;
 8000eae:	2309      	movs	r3, #9
 8000eb0:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStructure);
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff f9dd 	bl	8000280 <NVIC_Init>
}
 8000ec6:	bf00      	nop
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40020400 	.word	0x40020400

08000ed4 <BUTTON_Interrupt_Init_B3>:

static void BUTTON_Interrupt_Init_B3(void){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIO_InitStructure;
	EXTI_InitTypeDef	EXTI_InitStructure;
	NVIC_InitTypeDef	NVIC_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000eda:	2101      	movs	r1, #1
 8000edc:	2001      	movs	r0, #1
 8000ede:	f7ff fe53 	bl	8000b88 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Pin = BUTTON_PLAY_B3_PIN;
 8000ee6:	2310      	movs	r3, #16
 8000ee8:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	757b      	strb	r3, [r7, #21]

	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4814      	ldr	r0, [pc, #80]	; (8000f4c <BUTTON_Interrupt_Init_B3+0x78>)
 8000efa:	f7ff fcef 	bl	80008dc <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000efe:	2101      	movs	r1, #1
 8000f00:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f04:	f7ff fe60 	bl	8000bc8 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource4);
 8000f08:	2104      	movs	r1, #4
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f7ff fe9c 	bl	8000c48 <SYSCFG_EXTILineConfig>
	EXTI_InitStructure.EXTI_Line =  EXTI_Line4;
 8000f10:	2310      	movs	r3, #16
 8000f12:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73bb      	strb	r3, [r7, #14]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 8000f1c:	230c      	movs	r3, #12
 8000f1e:	737b      	strb	r3, [r7, #13]

	EXTI_Init(&EXTI_InitStructure);
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fc3d 	bl	80007a4 <EXTI_Init>

	NVIC_InitStructure.NVIC_IRQChannel = EXTI4_IRQn;
 8000f2a:	230a      	movs	r3, #10
 8000f2c:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStructure);
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff f99f 	bl	8000280 <NVIC_Init>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40020000 	.word	0x40020000

08000f50 <BUTTON_Interrupt_Init_B4>:

static void BUTTON_Interrupt_Init_B4(void){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIO_InitStructure;
	EXTI_InitTypeDef	EXTI_InitStructure;
	NVIC_InitTypeDef	NVIC_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000f56:	2101      	movs	r1, #1
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f7ff fe15 	bl	8000b88 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Pin = BUTTON_RIGHT_B4_PIN;
 8000f62:	2301      	movs	r3, #1
 8000f64:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	757b      	strb	r3, [r7, #21]

	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000f6e:	f107 0310 	add.w	r3, r7, #16
 8000f72:	4619      	mov	r1, r3
 8000f74:	4814      	ldr	r0, [pc, #80]	; (8000fc8 <BUTTON_Interrupt_Init_B4+0x78>)
 8000f76:	f7ff fcb1 	bl	80008dc <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f80:	f7ff fe22 	bl	8000bc8 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource0);
 8000f84:	2100      	movs	r1, #0
 8000f86:	2001      	movs	r0, #1
 8000f88:	f7ff fe5e 	bl	8000c48 <SYSCFG_EXTILineConfig>
	EXTI_InitStructure.EXTI_Line =  EXTI_Line0;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000f90:	2301      	movs	r3, #1
 8000f92:	73bb      	strb	r3, [r7, #14]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000f94:	2300      	movs	r3, #0
 8000f96:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 8000f98:	230c      	movs	r3, #12
 8000f9a:	737b      	strb	r3, [r7, #13]

	EXTI_Init(&EXTI_InitStructure);
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fbff 	bl	80007a4 <EXTI_Init>

	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000faa:	2301      	movs	r3, #1
 8000fac:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStructure);
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff f961 	bl	8000280 <NVIC_Init>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40020400 	.word	0x40020400

08000fcc <LoadConfiguration>:
//}

/*----------------------------------------------------------------------Function Of Game----------------------------------------------------------------------*/

// load game screen
void LoadConfiguration(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af02      	add	r7, sp, #8
	ucg_DrawFrame(&ucg, 0, 0, 62, 122);
 8000fd2:	237a      	movs	r3, #122	; 0x7a
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	233e      	movs	r3, #62	; 0x3e
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	480a      	ldr	r0, [pc, #40]	; (8001008 <LoadConfiguration+0x3c>)
 8000fde:	f001 fe52 	bl	8002c86 <ucg_DrawFrame>
	ucg_DrawString(&ucg, 65, 12, 0, "Tetris Game");
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <LoadConfiguration+0x40>)
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	220c      	movs	r2, #12
 8000fea:	2141      	movs	r1, #65	; 0x41
 8000fec:	4806      	ldr	r0, [pc, #24]	; (8001008 <LoadConfiguration+0x3c>)
 8000fee:	f002 fec5 	bl	8003d7c <ucg_DrawString>
	ucg_DrawString(&ucg, 65, 48, 0, "Score: ");
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <LoadConfiguration+0x44>)
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	2230      	movs	r2, #48	; 0x30
 8000ffa:	2141      	movs	r1, #65	; 0x41
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <LoadConfiguration+0x3c>)
 8000ffe:	f002 febd 	bl	8003d7c <ucg_DrawString>
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000604 	.word	0x20000604
 800100c:	08005b48 	.word	0x08005b48
 8001010:	08005b54 	.word	0x08005b54

08001014 <ChooseBlock>:




// random block falling
void ChooseBlock(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
    int randomIndex = LightSensor_MeasureUseDMAMode() % 19;
 800101a:	f001 fc27 	bl	800286c <LightSensor_MeasureUseDMAMode>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <ChooseBlock+0x88>)
 8001024:	fba3 1302 	umull	r1, r3, r3, r2
 8001028:	1ad1      	subs	r1, r2, r3
 800102a:	0849      	lsrs	r1, r1, #1
 800102c:	440b      	add	r3, r1
 800102e:	0919      	lsrs	r1, r3, #4
 8001030:	460b      	mov	r3, r1
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	440b      	add	r3, r1
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	440b      	add	r3, r1
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	b29b      	uxth	r3, r3
 800103e:	607b      	str	r3, [r7, #4]
    int (*randomBlock)[4] = blockTypes[randomIndex];
 8001040:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <ChooseBlock+0x8c>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001048:	603b      	str	r3, [r7, #0]
    blockIndex = randomIndex;
 800104a:	4a16      	ldr	r2, [pc, #88]	; (80010a4 <ChooseBlock+0x90>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < 4; i++) {
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	e019      	b.n	800108a <ChooseBlock+0x76>
        for (int j = 0; j < 4; j++) {
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	e010      	b.n	800107e <ChooseBlock+0x6a>
            nextBlock[i][j] = randomBlock[i][j];
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	4413      	add	r3, r2
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800106a:	480f      	ldr	r0, [pc, #60]	; (80010a8 <ChooseBlock+0x94>)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	0099      	lsls	r1, r3, #2
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	440b      	add	r3, r1
 8001074:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for (int j = 0; j < 4; j++) {
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	3301      	adds	r3, #1
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	2b03      	cmp	r3, #3
 8001082:	ddeb      	ble.n	800105c <ChooseBlock+0x48>
    for (int i = 0; i < 4; i++) {
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3301      	adds	r3, #1
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2b03      	cmp	r3, #3
 800108e:	dde2      	ble.n	8001056 <ChooseBlock+0x42>
        }
    }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	af286bcb 	.word	0xaf286bcb
 80010a0:	200004ec 	.word	0x200004ec
 80010a4:	20000bc8 	.word	0x20000bc8
 80010a8:	20000b88 	.word	0x20000b88

080010ac <InitBlock>:

void InitBlock(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
	ChooseBlock();
 80010b2:	f7ff ffaf 	bl	8001014 <ChooseBlock>
    for (int i = 0; i < 4; i++) {
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	e019      	b.n	80010f0 <InitBlock+0x44>
        for (int j = 0; j < 4; j++) {
 80010bc:	2300      	movs	r3, #0
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	e010      	b.n	80010e4 <InitBlock+0x38>
            currentBlock[i][j] = nextBlock[i][j];
 80010c2:	490f      	ldr	r1, [pc, #60]	; (8001100 <InitBlock+0x54>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	009a      	lsls	r2, r3, #2
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80010d0:	480c      	ldr	r0, [pc, #48]	; (8001104 <InitBlock+0x58>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	0099      	lsls	r1, r3, #2
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	440b      	add	r3, r1
 80010da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for (int j = 0; j < 4; j++) {
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	3301      	adds	r3, #1
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	ddeb      	ble.n	80010c2 <InitBlock+0x16>
    for (int i = 0; i < 4; i++) {
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3301      	adds	r3, #1
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	dde2      	ble.n	80010bc <InitBlock+0x10>
        }
    }
}
 80010f6:	bf00      	nop
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000b88 	.word	0x20000b88
 8001104:	20000b48 	.word	0x20000b48

08001108 <DrawBlock>:

void DrawBlock(int x, int y,  int block[4][4]) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af02      	add	r7, sp, #8
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
	ucg_SetColor(&ucg,0,255,255,255);
 8001114:	23ff      	movs	r3, #255	; 0xff
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	23ff      	movs	r3, #255	; 0xff
 800111a:	22ff      	movs	r2, #255	; 0xff
 800111c:	2100      	movs	r1, #0
 800111e:	4821      	ldr	r0, [pc, #132]	; (80011a4 <DrawBlock+0x9c>)
 8001120:	f002 ffee 	bl	8004100 <ucg_SetColor>
	for(int i = 0; i < 4; i++){
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
 8001128:	e034      	b.n	8001194 <DrawBlock+0x8c>
		for(int j = 0; j < 4; j++) {
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	e02b      	b.n	8001188 <DrawBlock+0x80>
			if(block[i][j] == 1) {
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	4413      	add	r3, r2
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d11f      	bne.n	8001182 <DrawBlock+0x7a>
				int px = x + j*size+1;
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <DrawBlock+0xa0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	fb03 f202 	mul.w	r2, r3, r2
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
				int py = y + i*size;
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <DrawBlock+0xa0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	fb02 f303 	mul.w	r3, r2, r3
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	4413      	add	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
				ucg_DrawBox(&ucg, px, py, size, size);
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	b219      	sxth	r1, r3
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	b21a      	sxth	r2, r3
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <DrawBlock+0xa0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	b218      	sxth	r0, r3
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <DrawBlock+0xa0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	b21b      	sxth	r3, r3
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	4603      	mov	r3, r0
 800117c:	4809      	ldr	r0, [pc, #36]	; (80011a4 <DrawBlock+0x9c>)
 800117e:	f001 fd2f 	bl	8002be0 <ucg_DrawBox>
		for(int j = 0; j < 4; j++) {
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	3301      	adds	r3, #1
 8001186:	61bb      	str	r3, [r7, #24]
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2b03      	cmp	r3, #3
 800118c:	ddd0      	ble.n	8001130 <DrawBlock+0x28>
	for(int i = 0; i < 4; i++){
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3301      	adds	r3, #1
 8001192:	61fb      	str	r3, [r7, #28]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	2b03      	cmp	r3, #3
 8001198:	ddc7      	ble.n	800112a <DrawBlock+0x22>
			}
		}
	}
}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000604 	.word	0x20000604
 80011a8:	20000018 	.word	0x20000018

080011ac <EraseBlock>:

void EraseBlock(int x, int y, int block[4][4]) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af02      	add	r7, sp, #8
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
	ucg_SetColor(&ucg, 0, 0, 0, 0);
 80011b8:	2300      	movs	r3, #0
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2300      	movs	r3, #0
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	4821      	ldr	r0, [pc, #132]	; (8001248 <EraseBlock+0x9c>)
 80011c4:	f002 ff9c 	bl	8004100 <ucg_SetColor>
	for(int i = 0; i < 4; i++){
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
 80011cc:	e034      	b.n	8001238 <EraseBlock+0x8c>
		for(int j = 0; j < 4; j++) {
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	e02b      	b.n	800122c <EraseBlock+0x80>
			if(block[i][j] == 1) {
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	4413      	add	r3, r2
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d11f      	bne.n	8001226 <EraseBlock+0x7a>
				int px = x + j*size+1;
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <EraseBlock+0xa0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	fb03 f202 	mul.w	r2, r3, r2
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4413      	add	r3, r2
 80011f4:	3301      	adds	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
				int py = y + i*size;
 80011f8:	4b14      	ldr	r3, [pc, #80]	; (800124c <EraseBlock+0xa0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	69fa      	ldr	r2, [r7, #28]
 80011fe:	fb02 f303 	mul.w	r3, r2, r3
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	4413      	add	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
				ucg_DrawBox(&ucg, px, py, size, size);
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	b219      	sxth	r1, r3
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	b21a      	sxth	r2, r3
 8001210:	4b0e      	ldr	r3, [pc, #56]	; (800124c <EraseBlock+0xa0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	b218      	sxth	r0, r3
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <EraseBlock+0xa0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	b21b      	sxth	r3, r3
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	4603      	mov	r3, r0
 8001220:	4809      	ldr	r0, [pc, #36]	; (8001248 <EraseBlock+0x9c>)
 8001222:	f001 fcdd 	bl	8002be0 <ucg_DrawBox>
		for(int j = 0; j < 4; j++) {
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	3301      	adds	r3, #1
 800122a:	61bb      	str	r3, [r7, #24]
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	2b03      	cmp	r3, #3
 8001230:	ddd0      	ble.n	80011d4 <EraseBlock+0x28>
	for(int i = 0; i < 4; i++){
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3301      	adds	r3, #1
 8001236:	61fb      	str	r3, [r7, #28]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	2b03      	cmp	r3, #3
 800123c:	ddc7      	ble.n	80011ce <EraseBlock+0x22>
			}
		}
	}
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000604 	.word	0x20000604
 800124c:	20000018 	.word	0x20000018

08001250 <Collision>:

// check overlap
int Collision (int x, int y, int block[4][4]) {
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < 4; i++) {
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	e04a      	b.n	80012f8 <Collision+0xa8>
		for(int j = 0; j < 4; j++) {
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	e041      	b.n	80012ec <Collision+0x9c>
			if(block[i][j] == 1){
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	4413      	add	r3, r2
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d135      	bne.n	80012e6 <Collision+0x96>
				int px = x + j*size;
 800127a:	4b24      	ldr	r3, [pc, #144]	; (800130c <Collision+0xbc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	fb02 f303 	mul.w	r3, r2, r3
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	617b      	str	r3, [r7, #20]
				int py = y + i*size;
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <Collision+0xbc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	69fa      	ldr	r2, [r7, #28]
 8001290:	fb02 f303 	mul.w	r3, r2, r3
 8001294:	68ba      	ldr	r2, [r7, #8]
 8001296:	4413      	add	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
				if(py >= SCREEN_HEIGHT*size) return 1;
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <Collision+0xbc>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	4613      	mov	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	461a      	mov	r2, r3
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4293      	cmp	r3, r2
 80012ac:	db01      	blt.n	80012b2 <Collision+0x62>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e026      	b.n	8001300 <Collision+0xb0>
				if(screen[py/5][px/5] == 1) return 1;
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4a16      	ldr	r2, [pc, #88]	; (8001310 <Collision+0xc0>)
 80012b6:	fb82 1203 	smull	r1, r2, r2, r3
 80012ba:	1052      	asrs	r2, r2, #1
 80012bc:	17db      	asrs	r3, r3, #31
 80012be:	1ad2      	subs	r2, r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	4913      	ldr	r1, [pc, #76]	; (8001310 <Collision+0xc0>)
 80012c4:	fb81 0103 	smull	r0, r1, r1, r3
 80012c8:	1049      	asrs	r1, r1, #1
 80012ca:	17db      	asrs	r3, r3, #31
 80012cc:	1ac9      	subs	r1, r1, r3
 80012ce:	4811      	ldr	r0, [pc, #68]	; (8001314 <Collision+0xc4>)
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d101      	bne.n	80012e6 <Collision+0x96>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00c      	b.n	8001300 <Collision+0xb0>
		for(int j = 0; j < 4; j++) {
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	3301      	adds	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	ddba      	ble.n	8001268 <Collision+0x18>
	for(int i = 0; i < 4; i++) {
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3301      	adds	r3, #1
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	ddb1      	ble.n	8001262 <Collision+0x12>
			}
		}
	}
	return 0;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3724      	adds	r7, #36	; 0x24
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	20000018 	.word	0x20000018
 8001310:	66666667 	.word	0x66666667
 8001314:	200006bc 	.word	0x200006bc

08001318 <FixBlock>:

//stop falling when overlap
void FixBlock(int x, int y, int block[4][4]) {
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < 4; i++) {
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	e03b      	b.n	80013a2 <FixBlock+0x8a>
		for(int j = 0; j < 4; j++) {
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	e032      	b.n	8001396 <FixBlock+0x7e>
			if(block[i][j] == 1){
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	4413      	add	r3, r2
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d126      	bne.n	8001390 <FixBlock+0x78>
				int px = x + j*size;
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <FixBlock+0xa0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	fb02 f303 	mul.w	r3, r2, r3
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	4413      	add	r3, r2
 8001350:	617b      	str	r3, [r7, #20]
				int py = y + i*size;
 8001352:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <FixBlock+0xa0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	4413      	add	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
				screen[py/5][px/5] = 1;
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4a15      	ldr	r2, [pc, #84]	; (80013bc <FixBlock+0xa4>)
 8001366:	fb82 1203 	smull	r1, r2, r2, r3
 800136a:	1052      	asrs	r2, r2, #1
 800136c:	17db      	asrs	r3, r3, #31
 800136e:	1ad2      	subs	r2, r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	4912      	ldr	r1, [pc, #72]	; (80013bc <FixBlock+0xa4>)
 8001374:	fb81 0103 	smull	r0, r1, r1, r3
 8001378:	1049      	asrs	r1, r1, #1
 800137a:	17db      	asrs	r3, r3, #31
 800137c:	1ac9      	subs	r1, r1, r3
 800137e:	4810      	ldr	r0, [pc, #64]	; (80013c0 <FixBlock+0xa8>)
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	2201      	movs	r2, #1
 800138c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for(int j = 0; j < 4; j++) {
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	3301      	adds	r3, #1
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	2b03      	cmp	r3, #3
 800139a:	ddc9      	ble.n	8001330 <FixBlock+0x18>
	for(int i = 0; i < 4; i++) {
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	3301      	adds	r3, #1
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	ddc0      	ble.n	800132a <FixBlock+0x12>
			}
		}
	}
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000018 	.word	0x20000018
 80013bc:	66666667 	.word	0x66666667
 80013c0:	200006bc 	.word	0x200006bc

080013c4 <UpdateScore>:

// calculate score
void UpdateScore(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af02      	add	r7, sp, #8
	ucg_SetColor(&ucg, 0, 255, 255, 255);
 80013ca:	23ff      	movs	r3, #255	; 0xff
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	23ff      	movs	r3, #255	; 0xff
 80013d0:	22ff      	movs	r2, #255	; 0xff
 80013d2:	2100      	movs	r1, #0
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <UpdateScore+0x44>)
 80013d6:	f002 fe93 	bl	8004100 <ucg_SetColor>
	memset(str1,0,sizeof(str1));
 80013da:	220a      	movs	r2, #10
 80013dc:	2100      	movs	r1, #0
 80013de:	480b      	ldr	r0, [pc, #44]	; (800140c <UpdateScore+0x48>)
 80013e0:	f003 ff22 	bl	8005228 <memset>
	sprintf(str1,"Score: %d",score);
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <UpdateScore+0x4c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	490a      	ldr	r1, [pc, #40]	; (8001414 <UpdateScore+0x50>)
 80013ec:	4807      	ldr	r0, [pc, #28]	; (800140c <UpdateScore+0x48>)
 80013ee:	f003 fefb 	bl	80051e8 <siprintf>
	ucg_DrawString(&ucg, 65, 48, 0, str1);
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <UpdateScore+0x48>)
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2300      	movs	r3, #0
 80013f8:	2230      	movs	r2, #48	; 0x30
 80013fa:	2141      	movs	r1, #65	; 0x41
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <UpdateScore+0x44>)
 80013fe:	f002 fcbd 	bl	8003d7c <ucg_DrawString>
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000604 	.word	0x20000604
 800140c:	20000b3c 	.word	0x20000b3c
 8001410:	20000bcc 	.word	0x20000bcc
 8001414:	08005b5c 	.word	0x08005b5c

08001418 <CheckFullRow>:

//if full row, game delete row, update score and the blocks above will fall down
void CheckFullRow(){
 8001418:	b580      	push	{r7, lr}
 800141a:	b090      	sub	sp, #64	; 0x40
 800141c:	af02      	add	r7, sp, #8
	ucg_SetColor(&ucg, 0, 0, 0, 0);
 800141e:	2300      	movs	r3, #0
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2300      	movs	r3, #0
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	488d      	ldr	r0, [pc, #564]	; (8001660 <CheckFullRow+0x248>)
 800142a:	f002 fe69 	bl	8004100 <ucg_SetColor>
	for(int i = 0; i < SCREEN_HEIGHT; i++){
 800142e:	2300      	movs	r3, #0
 8001430:	637b      	str	r3, [r7, #52]	; 0x34
 8001432:	e10b      	b.n	800164c <CheckFullRow+0x234>
		for(int j = 0; j < SCREEN_WIDTH; j++){
 8001434:	2300      	movs	r3, #0
 8001436:	633b      	str	r3, [r7, #48]	; 0x30
 8001438:	e101      	b.n	800163e <CheckFullRow+0x226>
			if(screen[i][j] == 1){
 800143a:	498a      	ldr	r1, [pc, #552]	; (8001664 <CheckFullRow+0x24c>)
 800143c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001448:	4413      	add	r3, r2
 800144a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800144e:	2b01      	cmp	r3, #1
 8001450:	f040 80ee 	bne.w	8001630 <CheckFullRow+0x218>
				checkRow++;
 8001454:	4b84      	ldr	r3, [pc, #528]	; (8001668 <CheckFullRow+0x250>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	4a83      	ldr	r2, [pc, #524]	; (8001668 <CheckFullRow+0x250>)
 800145c:	6013      	str	r3, [r2, #0]
				if(checkRow == SCREEN_WIDTH){
 800145e:	4b82      	ldr	r3, [pc, #520]	; (8001668 <CheckFullRow+0x250>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b0c      	cmp	r3, #12
 8001464:	f040 80e8 	bne.w	8001638 <CheckFullRow+0x220>
					score+=5;
 8001468:	4b80      	ldr	r3, [pc, #512]	; (800166c <CheckFullRow+0x254>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	3305      	adds	r3, #5
 800146e:	4a7f      	ldr	r2, [pc, #508]	; (800166c <CheckFullRow+0x254>)
 8001470:	6013      	str	r3, [r2, #0]
					ucg_SetColor(&ucg, 0, 0, 0, 0);
 8001472:	2300      	movs	r3, #0
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2300      	movs	r3, #0
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	4878      	ldr	r0, [pc, #480]	; (8001660 <CheckFullRow+0x248>)
 800147e:	f002 fe3f 	bl	8004100 <ucg_SetColor>
					ucg_DrawBox(&ucg,1,i*5+1,SCREEN_WIDTH*5,5);
 8001482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001484:	b29b      	uxth	r3, r3
 8001486:	461a      	mov	r2, r3
 8001488:	0092      	lsls	r2, r2, #2
 800148a:	4413      	add	r3, r2
 800148c:	b29b      	uxth	r3, r3
 800148e:	3301      	adds	r3, #1
 8001490:	b29b      	uxth	r3, r3
 8001492:	b21a      	sxth	r2, r3
 8001494:	2305      	movs	r3, #5
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	233c      	movs	r3, #60	; 0x3c
 800149a:	2101      	movs	r1, #1
 800149c:	4870      	ldr	r0, [pc, #448]	; (8001660 <CheckFullRow+0x248>)
 800149e:	f001 fb9f 	bl	8002be0 <ucg_DrawBox>
					for(int k = 0; k<SCREEN_WIDTH; k++){
 80014a2:	2300      	movs	r3, #0
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014a6:	e00d      	b.n	80014c4 <CheckFullRow+0xac>
						screen[i][k] = 0;
 80014a8:	496e      	ldr	r1, [pc, #440]	; (8001664 <CheckFullRow+0x24c>)
 80014aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014b6:	4413      	add	r3, r2
 80014b8:	2200      	movs	r2, #0
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					for(int k = 0; k<SCREEN_WIDTH; k++){
 80014be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c0:	3301      	adds	r3, #1
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c6:	2b0b      	cmp	r3, #11
 80014c8:	ddee      	ble.n	80014a8 <CheckFullRow+0x90>
					}


					ucg_SetColor(&ucg, 0, 0, 0, 0);
 80014ca:	2300      	movs	r3, #0
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	2300      	movs	r3, #0
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	4862      	ldr	r0, [pc, #392]	; (8001660 <CheckFullRow+0x248>)
 80014d6:	f002 fe13 	bl	8004100 <ucg_SetColor>
					for(int ii = 4; ii <= i; ii++){
 80014da:	2304      	movs	r3, #4
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80014de:	e034      	b.n	800154a <CheckFullRow+0x132>
						for(int jj = 0; jj < SCREEN_WIDTH; jj++) {
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
 80014e4:	e02b      	b.n	800153e <CheckFullRow+0x126>
							if(screen[ii][jj] == 1) {
 80014e6:	495f      	ldr	r1, [pc, #380]	; (8001664 <CheckFullRow+0x24c>)
 80014e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014ea:	4613      	mov	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f4:	4413      	add	r3, r2
 80014f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d11c      	bne.n	8001538 <CheckFullRow+0x120>
								int px =  jj*size+1;
 80014fe:	4b5c      	ldr	r3, [pc, #368]	; (8001670 <CheckFullRow+0x258>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001504:	fb02 f303 	mul.w	r3, r2, r3
 8001508:	3301      	adds	r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
								int py =  ii*size+1;
 800150c:	4b58      	ldr	r3, [pc, #352]	; (8001670 <CheckFullRow+0x258>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	3301      	adds	r3, #1
 8001518:	607b      	str	r3, [r7, #4]
								ucg_DrawBox(&ucg, px, py, size, size);
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	b219      	sxth	r1, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	b21a      	sxth	r2, r3
 8001522:	4b53      	ldr	r3, [pc, #332]	; (8001670 <CheckFullRow+0x258>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b218      	sxth	r0, r3
 8001528:	4b51      	ldr	r3, [pc, #324]	; (8001670 <CheckFullRow+0x258>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	b21b      	sxth	r3, r3
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	4603      	mov	r3, r0
 8001532:	484b      	ldr	r0, [pc, #300]	; (8001660 <CheckFullRow+0x248>)
 8001534:	f001 fb54 	bl	8002be0 <ucg_DrawBox>
						for(int jj = 0; jj < SCREEN_WIDTH; jj++) {
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	3301      	adds	r3, #1
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	2b0b      	cmp	r3, #11
 8001542:	ddd0      	ble.n	80014e6 <CheckFullRow+0xce>
					for(int ii = 4; ii <= i; ii++){
 8001544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001546:	3301      	adds	r3, #1
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
 800154a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800154c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154e:	429a      	cmp	r2, r3
 8001550:	ddc6      	ble.n	80014e0 <CheckFullRow+0xc8>
							}
						}
					}

					for(int new_height = i; new_height >= 5; new_height--){
 8001552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001554:	623b      	str	r3, [r7, #32]
 8001556:	e020      	b.n	800159a <CheckFullRow+0x182>
						for(int new_width = SCREEN_WIDTH - 1; new_width >= 0; new_width--){
 8001558:	230b      	movs	r3, #11
 800155a:	61fb      	str	r3, [r7, #28]
 800155c:	e017      	b.n	800158e <CheckFullRow+0x176>
							screen[new_height][new_width] = screen[new_height - 1][new_width];//neu day man hinh thi code nay sai}
 800155e:	6a3b      	ldr	r3, [r7, #32]
 8001560:	1e5a      	subs	r2, r3, #1
 8001562:	4940      	ldr	r1, [pc, #256]	; (8001664 <CheckFullRow+0x24c>)
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	4413      	add	r3, r2
 8001570:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001574:	483b      	ldr	r0, [pc, #236]	; (8001664 <CheckFullRow+0x24c>)
 8001576:	6a3a      	ldr	r2, [r7, #32]
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	69fa      	ldr	r2, [r7, #28]
 8001582:	4413      	add	r3, r2
 8001584:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
						for(int new_width = SCREEN_WIDTH - 1; new_width >= 0; new_width--){
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	3b01      	subs	r3, #1
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	2b00      	cmp	r3, #0
 8001592:	dae4      	bge.n	800155e <CheckFullRow+0x146>
					for(int new_height = i; new_height >= 5; new_height--){
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	3b01      	subs	r3, #1
 8001598:	623b      	str	r3, [r7, #32]
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	2b04      	cmp	r3, #4
 800159e:	dcdb      	bgt.n	8001558 <CheckFullRow+0x140>
						}
					}

					ucg_SetColor(&ucg,0,255,255,255);
 80015a0:	23ff      	movs	r3, #255	; 0xff
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	23ff      	movs	r3, #255	; 0xff
 80015a6:	22ff      	movs	r2, #255	; 0xff
 80015a8:	2100      	movs	r1, #0
 80015aa:	482d      	ldr	r0, [pc, #180]	; (8001660 <CheckFullRow+0x248>)
 80015ac:	f002 fda8 	bl	8004100 <ucg_SetColor>
					for(int ii = 4; ii <= i; ii++){
 80015b0:	2304      	movs	r3, #4
 80015b2:	61bb      	str	r3, [r7, #24]
 80015b4:	e034      	b.n	8001620 <CheckFullRow+0x208>
						for(int jj = 0; jj < SCREEN_WIDTH; jj++) {
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	e02b      	b.n	8001614 <CheckFullRow+0x1fc>
							if(screen[ii][jj] == 1) {
 80015bc:	4929      	ldr	r1, [pc, #164]	; (8001664 <CheckFullRow+0x24c>)
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	4413      	add	r3, r2
 80015cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d11c      	bne.n	800160e <CheckFullRow+0x1f6>
								int px =  jj*size+1;
 80015d4:	4b26      	ldr	r3, [pc, #152]	; (8001670 <CheckFullRow+0x258>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	fb02 f303 	mul.w	r3, r2, r3
 80015de:	3301      	adds	r3, #1
 80015e0:	613b      	str	r3, [r7, #16]
								int py =  ii*size+1;
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <CheckFullRow+0x258>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	fb02 f303 	mul.w	r3, r2, r3
 80015ec:	3301      	adds	r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
								ucg_DrawBox(&ucg, px, py, size, size);
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	b219      	sxth	r1, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <CheckFullRow+0x258>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	b218      	sxth	r0, r3
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <CheckFullRow+0x258>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	b21b      	sxth	r3, r3
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	4603      	mov	r3, r0
 8001608:	4815      	ldr	r0, [pc, #84]	; (8001660 <CheckFullRow+0x248>)
 800160a:	f001 fae9 	bl	8002be0 <ucg_DrawBox>
						for(int jj = 0; jj < SCREEN_WIDTH; jj++) {
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3301      	adds	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	2b0b      	cmp	r3, #11
 8001618:	ddd0      	ble.n	80015bc <CheckFullRow+0x1a4>
					for(int ii = 4; ii <= i; ii++){
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	3301      	adds	r3, #1
 800161e:	61bb      	str	r3, [r7, #24]
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001624:	429a      	cmp	r2, r3
 8001626:	ddc6      	ble.n	80015b6 <CheckFullRow+0x19e>
							}
						}
					}

					checkRow = 0;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <CheckFullRow+0x250>)
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	e003      	b.n	8001638 <CheckFullRow+0x220>
				}
			}
			else{
				checkRow = 0;
 8001630:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <CheckFullRow+0x250>)
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
				break;
 8001636:	e006      	b.n	8001646 <CheckFullRow+0x22e>
		for(int j = 0; j < SCREEN_WIDTH; j++){
 8001638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163a:	3301      	adds	r3, #1
 800163c:	633b      	str	r3, [r7, #48]	; 0x30
 800163e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001640:	2b0b      	cmp	r3, #11
 8001642:	f77f aefa 	ble.w	800143a <CheckFullRow+0x22>
	for(int i = 0; i < SCREEN_HEIGHT; i++){
 8001646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001648:	3301      	adds	r3, #1
 800164a:	637b      	str	r3, [r7, #52]	; 0x34
 800164c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800164e:	2b17      	cmp	r3, #23
 8001650:	f77f aef0 	ble.w	8001434 <CheckFullRow+0x1c>
			}
		}
	}
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3738      	adds	r7, #56	; 0x38
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000604 	.word	0x20000604
 8001664:	200006bc 	.word	0x200006bc
 8001668:	200006b8 	.word	0x200006b8
 800166c:	20000bcc 	.word	0x20000bcc
 8001670:	20000018 	.word	0x20000018

08001674 <CheckFullColumn>:

//if full column, the game ends
void CheckFullColumn(){
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af02      	add	r7, sp, #8
	for(int i = 0 ; i < SCREEN_WIDTH;i++){
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	e01e      	b.n	80016be <CheckFullColumn+0x4a>
		if(screen[0][i] == 1){
 8001680:	4a13      	ldr	r2, [pc, #76]	; (80016d0 <CheckFullColumn+0x5c>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d115      	bne.n	80016b8 <CheckFullColumn+0x44>
			ucg_SetColor(&ucg, 0, 0, 255, 255);
 800168c:	23ff      	movs	r3, #255	; 0xff
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	23ff      	movs	r3, #255	; 0xff
 8001692:	2200      	movs	r2, #0
 8001694:	2100      	movs	r1, #0
 8001696:	480f      	ldr	r0, [pc, #60]	; (80016d4 <CheckFullColumn+0x60>)
 8001698:	f002 fd32 	bl	8004100 <ucg_SetColor>
			ucg_DrawString(&ucg, 4 ,60, 0, "Game Over");
 800169c:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <CheckFullColumn+0x64>)
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2300      	movs	r3, #0
 80016a2:	223c      	movs	r2, #60	; 0x3c
 80016a4:	2104      	movs	r1, #4
 80016a6:	480b      	ldr	r0, [pc, #44]	; (80016d4 <CheckFullColumn+0x60>)
 80016a8:	f002 fb68 	bl	8003d7c <ucg_DrawString>
			TimerStop(idTimer);
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <CheckFullColumn+0x68>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 fee2 	bl	800247c <TimerStop>
	for(int i = 0 ; i < SCREEN_WIDTH;i++){
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3301      	adds	r3, #1
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b0b      	cmp	r3, #11
 80016c2:	dddd      	ble.n	8001680 <CheckFullColumn+0xc>
		}
	}
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200006bc 	.word	0x200006bc
 80016d4:	20000604 	.word	0x20000604
 80016d8:	08005b68 	.word	0x08005b68
 80016dc:	20000014 	.word	0x20000014

080016e0 <FallingBlock>:


// falling 1 block in 1 time
void FallingBlock(int block[4][4]){
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	DrawBlock(currentX, currentY, block);
 80016e8:	4b46      	ldr	r3, [pc, #280]	; (8001804 <FallingBlock+0x124>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a46      	ldr	r2, [pc, #280]	; (8001808 <FallingBlock+0x128>)
 80016ee:	6811      	ldr	r1, [r2, #0]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fd08 	bl	8001108 <DrawBlock>
	CheckFullRow();
 80016f8:	f7ff fe8e 	bl	8001418 <CheckFullRow>
	if(!Collision(currentX, currentY + size, block)) {
 80016fc:	4b41      	ldr	r3, [pc, #260]	; (8001804 <FallingBlock+0x124>)
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	4b41      	ldr	r3, [pc, #260]	; (8001808 <FallingBlock+0x128>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b41      	ldr	r3, [pc, #260]	; (800180c <FallingBlock+0x12c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4413      	add	r3, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	4619      	mov	r1, r3
 800170e:	f7ff fd9f 	bl	8001250 <Collision>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10f      	bne.n	8001738 <FallingBlock+0x58>
		EraseBlock(currentX, currentY, block);
 8001718:	4b3a      	ldr	r3, [pc, #232]	; (8001804 <FallingBlock+0x124>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a3a      	ldr	r2, [pc, #232]	; (8001808 <FallingBlock+0x128>)
 800171e:	6811      	ldr	r1, [r2, #0]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fd42 	bl	80011ac <EraseBlock>
		currentY += size;
 8001728:	4b37      	ldr	r3, [pc, #220]	; (8001808 <FallingBlock+0x128>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b37      	ldr	r3, [pc, #220]	; (800180c <FallingBlock+0x12c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4413      	add	r3, r2
 8001732:	4a35      	ldr	r2, [pc, #212]	; (8001808 <FallingBlock+0x128>)
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e036      	b.n	80017a6 <FallingBlock+0xc6>
	}
	else {
		FixBlock(currentX, currentY, block);
 8001738:	4b32      	ldr	r3, [pc, #200]	; (8001804 <FallingBlock+0x124>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a32      	ldr	r2, [pc, #200]	; (8001808 <FallingBlock+0x128>)
 800173e:	6811      	ldr	r1, [r2, #0]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fde8 	bl	8001318 <FixBlock>
		currentX = 25;
 8001748:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <FallingBlock+0x124>)
 800174a:	2219      	movs	r2, #25
 800174c:	601a      	str	r2, [r3, #0]
		currentY = -9;
 800174e:	4b2e      	ldr	r3, [pc, #184]	; (8001808 <FallingBlock+0x128>)
 8001750:	f06f 0208 	mvn.w	r2, #8
 8001754:	601a      	str	r2, [r3, #0]
		x_axis = currentX;
 8001756:	4b2b      	ldr	r3, [pc, #172]	; (8001804 <FallingBlock+0x124>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a2d      	ldr	r2, [pc, #180]	; (8001810 <FallingBlock+0x130>)
 800175c:	6013      	str	r3, [r2, #0]
		ChooseBlock();
 800175e:	f7ff fc59 	bl	8001014 <ChooseBlock>
	    for (int i = 0; i < 4; i++) {
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	e019      	b.n	800179c <FallingBlock+0xbc>
	        for (int j = 0; j < 4; j++) {
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	e010      	b.n	8001790 <FallingBlock+0xb0>
	            currentBlock[i][j] = nextBlock[i][j];
 800176e:	4929      	ldr	r1, [pc, #164]	; (8001814 <FallingBlock+0x134>)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	009a      	lsls	r2, r3, #2
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	4413      	add	r3, r2
 8001778:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800177c:	4826      	ldr	r0, [pc, #152]	; (8001818 <FallingBlock+0x138>)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	0099      	lsls	r1, r3, #2
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	440b      	add	r3, r1
 8001786:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	        for (int j = 0; j < 4; j++) {
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	3301      	adds	r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	2b03      	cmp	r3, #3
 8001794:	ddeb      	ble.n	800176e <FallingBlock+0x8e>
	    for (int i = 0; i < 4; i++) {
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3301      	adds	r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b03      	cmp	r3, #3
 80017a0:	dde2      	ble.n	8001768 <FallingBlock+0x88>
	        }
	    }
		CheckFullColumn();
 80017a2:	f7ff ff67 	bl	8001674 <CheckFullColumn>
	}
	minx = (CalculateBlockMaxWidth(block, x_axis) - CalculateBlockWidth(block))*size;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <FallingBlock+0x130>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4619      	mov	r1, r3
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f85f 	bl	8001870 <CalculateBlockMaxWidth>
 80017b2:	4604      	mov	r4, r0
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f895 	bl	80018e4 <CalculateBlockWidth>
 80017ba:	4603      	mov	r3, r0
 80017bc:	1ae3      	subs	r3, r4, r3
 80017be:	4a13      	ldr	r2, [pc, #76]	; (800180c <FallingBlock+0x12c>)
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	fb02 f303 	mul.w	r3, r2, r3
 80017c6:	4a15      	ldr	r2, [pc, #84]	; (800181c <FallingBlock+0x13c>)
 80017c8:	6013      	str	r3, [r2, #0]
	maxx = CalculateBlockMaxWidth(block, x_axis)*size;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <FallingBlock+0x130>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f84d 	bl	8001870 <CalculateBlockMaxWidth>
 80017d6:	4602      	mov	r2, r0
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <FallingBlock+0x12c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	fb02 f303 	mul.w	r3, r2, r3
 80017e0:	4a0f      	ldr	r2, [pc, #60]	; (8001820 <FallingBlock+0x140>)
 80017e2:	6013      	str	r3, [r2, #0]
	if(x_axis != currentX) {
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <FallingBlock+0x130>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <FallingBlock+0x124>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d003      	beq.n	80017f8 <FallingBlock+0x118>
		currentX = x_axis;
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <FallingBlock+0x130>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a03      	ldr	r2, [pc, #12]	; (8001804 <FallingBlock+0x124>)
 80017f6:	6013      	str	r3, [r2, #0]
	}
	UpdateScore();
 80017f8:	f7ff fde4 	bl	80013c4 <UpdateScore>
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	bd90      	pop	{r4, r7, pc}
 8001804:	2000001c 	.word	0x2000001c
 8001808:	20000020 	.word	0x20000020
 800180c:	20000018 	.word	0x20000018
 8001810:	20000010 	.word	0x20000010
 8001814:	20000b88 	.word	0x20000b88
 8001818:	20000b48 	.word	0x20000b48
 800181c:	20000bd4 	.word	0x20000bd4
 8001820:	20000bd0 	.word	0x20000bd0

08001824 <Falling>:

//call function FallingBlock to falling every time each 350ms
void Falling(int block[4][4]) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af02      	add	r7, sp, #8
 800182a:	6078      	str	r0, [r7, #4]
	if (idTimer != NO_TIMER) {
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <Falling+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2bff      	cmp	r3, #255	; 0xff
 8001832:	d005      	beq.n	8001840 <Falling+0x1c>
		TimerStop(idTimer);
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <Falling+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fe1e 	bl	800247c <TimerStop>
	}

	idTimer = TimerStart("Fall", 500, TIMER_REPEAT_FOREVER, (void*) FallingBlock, block);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <Falling+0x44>)
 8001846:	22ff      	movs	r2, #255	; 0xff
 8001848:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800184c:	4807      	ldr	r0, [pc, #28]	; (800186c <Falling+0x48>)
 800184e:	f000 fdb3 	bl	80023b8 <TimerStart>
 8001852:	4603      	mov	r3, r0
 8001854:	461a      	mov	r2, r3
 8001856:	4b03      	ldr	r3, [pc, #12]	; (8001864 <Falling+0x40>)
 8001858:	601a      	str	r2, [r3, #0]
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000014 	.word	0x20000014
 8001868:	080016e1 	.word	0x080016e1
 800186c:	08005b74 	.word	0x08005b74

08001870 <CalculateBlockMaxWidth>:

//Measure the distance of the blocks to the left and right borders so that the blocks do not go beyond the screen
int CalculateBlockMaxWidth(int block[4][4], int x0) {
 8001870:	b480      	push	{r7}
 8001872:	b087      	sub	sp, #28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
    int max_width = -1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < 4; i++) {
 8001880:	2300      	movs	r3, #0
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	e01e      	b.n	80018c4 <CalculateBlockMaxWidth+0x54>
        for (int j = 0; j < 4; j++) {
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	e015      	b.n	80018b8 <CalculateBlockMaxWidth+0x48>
            if (block[i][j] == 1) {
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	4413      	add	r3, r2
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d109      	bne.n	80018b2 <CalculateBlockMaxWidth+0x42>
                int cellX = x0 + j;
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	60bb      	str	r3, [r7, #8]
                if (cellX > max_width) {
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	dd01      	ble.n	80018b2 <CalculateBlockMaxWidth+0x42>
                    max_width = cellX;
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 4; j++) {
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3301      	adds	r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	dde6      	ble.n	800188c <CalculateBlockMaxWidth+0x1c>
    for (int i = 0; i < 4; i++) {
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	3301      	adds	r3, #1
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	dddd      	ble.n	8001886 <CalculateBlockMaxWidth+0x16>
                }
            }
        }
    }

    return max_width - abs(x0) + 1;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bfb8      	it	lt
 80018d0:	425b      	neglt	r3, r3
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	3301      	adds	r3, #1
}
 80018d8:	4618      	mov	r0, r3
 80018da:	371c      	adds	r7, #28
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <CalculateBlockWidth>:

int CalculateBlockWidth(int block[4][4]) {
 80018e4:	b480      	push	{r7}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
    int width = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < 4; i++) {
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	e01f      	b.n	8001936 <CalculateBlockWidth+0x52>
        int rowWidth = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
        for (int j = 0; j < 4; j++) {
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	e00e      	b.n	800191e <CalculateBlockWidth+0x3a>
            if (block[i][j] == 1) {
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	4413      	add	r3, r2
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d102      	bne.n	8001918 <CalculateBlockWidth+0x34>
                rowWidth++;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3301      	adds	r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
        for (int j = 0; j < 4; j++) {
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	3301      	adds	r3, #1
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2b03      	cmp	r3, #3
 8001922:	dded      	ble.n	8001900 <CalculateBlockWidth+0x1c>
            }
        }
        if (rowWidth > width) {
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	429a      	cmp	r2, r3
 800192a:	dd01      	ble.n	8001930 <CalculateBlockWidth+0x4c>
            width = rowWidth;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 4; i++) {
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	3301      	adds	r3, #1
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	2b03      	cmp	r3, #3
 800193a:	dddc      	ble.n	80018f6 <CalculateBlockWidth+0x12>
        }
    }

    return width;
 800193c:	697b      	ldr	r3, [r7, #20]
}
 800193e:	4618      	mov	r0, r3
 8001940:	371c      	adds	r7, #28
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <RotateBlock>:

void RotateBlock(void)  {
 800194c:	b580      	push	{r7, lr}
 800194e:	b0aa      	sub	sp, #168	; 0xa8
 8001950:	af00      	add	r7, sp, #0
	int nextRotation = (currentRotation + 1)%4;
 8001952:	4bbe      	ldr	r3, [pc, #760]	; (8001c4c <RotateBlock+0x300>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	3301      	adds	r3, #1
 8001958:	425a      	negs	r2, r3
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	f002 0203 	and.w	r2, r2, #3
 8001962:	bf58      	it	pl
 8001964:	4253      	negpl	r3, r2
 8001966:	657b      	str	r3, [r7, #84]	; 0x54
	int tempBlock[4][4];
	if (blockIndex >= 0 && blockIndex < 4) {
 8001968:	4bb9      	ldr	r3, [pc, #740]	; (8001c50 <RotateBlock+0x304>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	f2c0 8082 	blt.w	8001a76 <RotateBlock+0x12a>
 8001972:	4bb7      	ldr	r3, [pc, #732]	; (8001c50 <RotateBlock+0x304>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b03      	cmp	r3, #3
 8001978:	dc7d      	bgt.n	8001a76 <RotateBlock+0x12a>
		blockIndex = (blockIndex + currentRotation)%4;
 800197a:	4bb5      	ldr	r3, [pc, #724]	; (8001c50 <RotateBlock+0x304>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4bb3      	ldr	r3, [pc, #716]	; (8001c4c <RotateBlock+0x300>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	425a      	negs	r2, r3
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	f002 0203 	and.w	r2, r2, #3
 800198e:	bf58      	it	pl
 8001990:	4253      	negpl	r3, r2
 8001992:	4aaf      	ldr	r2, [pc, #700]	; (8001c50 <RotateBlock+0x304>)
 8001994:	6013      	str	r3, [r2, #0]
	    int (*rotBlock)[4] = block_T[blockIndex];
 8001996:	4bae      	ldr	r3, [pc, #696]	; (8001c50 <RotateBlock+0x304>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4aae      	ldr	r2, [pc, #696]	; (8001c54 <RotateBlock+0x308>)
 800199c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a0:	653b      	str	r3, [r7, #80]	; 0x50
	    if (!Collision(currentX, currentY, rotBlock)) {
 80019a2:	4bad      	ldr	r3, [pc, #692]	; (8001c58 <RotateBlock+0x30c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4aad      	ldr	r2, [pc, #692]	; (8001c5c <RotateBlock+0x310>)
 80019a8:	6811      	ldr	r1, [r2, #0]
 80019aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fc4f 	bl	8001250 <Collision>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d12d      	bne.n	8001a14 <RotateBlock+0xc8>
		    for (int i = 0; i < 4; i++) {
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80019be:	e025      	b.n	8001a0c <RotateBlock+0xc0>
		        for (int j = 0; j < 4; j++) {
 80019c0:	2300      	movs	r3, #0
 80019c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80019c6:	e018      	b.n	80019fa <RotateBlock+0xae>
		            tempBlock[i][j] = rotBlock[i][j];
 80019c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80019d0:	4413      	add	r3, r2
 80019d2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80019d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80019da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019de:	0099      	lsls	r1, r3, #2
 80019e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019e4:	440b      	add	r3, r1
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	33a8      	adds	r3, #168	; 0xa8
 80019ea:	443b      	add	r3, r7
 80019ec:	f843 2ca8 	str.w	r2, [r3, #-168]
		        for (int j = 0; j < 4; j++) {
 80019f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019f4:	3301      	adds	r3, #1
 80019f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80019fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	dde2      	ble.n	80019c8 <RotateBlock+0x7c>
		    for (int i = 0; i < 4; i++) {
 8001a02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a06:	3301      	adds	r3, #1
 8001a08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001a0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	ddd5      	ble.n	80019c0 <RotateBlock+0x74>
		        }
		    }
	    }
	    for (int i = 0; i < 4; i++) {
 8001a14:	2300      	movs	r3, #0
 8001a16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a1a:	e025      	b.n	8001a68 <RotateBlock+0x11c>
	        for (int j = 0; j < 4; j++) {
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a22:	e018      	b.n	8001a56 <RotateBlock+0x10a>
	            currentBlock[i][j] = tempBlock[i][j];
 8001a24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a28:	009a      	lsls	r2, r3, #2
 8001a2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	33a8      	adds	r3, #168	; 0xa8
 8001a34:	443b      	add	r3, r7
 8001a36:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 8001a3a:	4889      	ldr	r0, [pc, #548]	; (8001c60 <RotateBlock+0x314>)
 8001a3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a40:	0099      	lsls	r1, r3, #2
 8001a42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a46:	440b      	add	r3, r1
 8001a48:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	        for (int j = 0; j < 4; j++) {
 8001a4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a50:	3301      	adds	r3, #1
 8001a52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	dde2      	ble.n	8001a24 <RotateBlock+0xd8>
	    for (int i = 0; i < 4; i++) {
 8001a5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a62:	3301      	adds	r3, #1
 8001a64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	ddd5      	ble.n	8001a1c <RotateBlock+0xd0>
	        }
	    }
	    currentRotation = nextRotation;
 8001a70:	4a76      	ldr	r2, [pc, #472]	; (8001c4c <RotateBlock+0x300>)
 8001a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a74:	6013      	str	r3, [r2, #0]
	}
	if (blockIndex >= 4 && blockIndex < 8) {
 8001a76:	4b76      	ldr	r3, [pc, #472]	; (8001c50 <RotateBlock+0x304>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	f340 8089 	ble.w	8001b92 <RotateBlock+0x246>
 8001a80:	4b73      	ldr	r3, [pc, #460]	; (8001c50 <RotateBlock+0x304>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b07      	cmp	r3, #7
 8001a86:	f300 8084 	bgt.w	8001b92 <RotateBlock+0x246>
		blockIndex = (blockIndex - 4 + currentRotation)%4;
 8001a8a:	4b71      	ldr	r3, [pc, #452]	; (8001c50 <RotateBlock+0x304>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	1f1a      	subs	r2, r3, #4
 8001a90:	4b6e      	ldr	r3, [pc, #440]	; (8001c4c <RotateBlock+0x300>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4413      	add	r3, r2
 8001a96:	425a      	negs	r2, r3
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	f002 0203 	and.w	r2, r2, #3
 8001aa0:	bf58      	it	pl
 8001aa2:	4253      	negpl	r3, r2
 8001aa4:	4a6a      	ldr	r2, [pc, #424]	; (8001c50 <RotateBlock+0x304>)
 8001aa6:	6013      	str	r3, [r2, #0]
	    int (*rotBlock)[4] = block_J[blockIndex];
 8001aa8:	4b69      	ldr	r3, [pc, #420]	; (8001c50 <RotateBlock+0x304>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a6d      	ldr	r2, [pc, #436]	; (8001c64 <RotateBlock+0x318>)
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
	    if (!Collision(currentX, currentY, rotBlock)) {
 8001ab4:	4b68      	ldr	r3, [pc, #416]	; (8001c58 <RotateBlock+0x30c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a68      	ldr	r2, [pc, #416]	; (8001c5c <RotateBlock+0x310>)
 8001aba:	6811      	ldr	r1, [r2, #0]
 8001abc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fbc6 	bl	8001250 <Collision>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d12d      	bne.n	8001b26 <RotateBlock+0x1da>
		    for (int i = 0; i < 4; i++) {
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ad0:	e025      	b.n	8001b1e <RotateBlock+0x1d2>
		        for (int j = 0; j < 4; j++) {
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ad8:	e018      	b.n	8001b0c <RotateBlock+0x1c0>
		            tempBlock[i][j] = rotBlock[i][j];
 8001ada:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001ae8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001aec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001af0:	0099      	lsls	r1, r3, #2
 8001af2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001af6:	440b      	add	r3, r1
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	33a8      	adds	r3, #168	; 0xa8
 8001afc:	443b      	add	r3, r7
 8001afe:	f843 2ca8 	str.w	r2, [r3, #-168]
		        for (int j = 0; j < 4; j++) {
 8001b02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b06:	3301      	adds	r3, #1
 8001b08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001b0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	dde2      	ble.n	8001ada <RotateBlock+0x18e>
		    for (int i = 0; i < 4; i++) {
 8001b14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b18:	3301      	adds	r3, #1
 8001b1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	ddd5      	ble.n	8001ad2 <RotateBlock+0x186>
		        }
		    }
	    }
	    for (int i = 0; i < 4; i++) {
 8001b26:	2300      	movs	r3, #0
 8001b28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001b2c:	e025      	b.n	8001b7a <RotateBlock+0x22e>
	        for (int j = 0; j < 4; j++) {
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b34:	e018      	b.n	8001b68 <RotateBlock+0x21c>
	            currentBlock[i][j] = tempBlock[i][j];
 8001b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b3a:	009a      	lsls	r2, r3, #2
 8001b3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	33a8      	adds	r3, #168	; 0xa8
 8001b46:	443b      	add	r3, r7
 8001b48:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 8001b4c:	4844      	ldr	r0, [pc, #272]	; (8001c60 <RotateBlock+0x314>)
 8001b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b52:	0099      	lsls	r1, r3, #2
 8001b54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b58:	440b      	add	r3, r1
 8001b5a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	        for (int j = 0; j < 4; j++) {
 8001b5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b62:	3301      	adds	r3, #1
 8001b64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	dde2      	ble.n	8001b36 <RotateBlock+0x1ea>
	    for (int i = 0; i < 4; i++) {
 8001b70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b74:	3301      	adds	r3, #1
 8001b76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	ddd5      	ble.n	8001b2e <RotateBlock+0x1e2>
	        }
	    }
	    currentRotation = nextRotation;
 8001b82:	4a32      	ldr	r2, [pc, #200]	; (8001c4c <RotateBlock+0x300>)
 8001b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b86:	6013      	str	r3, [r2, #0]
	    blockIndex += 4;
 8001b88:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <RotateBlock+0x304>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	4a30      	ldr	r2, [pc, #192]	; (8001c50 <RotateBlock+0x304>)
 8001b90:	6013      	str	r3, [r2, #0]
	}
	if (blockIndex >= 8 && blockIndex < 12) {
 8001b92:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <RotateBlock+0x304>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b07      	cmp	r3, #7
 8001b98:	f340 808f 	ble.w	8001cba <RotateBlock+0x36e>
 8001b9c:	4b2c      	ldr	r3, [pc, #176]	; (8001c50 <RotateBlock+0x304>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b0b      	cmp	r3, #11
 8001ba2:	f300 808a 	bgt.w	8001cba <RotateBlock+0x36e>
		blockIndex = (blockIndex - 8 + currentRotation)%4;
 8001ba6:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <RotateBlock+0x304>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f1a3 0208 	sub.w	r2, r3, #8
 8001bae:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <RotateBlock+0x300>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	425a      	negs	r2, r3
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	f002 0203 	and.w	r2, r2, #3
 8001bbe:	bf58      	it	pl
 8001bc0:	4253      	negpl	r3, r2
 8001bc2:	4a23      	ldr	r2, [pc, #140]	; (8001c50 <RotateBlock+0x304>)
 8001bc4:	6013      	str	r3, [r2, #0]
	    int (*rotBlock)[4] = block_Z[blockIndex];
 8001bc6:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <RotateBlock+0x304>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a27      	ldr	r2, [pc, #156]	; (8001c68 <RotateBlock+0x31c>)
 8001bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd0:	64bb      	str	r3, [r7, #72]	; 0x48
	    if (!Collision(currentX, currentY, rotBlock)) {
 8001bd2:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <RotateBlock+0x30c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a21      	ldr	r2, [pc, #132]	; (8001c5c <RotateBlock+0x310>)
 8001bd8:	6811      	ldr	r1, [r2, #0]
 8001bda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fb37 	bl	8001250 <Collision>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d12d      	bne.n	8001c44 <RotateBlock+0x2f8>
		    for (int i = 0; i < 4; i++) {
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001bee:	e025      	b.n	8001c3c <RotateBlock+0x2f0>
		        for (int j = 0; j < 4; j++) {
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001bf6:	e018      	b.n	8001c2a <RotateBlock+0x2de>
		            tempBlock[i][j] = rotBlock[i][j];
 8001bf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c00:	4413      	add	r3, r2
 8001c02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001c06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001c0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c0e:	0099      	lsls	r1, r3, #2
 8001c10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c14:	440b      	add	r3, r1
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	33a8      	adds	r3, #168	; 0xa8
 8001c1a:	443b      	add	r3, r7
 8001c1c:	f843 2ca8 	str.w	r2, [r3, #-168]
		        for (int j = 0; j < 4; j++) {
 8001c20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c24:	3301      	adds	r3, #1
 8001c26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	dde2      	ble.n	8001bf8 <RotateBlock+0x2ac>
		    for (int i = 0; i < 4; i++) {
 8001c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c36:	3301      	adds	r3, #1
 8001c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	ddd5      	ble.n	8001bf0 <RotateBlock+0x2a4>
		        }
		    }
	    }
	    for (int i = 0; i < 4; i++) {
 8001c44:	2300      	movs	r3, #0
 8001c46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c48:	e02c      	b.n	8001ca4 <RotateBlock+0x358>
 8001c4a:	bf00      	nop
 8001c4c:	20000024 	.word	0x20000024
 8001c50:	20000bc8 	.word	0x20000bc8
 8001c54:	20000538 	.word	0x20000538
 8001c58:	2000001c 	.word	0x2000001c
 8001c5c:	20000020 	.word	0x20000020
 8001c60:	20000b48 	.word	0x20000b48
 8001c64:	20000548 	.word	0x20000548
 8001c68:	20000558 	.word	0x20000558
	        for (int j = 0; j < 4; j++) {
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c70:	e012      	b.n	8001c98 <RotateBlock+0x34c>
	            currentBlock[i][j] = tempBlock[i][j];
 8001c72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c74:	009a      	lsls	r2, r3, #2
 8001c76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	33a8      	adds	r3, #168	; 0xa8
 8001c7e:	443b      	add	r3, r7
 8001c80:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 8001c84:	4883      	ldr	r0, [pc, #524]	; (8001e94 <RotateBlock+0x548>)
 8001c86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c88:	0099      	lsls	r1, r3, #2
 8001c8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c8c:	440b      	add	r3, r1
 8001c8e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	        for (int j = 0; j < 4; j++) {
 8001c92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c94:	3301      	adds	r3, #1
 8001c96:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	dde9      	ble.n	8001c72 <RotateBlock+0x326>
	    for (int i = 0; i < 4; i++) {
 8001c9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ca4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	dde0      	ble.n	8001c6c <RotateBlock+0x320>
	        }
	    }
	    currentRotation = nextRotation;
 8001caa:	4a7b      	ldr	r2, [pc, #492]	; (8001e98 <RotateBlock+0x54c>)
 8001cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cae:	6013      	str	r3, [r2, #0]
	    blockIndex += 8;
 8001cb0:	4b7a      	ldr	r3, [pc, #488]	; (8001e9c <RotateBlock+0x550>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3308      	adds	r3, #8
 8001cb6:	4a79      	ldr	r2, [pc, #484]	; (8001e9c <RotateBlock+0x550>)
 8001cb8:	6013      	str	r3, [r2, #0]
	}
	if (blockIndex >= 12 && blockIndex < 16) {
 8001cba:	4b78      	ldr	r3, [pc, #480]	; (8001e9c <RotateBlock+0x550>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b0b      	cmp	r3, #11
 8001cc0:	dd70      	ble.n	8001da4 <RotateBlock+0x458>
 8001cc2:	4b76      	ldr	r3, [pc, #472]	; (8001e9c <RotateBlock+0x550>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b0f      	cmp	r3, #15
 8001cc8:	dc6c      	bgt.n	8001da4 <RotateBlock+0x458>
		blockIndex = (blockIndex - 12 + currentRotation)%4;
 8001cca:	4b74      	ldr	r3, [pc, #464]	; (8001e9c <RotateBlock+0x550>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f1a3 020c 	sub.w	r2, r3, #12
 8001cd2:	4b71      	ldr	r3, [pc, #452]	; (8001e98 <RotateBlock+0x54c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	425a      	negs	r2, r3
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	f002 0203 	and.w	r2, r2, #3
 8001ce2:	bf58      	it	pl
 8001ce4:	4253      	negpl	r3, r2
 8001ce6:	4a6d      	ldr	r2, [pc, #436]	; (8001e9c <RotateBlock+0x550>)
 8001ce8:	6013      	str	r3, [r2, #0]
	    int (*rotBlock)[4] = block_L[blockIndex];
 8001cea:	4b6c      	ldr	r3, [pc, #432]	; (8001e9c <RotateBlock+0x550>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a6c      	ldr	r2, [pc, #432]	; (8001ea0 <RotateBlock+0x554>)
 8001cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf4:	647b      	str	r3, [r7, #68]	; 0x44
	    if (!Collision(currentX, currentY, rotBlock)) {
 8001cf6:	4b6b      	ldr	r3, [pc, #428]	; (8001ea4 <RotateBlock+0x558>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a6b      	ldr	r2, [pc, #428]	; (8001ea8 <RotateBlock+0x55c>)
 8001cfc:	6811      	ldr	r1, [r2, #0]
 8001cfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff faa5 	bl	8001250 <Collision>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d121      	bne.n	8001d50 <RotateBlock+0x404>
		    for (int i = 0; i < 4; i++) {
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	677b      	str	r3, [r7, #116]	; 0x74
 8001d10:	e01b      	b.n	8001d4a <RotateBlock+0x3fe>
		        for (int j = 0; j < 4; j++) {
 8001d12:	2300      	movs	r3, #0
 8001d14:	673b      	str	r3, [r7, #112]	; 0x70
 8001d16:	e012      	b.n	8001d3e <RotateBlock+0x3f2>
		            tempBlock[i][j] = rotBlock[i][j];
 8001d18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d1e:	4413      	add	r3, r2
 8001d20:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d28:	0099      	lsls	r1, r3, #2
 8001d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d2c:	440b      	add	r3, r1
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	33a8      	adds	r3, #168	; 0xa8
 8001d32:	443b      	add	r3, r7
 8001d34:	f843 2ca8 	str.w	r2, [r3, #-168]
		        for (int j = 0; j < 4; j++) {
 8001d38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	673b      	str	r3, [r7, #112]	; 0x70
 8001d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	dde9      	ble.n	8001d18 <RotateBlock+0x3cc>
		    for (int i = 0; i < 4; i++) {
 8001d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d46:	3301      	adds	r3, #1
 8001d48:	677b      	str	r3, [r7, #116]	; 0x74
 8001d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	dde0      	ble.n	8001d12 <RotateBlock+0x3c6>
		        }
		    }
	    }
	    for (int i = 0; i < 4; i++) {
 8001d50:	2300      	movs	r3, #0
 8001d52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d54:	e01b      	b.n	8001d8e <RotateBlock+0x442>
	        for (int j = 0; j < 4; j++) {
 8001d56:	2300      	movs	r3, #0
 8001d58:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d5a:	e012      	b.n	8001d82 <RotateBlock+0x436>
	            currentBlock[i][j] = tempBlock[i][j];
 8001d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d5e:	009a      	lsls	r2, r3, #2
 8001d60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	33a8      	adds	r3, #168	; 0xa8
 8001d68:	443b      	add	r3, r7
 8001d6a:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 8001d6e:	4849      	ldr	r0, [pc, #292]	; (8001e94 <RotateBlock+0x548>)
 8001d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d72:	0099      	lsls	r1, r3, #2
 8001d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d76:	440b      	add	r3, r1
 8001d78:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	        for (int j = 0; j < 4; j++) {
 8001d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d7e:	3301      	adds	r3, #1
 8001d80:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	dde9      	ble.n	8001d5c <RotateBlock+0x410>
	    for (int i = 0; i < 4; i++) {
 8001d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	dde0      	ble.n	8001d56 <RotateBlock+0x40a>
	        }
	    }
	    currentRotation = nextRotation;
 8001d94:	4a40      	ldr	r2, [pc, #256]	; (8001e98 <RotateBlock+0x54c>)
 8001d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d98:	6013      	str	r3, [r2, #0]
	    blockIndex += 12;
 8001d9a:	4b40      	ldr	r3, [pc, #256]	; (8001e9c <RotateBlock+0x550>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	330c      	adds	r3, #12
 8001da0:	4a3e      	ldr	r2, [pc, #248]	; (8001e9c <RotateBlock+0x550>)
 8001da2:	6013      	str	r3, [r2, #0]
	}
	if (blockIndex >= 16 && blockIndex < 18) {
 8001da4:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <RotateBlock+0x550>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b0f      	cmp	r3, #15
 8001daa:	dd6e      	ble.n	8001e8a <RotateBlock+0x53e>
 8001dac:	4b3b      	ldr	r3, [pc, #236]	; (8001e9c <RotateBlock+0x550>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b11      	cmp	r3, #17
 8001db2:	dc6a      	bgt.n	8001e8a <RotateBlock+0x53e>
			blockIndex = (blockIndex - 16 + currentRotation)%2;
 8001db4:	4b39      	ldr	r3, [pc, #228]	; (8001e9c <RotateBlock+0x550>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f1a3 0210 	sub.w	r2, r3, #16
 8001dbc:	4b36      	ldr	r3, [pc, #216]	; (8001e98 <RotateBlock+0x54c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	bfb8      	it	lt
 8001dca:	425b      	neglt	r3, r3
 8001dcc:	4a33      	ldr	r2, [pc, #204]	; (8001e9c <RotateBlock+0x550>)
 8001dce:	6013      	str	r3, [r2, #0]
		    int (*rotBlock)[4] = block_I[blockIndex];
 8001dd0:	4b32      	ldr	r3, [pc, #200]	; (8001e9c <RotateBlock+0x550>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a35      	ldr	r2, [pc, #212]	; (8001eac <RotateBlock+0x560>)
 8001dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dda:	643b      	str	r3, [r7, #64]	; 0x40
		    if (!Collision(currentX, currentY, rotBlock)) {
 8001ddc:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <RotateBlock+0x558>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a31      	ldr	r2, [pc, #196]	; (8001ea8 <RotateBlock+0x55c>)
 8001de2:	6811      	ldr	r1, [r2, #0]
 8001de4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fa32 	bl	8001250 <Collision>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d121      	bne.n	8001e36 <RotateBlock+0x4ea>
			    for (int i = 0; i < 4; i++) {
 8001df2:	2300      	movs	r3, #0
 8001df4:	667b      	str	r3, [r7, #100]	; 0x64
 8001df6:	e01b      	b.n	8001e30 <RotateBlock+0x4e4>
			        for (int j = 0; j < 4; j++) {
 8001df8:	2300      	movs	r3, #0
 8001dfa:	663b      	str	r3, [r7, #96]	; 0x60
 8001dfc:	e012      	b.n	8001e24 <RotateBlock+0x4d8>
			            tempBlock[i][j] = rotBlock[i][j];
 8001dfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e04:	4413      	add	r3, r2
 8001e06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e0e:	0099      	lsls	r1, r3, #2
 8001e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e12:	440b      	add	r3, r1
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	33a8      	adds	r3, #168	; 0xa8
 8001e18:	443b      	add	r3, r7
 8001e1a:	f843 2ca8 	str.w	r2, [r3, #-168]
			        for (int j = 0; j < 4; j++) {
 8001e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e20:	3301      	adds	r3, #1
 8001e22:	663b      	str	r3, [r7, #96]	; 0x60
 8001e24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	dde9      	ble.n	8001dfe <RotateBlock+0x4b2>
			    for (int i = 0; i < 4; i++) {
 8001e2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	667b      	str	r3, [r7, #100]	; 0x64
 8001e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	dde0      	ble.n	8001df8 <RotateBlock+0x4ac>
			        }
			    }
		    }
		    for (int i = 0; i < 4; i++) {
 8001e36:	2300      	movs	r3, #0
 8001e38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e3a:	e01b      	b.n	8001e74 <RotateBlock+0x528>
		        for (int j = 0; j < 4; j++) {
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e40:	e012      	b.n	8001e68 <RotateBlock+0x51c>
		            currentBlock[i][j] = tempBlock[i][j];
 8001e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e44:	009a      	lsls	r2, r3, #2
 8001e46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	33a8      	adds	r3, #168	; 0xa8
 8001e4e:	443b      	add	r3, r7
 8001e50:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 8001e54:	480f      	ldr	r0, [pc, #60]	; (8001e94 <RotateBlock+0x548>)
 8001e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e58:	0099      	lsls	r1, r3, #2
 8001e5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e5c:	440b      	add	r3, r1
 8001e5e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		        for (int j = 0; j < 4; j++) {
 8001e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e64:	3301      	adds	r3, #1
 8001e66:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	dde9      	ble.n	8001e42 <RotateBlock+0x4f6>
		    for (int i = 0; i < 4; i++) {
 8001e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e70:	3301      	adds	r3, #1
 8001e72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	dde0      	ble.n	8001e3c <RotateBlock+0x4f0>
		        }
		    }
		    currentRotation = nextRotation;
 8001e7a:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <RotateBlock+0x54c>)
 8001e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e7e:	6013      	str	r3, [r2, #0]
		    blockIndex += 16;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <RotateBlock+0x550>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	3310      	adds	r3, #16
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <RotateBlock+0x550>)
 8001e88:	6013      	str	r3, [r2, #0]
		}
}
 8001e8a:	bf00      	nop
 8001e8c:	37a8      	adds	r7, #168	; 0xa8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000b48 	.word	0x20000b48
 8001e98:	20000024 	.word	0x20000024
 8001e9c:	20000bc8 	.word	0x20000bc8
 8001ea0:	20000568 	.word	0x20000568
 8001ea4:	2000001c 	.word	0x2000001c
 8001ea8:	20000020 	.word	0x20000020
 8001eac:	20000578 	.word	0x20000578

08001eb0 <EXTI3_IRQHandler>:


/*-------------------------------------------------------------Button Use For Play-------------------------------------------------------------*/
void EXTI3_IRQHandler(void)//Button B2 for go left
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
	if(EXTI_GetFlagStatus(EXTI_Line3) == SET)
 8001eb4:	2008      	movs	r0, #8
 8001eb6:	f7fe fce7 	bl	8000888 <EXTI_GetFlagStatus>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d10f      	bne.n	8001ee0 <EXTI3_IRQHandler+0x30>
	{
		if (x_axis + minx >= size) {
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <EXTI3_IRQHandler+0x3c>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <EXTI3_IRQHandler+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	441a      	add	r2, r3
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <EXTI3_IRQHandler+0x44>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	db06      	blt.n	8001ee0 <EXTI3_IRQHandler+0x30>
			x_axis -= size;
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <EXTI3_IRQHandler+0x3c>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <EXTI3_IRQHandler+0x44>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	4a03      	ldr	r2, [pc, #12]	; (8001eec <EXTI3_IRQHandler+0x3c>)
 8001ede:	6013      	str	r3, [r2, #0]
		}
	}
	EXTI_ClearITPendingBit(EXTI_Line3);
 8001ee0:	2008      	movs	r0, #8
 8001ee2:	f7fe fceb 	bl	80008bc <EXTI_ClearITPendingBit>
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000010 	.word	0x20000010
 8001ef0:	20000bd4 	.word	0x20000bd4
 8001ef4:	20000018 	.word	0x20000018

08001ef8 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)//Button B4 for go right
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	if(EXTI_GetFlagStatus(EXTI_Line0) == SET)
 8001efc:	2001      	movs	r0, #1
 8001efe:	f7fe fcc3 	bl	8000888 <EXTI_GetFlagStatus>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d114      	bne.n	8001f32 <EXTI0_IRQHandler+0x3a>
	{
		if (x_axis + maxx <= (SCREEN_WIDTH-1) * size) {
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <EXTI0_IRQHandler+0x44>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <EXTI0_IRQHandler+0x48>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	18d1      	adds	r1, r2, r3
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <EXTI0_IRQHandler+0x4c>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	4413      	add	r3, r2
 8001f20:	4299      	cmp	r1, r3
 8001f22:	dc06      	bgt.n	8001f32 <EXTI0_IRQHandler+0x3a>
			x_axis += size;
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <EXTI0_IRQHandler+0x44>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <EXTI0_IRQHandler+0x4c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	4a03      	ldr	r2, [pc, #12]	; (8001f3c <EXTI0_IRQHandler+0x44>)
 8001f30:	6013      	str	r3, [r2, #0]
		}
	}
	EXTI_ClearITPendingBit(EXTI_Line0);
 8001f32:	2001      	movs	r0, #1
 8001f34:	f7fe fcc2 	bl	80008bc <EXTI_ClearITPendingBit>
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000010 	.word	0x20000010
 8001f40:	20000bd0 	.word	0x20000bd0
 8001f44:	20000018 	.word	0x20000018

08001f48 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)//Button B3 for start game
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
	if(EXTI_GetFlagStatus(EXTI_Line4) == SET)
 8001f4c:	2010      	movs	r0, #16
 8001f4e:	f7fe fc9b 	bl	8000888 <EXTI_GetFlagStatus>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d104      	bne.n	8001f62 <EXTI4_IRQHandler+0x1a>
	{
		Falling(block);
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <EXTI4_IRQHandler+0x24>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fc61 	bl	8001824 <Falling>
	}
	EXTI_ClearITPendingBit(EXTI_Line4);
 8001f62:	2010      	movs	r0, #16
 8001f64:	f7fe fcaa 	bl	80008bc <EXTI_ClearITPendingBit>
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000028 	.word	0x20000028

08001f70 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)//Button B1 for rotate
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
	if(EXTI_GetFlagStatus(EXTI_Line5) == SET)
 8001f74:	2020      	movs	r0, #32
 8001f76:	f7fe fc87 	bl	8000888 <EXTI_GetFlagStatus>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <EXTI9_5_IRQHandler+0x14>
	{
		RotateBlock();
 8001f80:	f7ff fce4 	bl	800194c <RotateBlock>
	}
	EXTI_ClearITPendingBit(EXTI_Line5);
 8001f84:	2020      	movs	r0, #32
 8001f86:	f7fe fc99 	bl	80008bc <EXTI_ClearITPendingBit>
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <AppInitCommon>:

/*------------------------------------------------------------------------------------------------------------------------------------------------------*/

static void AppInitCommon(void){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af02      	add	r7, sp, #8
	SystemCoreClockUpdate();
 8001f96:	f000 f8d5 	bl	8002144 <SystemCoreClockUpdate>
	TimerInit();
 8001f9a:	f000 f9eb 	bl	8002374 <TimerInit>
	InitBlock();
 8001f9e:	f7ff f885 	bl	80010ac <InitBlock>
	LightSensor_Init(ADC_READ_MODE_DMA);
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f000 fbb2 	bl	800270c <LightSensor_Init>
	BUTTON_Interrupt_Init_B1();
 8001fa8:	f7fe ff18 	bl	8000ddc <BUTTON_Interrupt_Init_B1>
	BUTTON_Interrupt_Init_B2();
 8001fac:	f7fe ff54 	bl	8000e58 <BUTTON_Interrupt_Init_B2>
	BUTTON_Interrupt_Init_B4();
 8001fb0:	f7fe ffce 	bl	8000f50 <BUTTON_Interrupt_Init_B4>
	BUTTON_Interrupt_Init_B3();
 8001fb4:	f7fe ff8e 	bl	8000ed4 <BUTTON_Interrupt_Init_B3>
//	BUTTON_Interrupt_Init_B5();
	Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID); //là hàm khởi tạo LCD.
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4810      	ldr	r0, [pc, #64]	; (8001ffc <AppInitCommon+0x6c>)
 8001fbc:	f000 fdf4 	bl	8002ba8 <Ucglib4WireSWSPI_begin>
	ucg_ClearScreen(&ucg);
 8001fc0:	480e      	ldr	r0, [pc, #56]	; (8001ffc <AppInitCommon+0x6c>)
 8001fc2:	f000 fe38 	bl	8002c36 <ucg_ClearScreen>
	ucg_SetFont(&ucg, ucg_font_ncenR08_hr);
 8001fc6:	490e      	ldr	r1, [pc, #56]	; (8002000 <AppInitCommon+0x70>)
 8001fc8:	480c      	ldr	r0, [pc, #48]	; (8001ffc <AppInitCommon+0x6c>)
 8001fca:	f001 ff9b 	bl	8003f04 <ucg_SetFont>
	ucg_SetColor(&ucg, 0, 255, 255, 255);
 8001fce:	23ff      	movs	r3, #255	; 0xff
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	23ff      	movs	r3, #255	; 0xff
 8001fd4:	22ff      	movs	r2, #255	; 0xff
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4808      	ldr	r0, [pc, #32]	; (8001ffc <AppInitCommon+0x6c>)
 8001fda:	f002 f891 	bl	8004100 <ucg_SetColor>
	ucg_SetColor(&ucg, 1, 0, 0, 0);
 8001fde:	2300      	movs	r3, #0
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	4804      	ldr	r0, [pc, #16]	; (8001ffc <AppInitCommon+0x6c>)
 8001fea:	f002 f889 	bl	8004100 <ucg_SetColor>
	ucg_SetRotate180(&ucg);
 8001fee:	4803      	ldr	r0, [pc, #12]	; (8001ffc <AppInitCommon+0x6c>)
 8001ff0:	f002 f980 	bl	80042f4 <ucg_SetRotate180>
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000604 	.word	0x20000604
 8002000:	08005c6c 	.word	0x08005c6c

08002004 <main>:


int main(void){
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
	AppInitCommon();
 8002008:	f7ff ffc2 	bl	8001f90 <AppInitCommon>
	LoadConfiguration();
 800200c:	f7fe ffde 	bl	8000fcc <LoadConfiguration>
	while(1){
		processTimerScheduler();
 8002010:	f000 fa90 	bl	8002534 <processTimerScheduler>
 8002014:	e7fc      	b.n	8002010 <main+0xc>
	...

08002018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002020:	4a14      	ldr	r2, [pc, #80]	; (8002074 <_sbrk+0x5c>)
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <_sbrk+0x60>)
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800202c:	4b13      	ldr	r3, [pc, #76]	; (800207c <_sbrk+0x64>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d102      	bne.n	800203a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <_sbrk+0x64>)
 8002036:	4a12      	ldr	r2, [pc, #72]	; (8002080 <_sbrk+0x68>)
 8002038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <_sbrk+0x64>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	429a      	cmp	r2, r3
 8002046:	d207      	bcs.n	8002058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002048:	f003 f8f6 	bl	8005238 <__errno>
 800204c:	4603      	mov	r3, r0
 800204e:	220c      	movs	r2, #12
 8002050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
 8002056:	e009      	b.n	800206c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <_sbrk+0x64>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	4a05      	ldr	r2, [pc, #20]	; (800207c <_sbrk+0x64>)
 8002068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800206a:	68fb      	ldr	r3, [r7, #12]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20018000 	.word	0x20018000
 8002078:	00000400 	.word	0x00000400
 800207c:	20000bd8 	.word	0x20000bd8
 8002080:	20001ed8 	.word	0x20001ed8

08002084 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002084:	480d      	ldr	r0, [pc, #52]	; (80020bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002086:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002088:	f000 f826 	bl	80020d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800208c:	480c      	ldr	r0, [pc, #48]	; (80020c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800208e:	490d      	ldr	r1, [pc, #52]	; (80020c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002090:	4a0d      	ldr	r2, [pc, #52]	; (80020c8 <LoopForever+0xe>)
  movs r3, #0
 8002092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002094:	e002      	b.n	800209c <LoopCopyDataInit>

08002096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800209a:	3304      	adds	r3, #4

0800209c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800209c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800209e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a0:	d3f9      	bcc.n	8002096 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80020a4:	4c0a      	ldr	r4, [pc, #40]	; (80020d0 <LoopForever+0x16>)
  movs r3, #0
 80020a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a8:	e001      	b.n	80020ae <LoopFillZerobss>

080020aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ac:	3204      	adds	r2, #4

080020ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b0:	d3fb      	bcc.n	80020aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020b2:	f003 f8c7 	bl	8005244 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020b6:	f7ff ffa5 	bl	8002004 <main>

080020ba <LoopForever>:

LoopForever:
  b LoopForever
 80020ba:	e7fe      	b.n	80020ba <LoopForever>
  ldr   r0, =_estack
 80020bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c4:	200005e8 	.word	0x200005e8
  ldr r2, =_sidata
 80020c8:	080061a4 	.word	0x080061a4
  ldr r2, =_sbss
 80020cc:	200005e8 	.word	0x200005e8
  ldr r4, =_ebss
 80020d0:	20001ed4 	.word	0x20001ed4

080020d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020d4:	e7fe      	b.n	80020d4 <ADC_IRQHandler>
	...

080020d8 <SystemInit>:
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4b16      	ldr	r3, [pc, #88]	; (8002138 <SystemInit+0x60>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e2:	4a15      	ldr	r2, [pc, #84]	; (8002138 <SystemInit+0x60>)
 80020e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <SystemInit+0x64>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a12      	ldr	r2, [pc, #72]	; (800213c <SystemInit+0x64>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4b10      	ldr	r3, [pc, #64]	; (800213c <SystemInit+0x64>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	4b0f      	ldr	r3, [pc, #60]	; (800213c <SystemInit+0x64>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a0e      	ldr	r2, [pc, #56]	; (800213c <SystemInit+0x64>)
 8002104:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <SystemInit+0x64>)
 8002110:	4a0b      	ldr	r2, [pc, #44]	; (8002140 <SystemInit+0x68>)
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <SystemInit+0x64>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a08      	ldr	r2, [pc, #32]	; (800213c <SystemInit+0x64>)
 800211a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <SystemInit+0x64>)
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	f000 f889 	bl	800223c <SetSysClock>
 800212a:	4b03      	ldr	r3, [pc, #12]	; (8002138 <SystemInit+0x60>)
 800212c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	e000ed00 	.word	0xe000ed00
 800213c:	40023800 	.word	0x40023800
 8002140:	24003010 	.word	0x24003010

08002144 <SystemCoreClockUpdate>:
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	2302      	movs	r3, #2
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	2302      	movs	r3, #2
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	4b32      	ldr	r3, [pc, #200]	; (8002228 <SystemCoreClockUpdate+0xe4>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	2b04      	cmp	r3, #4
 800216c:	d007      	beq.n	800217e <SystemCoreClockUpdate+0x3a>
 800216e:	2b08      	cmp	r3, #8
 8002170:	d009      	beq.n	8002186 <SystemCoreClockUpdate+0x42>
 8002172:	2b00      	cmp	r3, #0
 8002174:	d13d      	bne.n	80021f2 <SystemCoreClockUpdate+0xae>
 8002176:	4b2d      	ldr	r3, [pc, #180]	; (800222c <SystemCoreClockUpdate+0xe8>)
 8002178:	4a2d      	ldr	r2, [pc, #180]	; (8002230 <SystemCoreClockUpdate+0xec>)
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e03d      	b.n	80021fa <SystemCoreClockUpdate+0xb6>
 800217e:	4b2b      	ldr	r3, [pc, #172]	; (800222c <SystemCoreClockUpdate+0xe8>)
 8002180:	4a2c      	ldr	r2, [pc, #176]	; (8002234 <SystemCoreClockUpdate+0xf0>)
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	e039      	b.n	80021fa <SystemCoreClockUpdate+0xb6>
 8002186:	4b28      	ldr	r3, [pc, #160]	; (8002228 <SystemCoreClockUpdate+0xe4>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	0d9b      	lsrs	r3, r3, #22
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	4b25      	ldr	r3, [pc, #148]	; (8002228 <SystemCoreClockUpdate+0xe4>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00c      	beq.n	80021bc <SystemCoreClockUpdate+0x78>
 80021a2:	4a24      	ldr	r2, [pc, #144]	; (8002234 <SystemCoreClockUpdate+0xf0>)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021aa:	4a1f      	ldr	r2, [pc, #124]	; (8002228 <SystemCoreClockUpdate+0xe4>)
 80021ac:	6852      	ldr	r2, [r2, #4]
 80021ae:	0992      	lsrs	r2, r2, #6
 80021b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021b4:	fb02 f303 	mul.w	r3, r2, r3
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	e00b      	b.n	80021d4 <SystemCoreClockUpdate+0x90>
 80021bc:	4a1c      	ldr	r2, [pc, #112]	; (8002230 <SystemCoreClockUpdate+0xec>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c4:	4a18      	ldr	r2, [pc, #96]	; (8002228 <SystemCoreClockUpdate+0xe4>)
 80021c6:	6852      	ldr	r2, [r2, #4]
 80021c8:	0992      	lsrs	r2, r2, #6
 80021ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021ce:	fb02 f303 	mul.w	r3, r2, r3
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	4b14      	ldr	r3, [pc, #80]	; (8002228 <SystemCoreClockUpdate+0xe4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	0c1b      	lsrs	r3, r3, #16
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	3301      	adds	r3, #1
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ec:	4a0f      	ldr	r2, [pc, #60]	; (800222c <SystemCoreClockUpdate+0xe8>)
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	e003      	b.n	80021fa <SystemCoreClockUpdate+0xb6>
 80021f2:	4b0e      	ldr	r3, [pc, #56]	; (800222c <SystemCoreClockUpdate+0xe8>)
 80021f4:	4a0e      	ldr	r2, [pc, #56]	; (8002230 <SystemCoreClockUpdate+0xec>)
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	bf00      	nop
 80021fa:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <SystemCoreClockUpdate+0xe4>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	4a0c      	ldr	r2, [pc, #48]	; (8002238 <SystemCoreClockUpdate+0xf4>)
 8002206:	5cd3      	ldrb	r3, [r2, r3]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	4b07      	ldr	r3, [pc, #28]	; (800222c <SystemCoreClockUpdate+0xe8>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	fa22 f303 	lsr.w	r3, r2, r3
 8002216:	4a05      	ldr	r2, [pc, #20]	; (800222c <SystemCoreClockUpdate+0xe8>)
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	bf00      	nop
 800221c:	371c      	adds	r7, #28
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800
 800222c:	20000580 	.word	0x20000580
 8002230:	00f42400 	.word	0x00f42400
 8002234:	017d7840 	.word	0x017d7840
 8002238:	20000584 	.word	0x20000584

0800223c <SetSysClock>:
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
 8002240:	4b22      	ldr	r3, [pc, #136]	; (80022cc <SetSysClock+0x90>)
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	4a21      	ldr	r2, [pc, #132]	; (80022cc <SetSysClock+0x90>)
 8002246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224a:	6413      	str	r3, [r2, #64]	; 0x40
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <SetSysClock+0x94>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1f      	ldr	r2, [pc, #124]	; (80022d0 <SetSysClock+0x94>)
 8002252:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <SetSysClock+0x90>)
 800225a:	4a1c      	ldr	r2, [pc, #112]	; (80022cc <SetSysClock+0x90>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	6093      	str	r3, [r2, #8]
 8002260:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <SetSysClock+0x90>)
 8002262:	4a1a      	ldr	r2, [pc, #104]	; (80022cc <SetSysClock+0x90>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	6093      	str	r3, [r2, #8]
 8002268:	4b18      	ldr	r3, [pc, #96]	; (80022cc <SetSysClock+0x90>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	4a17      	ldr	r2, [pc, #92]	; (80022cc <SetSysClock+0x90>)
 800226e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002272:	6093      	str	r3, [r2, #8]
 8002274:	4b15      	ldr	r3, [pc, #84]	; (80022cc <SetSysClock+0x90>)
 8002276:	4a17      	ldr	r2, [pc, #92]	; (80022d4 <SetSysClock+0x98>)
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	4b14      	ldr	r3, [pc, #80]	; (80022cc <SetSysClock+0x90>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a13      	ldr	r2, [pc, #76]	; (80022cc <SetSysClock+0x90>)
 8002280:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	bf00      	nop
 8002288:	4b10      	ldr	r3, [pc, #64]	; (80022cc <SetSysClock+0x90>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f9      	beq.n	8002288 <SetSysClock+0x4c>
 8002294:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <SetSysClock+0x9c>)
 8002296:	f240 6202 	movw	r2, #1538	; 0x602
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <SetSysClock+0x90>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <SetSysClock+0x90>)
 80022a2:	f023 0303 	bic.w	r3, r3, #3
 80022a6:	6093      	str	r3, [r2, #8]
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <SetSysClock+0x90>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4a07      	ldr	r2, [pc, #28]	; (80022cc <SetSysClock+0x90>)
 80022ae:	f043 0302 	orr.w	r3, r3, #2
 80022b2:	6093      	str	r3, [r2, #8]
 80022b4:	bf00      	nop
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <SetSysClock+0x90>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d1f9      	bne.n	80022b6 <SetSysClock+0x7a>
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40007000 	.word	0x40007000
 80022d4:	08015410 	.word	0x08015410
 80022d8:	40023c00 	.word	0x40023c00

080022dc <NVIC_SetPriority>:
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	da0b      	bge.n	8002308 <NVIC_SetPriority+0x2c>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	490c      	ldr	r1, [pc, #48]	; (8002328 <NVIC_SetPriority+0x4c>)
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	3b04      	subs	r3, #4
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	440b      	add	r3, r1
 8002304:	761a      	strb	r2, [r3, #24]
 8002306:	e009      	b.n	800231c <NVIC_SetPriority+0x40>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	4907      	ldr	r1, [pc, #28]	; (800232c <NVIC_SetPriority+0x50>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	0112      	lsls	r2, r2, #4
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	440b      	add	r3, r1
 8002318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00
 800232c:	e000e100 	.word	0xe000e100

08002330 <SysTick_Config>:
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3b01      	subs	r3, #1
 800233c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002340:	d301      	bcc.n	8002346 <SysTick_Config+0x16>
 8002342:	2301      	movs	r3, #1
 8002344:	e00f      	b.n	8002366 <SysTick_Config+0x36>
 8002346:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <SysTick_Config+0x40>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	6053      	str	r3, [r2, #4]
 800234e:	210f      	movs	r1, #15
 8002350:	f04f 30ff 	mov.w	r0, #4294967295
 8002354:	f7ff ffc2 	bl	80022dc <NVIC_SetPriority>
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <SysTick_Config+0x40>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	4b04      	ldr	r3, [pc, #16]	; (8002370 <SysTick_Config+0x40>)
 8002360:	2207      	movs	r2, #7
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	2300      	movs	r3, #0
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	e000e010 	.word	0xe000e010

08002374 <TimerInit>:
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	463b      	mov	r3, r7
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe fb55 	bl	8000a2c <RCC_GetClocksFreq>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <TimerInit+0x3c>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	099b      	lsrs	r3, r3, #6
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ffcf 	bl	8002330 <SysTick_Config>
 8002392:	2101      	movs	r1, #1
 8002394:	f04f 30ff 	mov.w	r0, #4294967295
 8002398:	f7ff ffa0 	bl	80022dc <NVIC_SetPriority>
 800239c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80023a0:	2100      	movs	r1, #0
 80023a2:	4804      	ldr	r0, [pc, #16]	; (80023b4 <TimerInit+0x40>)
 80023a4:	f002 f8b6 	bl	8004514 <memsetl>
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	10624dd3 	.word	0x10624dd3
 80023b4:	20000bdc 	.word	0x20000bdc

080023b8 <TimerStart>:
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	4613      	mov	r3, r2
 80023c6:	71fb      	strb	r3, [r7, #7]
 80023c8:	2300      	movs	r3, #0
 80023ca:	75fb      	strb	r3, [r7, #23]
 80023cc:	e04c      	b.n	8002468 <TimerStart+0xb0>
 80023ce:	7dfa      	ldrb	r2, [r7, #23]
 80023d0:	4929      	ldr	r1, [pc, #164]	; (8002478 <TimerStart+0xc0>)
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	440b      	add	r3, r1
 80023dc:	3310      	adds	r3, #16
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d13e      	bne.n	8002462 <TimerStart+0xaa>
 80023e4:	7dfa      	ldrb	r2, [r7, #23]
 80023e6:	4924      	ldr	r1, [pc, #144]	; (8002478 <TimerStart+0xc0>)
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	440b      	add	r3, r1
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	7dfa      	ldrb	r2, [r7, #23]
 80023f8:	491f      	ldr	r1, [pc, #124]	; (8002478 <TimerStart+0xc0>)
 80023fa:	4613      	mov	r3, r2
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	4413      	add	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	440b      	add	r3, r1
 8002404:	3310      	adds	r3, #16
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	7dfa      	ldrb	r2, [r7, #23]
 800240c:	491a      	ldr	r1, [pc, #104]	; (8002478 <TimerStart+0xc0>)
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	330c      	adds	r3, #12
 800241a:	79fa      	ldrb	r2, [r7, #7]
 800241c:	701a      	strb	r2, [r3, #0]
 800241e:	7dfa      	ldrb	r2, [r7, #23]
 8002420:	4915      	ldr	r1, [pc, #84]	; (8002478 <TimerStart+0xc0>)
 8002422:	4613      	mov	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	440b      	add	r3, r1
 800242c:	3314      	adds	r3, #20
 800242e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	7dfc      	ldrb	r4, [r7, #23]
 8002434:	f000 f872 	bl	800251c <GetMilSecTick>
 8002438:	4601      	mov	r1, r0
 800243a:	4a0f      	ldr	r2, [pc, #60]	; (8002478 <TimerStart+0xc0>)
 800243c:	4623      	mov	r3, r4
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4423      	add	r3, r4
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	3304      	adds	r3, #4
 8002448:	6019      	str	r1, [r3, #0]
 800244a:	7dfa      	ldrb	r2, [r7, #23]
 800244c:	490a      	ldr	r1, [pc, #40]	; (8002478 <TimerStart+0xc0>)
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	440b      	add	r3, r1
 8002458:	3308      	adds	r3, #8
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	7dfb      	ldrb	r3, [r7, #23]
 8002460:	e006      	b.n	8002470 <TimerStart+0xb8>
 8002462:	7dfb      	ldrb	r3, [r7, #23]
 8002464:	3301      	adds	r3, #1
 8002466:	75fb      	strb	r3, [r7, #23]
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	2b0f      	cmp	r3, #15
 800246c:	d9af      	bls.n	80023ce <TimerStart+0x16>
 800246e:	23ff      	movs	r3, #255	; 0xff
 8002470:	4618      	mov	r0, r3
 8002472:	371c      	adds	r7, #28
 8002474:	46bd      	mov	sp, r7
 8002476:	bd90      	pop	{r4, r7, pc}
 8002478:	20000bdc 	.word	0x20000bdc

0800247c <TimerStop>:
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	2b0f      	cmp	r3, #15
 800248a:	d80a      	bhi.n	80024a2 <TimerStop+0x26>
 800248c:	79fa      	ldrb	r2, [r7, #7]
 800248e:	4922      	ldr	r1, [pc, #136]	; (8002518 <TimerStop+0x9c>)
 8002490:	4613      	mov	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4413      	add	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	440b      	add	r3, r1
 800249a:	3310      	adds	r3, #16
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <TimerStop+0x2a>
 80024a2:	2300      	movs	r3, #0
 80024a4:	e031      	b.n	800250a <TimerStop+0x8e>
 80024a6:	79fa      	ldrb	r2, [r7, #7]
 80024a8:	491b      	ldr	r1, [pc, #108]	; (8002518 <TimerStop+0x9c>)
 80024aa:	4613      	mov	r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4413      	add	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	440b      	add	r3, r1
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	79fa      	ldrb	r2, [r7, #7]
 80024ba:	4917      	ldr	r1, [pc, #92]	; (8002518 <TimerStop+0x9c>)
 80024bc:	4613      	mov	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4413      	add	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	440b      	add	r3, r1
 80024c6:	3310      	adds	r3, #16
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	79fa      	ldrb	r2, [r7, #7]
 80024ce:	4912      	ldr	r1, [pc, #72]	; (8002518 <TimerStop+0x9c>)
 80024d0:	4613      	mov	r3, r2
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4413      	add	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	440b      	add	r3, r1
 80024da:	330c      	adds	r3, #12
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
 80024e0:	79fa      	ldrb	r2, [r7, #7]
 80024e2:	490d      	ldr	r1, [pc, #52]	; (8002518 <TimerStop+0x9c>)
 80024e4:	4613      	mov	r3, r2
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4413      	add	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	440b      	add	r3, r1
 80024ee:	3308      	adds	r3, #8
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	79fa      	ldrb	r2, [r7, #7]
 80024f6:	4908      	ldr	r1, [pc, #32]	; (8002518 <TimerStop+0x9c>)
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	440b      	add	r3, r1
 8002502:	3304      	adds	r3, #4
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	2301      	movs	r3, #1
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000bdc 	.word	0x20000bdc

0800251c <GetMilSecTick>:
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
 8002520:	4b03      	ldr	r3, [pc, #12]	; (8002530 <GetMilSecTick+0x14>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20000d5c 	.word	0x20000d5c

08002534 <processTimerScheduler>:
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	2300      	movs	r3, #0
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	e068      	b.n	8002612 <processTimerScheduler+0xde>
 8002540:	7bfa      	ldrb	r2, [r7, #15]
 8002542:	4937      	ldr	r1, [pc, #220]	; (8002620 <processTimerScheduler+0xec>)
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	3310      	adds	r3, #16
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d05a      	beq.n	800260c <processTimerScheduler+0xd8>
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	4618      	mov	r0, r3
 800255a:	f000 f863 	bl	8002624 <TimeExpired>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d053      	beq.n	800260c <processTimerScheduler+0xd8>
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	492e      	ldr	r1, [pc, #184]	; (8002620 <processTimerScheduler+0xec>)
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	440b      	add	r3, r1
 8002572:	3310      	adds	r3, #16
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	4929      	ldr	r1, [pc, #164]	; (8002620 <processTimerScheduler+0xec>)
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	440b      	add	r3, r1
 8002586:	3314      	adds	r3, #20
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	4924      	ldr	r1, [pc, #144]	; (8002620 <processTimerScheduler+0xec>)
 8002590:	4613      	mov	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	440b      	add	r3, r1
 800259a:	330c      	adds	r3, #12
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2bff      	cmp	r3, #255	; 0xff
 80025a2:	d020      	beq.n	80025e6 <processTimerScheduler+0xb2>
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	491e      	ldr	r1, [pc, #120]	; (8002620 <processTimerScheduler+0xec>)
 80025a8:	4613      	mov	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	440b      	add	r3, r1
 80025b2:	330c      	adds	r3, #12
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d014      	beq.n	80025e6 <processTimerScheduler+0xb2>
 80025bc:	7bfa      	ldrb	r2, [r7, #15]
 80025be:	4918      	ldr	r1, [pc, #96]	; (8002620 <processTimerScheduler+0xec>)
 80025c0:	4613      	mov	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	440b      	add	r3, r1
 80025ca:	330c      	adds	r3, #12
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b2d8      	uxtb	r0, r3
 80025d4:	4912      	ldr	r1, [pc, #72]	; (8002620 <processTimerScheduler+0xec>)
 80025d6:	4613      	mov	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4413      	add	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	440b      	add	r3, r1
 80025e0:	330c      	adds	r3, #12
 80025e2:	4602      	mov	r2, r0
 80025e4:	701a      	strb	r2, [r3, #0]
 80025e6:	7bfa      	ldrb	r2, [r7, #15]
 80025e8:	490d      	ldr	r1, [pc, #52]	; (8002620 <processTimerScheduler+0xec>)
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	440b      	add	r3, r1
 80025f4:	330c      	adds	r3, #12
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d103      	bne.n	8002606 <processTimerScheduler+0xd2>
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ff3b 	bl	800247c <TimerStop>
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	4798      	blx	r3
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	3301      	adds	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	2b0f      	cmp	r3, #15
 8002616:	d993      	bls.n	8002540 <processTimerScheduler+0xc>
 8002618:	bf00      	nop
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000bdc 	.word	0x20000bdc

08002624 <TimeExpired>:
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	71fb      	strb	r3, [r7, #7]
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	b672      	cpsid	i
 8002634:	f7ff ff72 	bl	800251c <GetMilSecTick>
 8002638:	60b8      	str	r0, [r7, #8]
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	2b0f      	cmp	r3, #15
 800263e:	d80a      	bhi.n	8002656 <TimeExpired+0x32>
 8002640:	79fa      	ldrb	r2, [r7, #7]
 8002642:	492a      	ldr	r1, [pc, #168]	; (80026ec <TimeExpired+0xc8>)
 8002644:	4613      	mov	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4413      	add	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	440b      	add	r3, r1
 800264e:	3310      	adds	r3, #16
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d102      	bne.n	800265c <TimeExpired+0x38>
 8002656:	b662      	cpsie	i
 8002658:	2300      	movs	r3, #0
 800265a:	e042      	b.n	80026e2 <TimeExpired+0xbe>
 800265c:	79fa      	ldrb	r2, [r7, #7]
 800265e:	4923      	ldr	r1, [pc, #140]	; (80026ec <TimeExpired+0xc8>)
 8002660:	4613      	mov	r3, r2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4413      	add	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	440b      	add	r3, r1
 800266a:	3304      	adds	r3, #4
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	429a      	cmp	r2, r3
 8002672:	d30c      	bcc.n	800268e <TimeExpired+0x6a>
 8002674:	79fa      	ldrb	r2, [r7, #7]
 8002676:	491d      	ldr	r1, [pc, #116]	; (80026ec <TimeExpired+0xc8>)
 8002678:	4613      	mov	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4413      	add	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	440b      	add	r3, r1
 8002682:	3304      	adds	r3, #4
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	e00e      	b.n	80026ac <TimeExpired+0x88>
 800268e:	79fa      	ldrb	r2, [r7, #7]
 8002690:	4916      	ldr	r1, [pc, #88]	; (80026ec <TimeExpired+0xc8>)
 8002692:	4613      	mov	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	440b      	add	r3, r1
 800269c:	3304      	adds	r3, #4
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	79fa      	ldrb	r2, [r7, #7]
 80026ae:	490f      	ldr	r1, [pc, #60]	; (80026ec <TimeExpired+0xc8>)
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	440b      	add	r3, r1
 80026ba:	3308      	adds	r3, #8
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d202      	bcs.n	80026ca <TimeExpired+0xa6>
 80026c4:	b662      	cpsie	i
 80026c6:	2300      	movs	r3, #0
 80026c8:	e00b      	b.n	80026e2 <TimeExpired+0xbe>
 80026ca:	79fa      	ldrb	r2, [r7, #7]
 80026cc:	4907      	ldr	r1, [pc, #28]	; (80026ec <TimeExpired+0xc8>)
 80026ce:	4613      	mov	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	440b      	add	r3, r1
 80026d8:	3304      	adds	r3, #4
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	b662      	cpsie	i
 80026e0:	2301      	movs	r3, #1
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000bdc 	.word	0x20000bdc

080026f0 <SysTick_Handler>:
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <SysTick_Handler+0x18>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3301      	adds	r3, #1
 80026fa:	4a03      	ldr	r2, [pc, #12]	; (8002708 <SysTick_Handler+0x18>)
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	bf00      	nop
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	20000d5c 	.word	0x20000d5c

0800270c <LightSensor_Init>:
 800270c:	b580      	push	{r7, lr}
 800270e:	b09e      	sub	sp, #120	; 0x78
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
 8002716:	2101      	movs	r1, #1
 8002718:	f44f 7080 	mov.w	r0, #256	; 0x100
 800271c:	f7fe fa54 	bl	8000bc8 <RCC_APB2PeriphClockCmd>
 8002720:	2101      	movs	r1, #1
 8002722:	2004      	movs	r0, #4
 8002724:	f7fe fa30 	bl	8000b88 <RCC_AHB1PeriphClockCmd>
 8002728:	2101      	movs	r1, #1
 800272a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800272e:	f7fe fa2b 	bl	8000b88 <RCC_AHB1PeriphClockCmd>
 8002732:	2320      	movs	r3, #32
 8002734:	64bb      	str	r3, [r7, #72]	; 0x48
 8002736:	2303      	movs	r3, #3
 8002738:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 800273c:	2300      	movs	r3, #0
 800273e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002742:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002746:	4619      	mov	r1, r3
 8002748:	4843      	ldr	r0, [pc, #268]	; (8002858 <LightSensor_Init+0x14c>)
 800274a:	f7fe f8c7 	bl	80008dc <GPIO_Init>
 800274e:	f7fd fdf9 	bl	8000344 <ADC_DeInit>
 8002752:	2300      	movs	r3, #0
 8002754:	66bb      	str	r3, [r7, #104]	; 0x68
 8002756:	2300      	movs	r3, #0
 8002758:	66fb      	str	r3, [r7, #108]	; 0x6c
 800275a:	2300      	movs	r3, #0
 800275c:	673b      	str	r3, [r7, #112]	; 0x70
 800275e:	2300      	movs	r3, #0
 8002760:	677b      	str	r3, [r7, #116]	; 0x74
 8002762:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002766:	4618      	mov	r0, r3
 8002768:	f7fd fe50 	bl	800040c <ADC_CommonInit>
 800276c:	2300      	movs	r3, #0
 800276e:	653b      	str	r3, [r7, #80]	; 0x50
 8002770:	2300      	movs	r3, #0
 8002772:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8002776:	2301      	movs	r3, #1
 8002778:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 800277c:	2300      	movs	r3, #0
 800277e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002780:	2300      	movs	r3, #0
 8002782:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002784:	2300      	movs	r3, #0
 8002786:	663b      	str	r3, [r7, #96]	; 0x60
 8002788:	2301      	movs	r3, #1
 800278a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 800278e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002792:	4619      	mov	r1, r3
 8002794:	4831      	ldr	r0, [pc, #196]	; (800285c <LightSensor_Init+0x150>)
 8002796:	f7fd fde3 	bl	8000360 <ADC_Init>
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d110      	bne.n	80027c2 <LightSensor_Init+0xb6>
 80027a0:	2101      	movs	r1, #1
 80027a2:	482e      	ldr	r0, [pc, #184]	; (800285c <LightSensor_Init+0x150>)
 80027a4:	f7fd ff50 	bl	8000648 <ADC_EOCOnEachRegularChannelCmd>
 80027a8:	2100      	movs	r1, #0
 80027aa:	482c      	ldr	r0, [pc, #176]	; (800285c <LightSensor_Init+0x150>)
 80027ac:	f7fd ff68 	bl	8000680 <ADC_ContinuousModeCmd>
 80027b0:	2101      	movs	r1, #1
 80027b2:	482a      	ldr	r0, [pc, #168]	; (800285c <LightSensor_Init+0x150>)
 80027b4:	f7fd ff80 	bl	80006b8 <ADC_DiscModeChannelCountConfig>
 80027b8:	2101      	movs	r1, #1
 80027ba:	4828      	ldr	r0, [pc, #160]	; (800285c <LightSensor_Init+0x150>)
 80027bc:	f7fd ff9e 	bl	80006fc <ADC_DiscModeCmd>
 80027c0:	e036      	b.n	8002830 <LightSensor_Init+0x124>
 80027c2:	4827      	ldr	r0, [pc, #156]	; (8002860 <LightSensor_Init+0x154>)
 80027c4:	f001 fec0 	bl	8004548 <DMA_DeInit>
 80027c8:	2300      	movs	r3, #0
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	4b25      	ldr	r3, [pc, #148]	; (8002864 <LightSensor_Init+0x158>)
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	4b25      	ldr	r3, [pc, #148]	; (8002868 <LightSensor_Init+0x15c>)
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	2300      	movs	r3, #0
 80027d6:	61bb      	str	r3, [r7, #24]
 80027d8:	2301      	movs	r3, #1
 80027da:	61fb      	str	r3, [r7, #28]
 80027dc:	2300      	movs	r3, #0
 80027de:	623b      	str	r3, [r7, #32]
 80027e0:	2300      	movs	r3, #0
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
 80027e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027f4:	633b      	str	r3, [r7, #48]	; 0x30
 80027f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027fa:	637b      	str	r3, [r7, #52]	; 0x34
 80027fc:	2300      	movs	r3, #0
 80027fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002800:	2301      	movs	r3, #1
 8002802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002804:	2300      	movs	r3, #0
 8002806:	643b      	str	r3, [r7, #64]	; 0x40
 8002808:	2300      	movs	r3, #0
 800280a:	647b      	str	r3, [r7, #68]	; 0x44
 800280c:	f107 030c 	add.w	r3, r7, #12
 8002810:	4619      	mov	r1, r3
 8002812:	4813      	ldr	r0, [pc, #76]	; (8002860 <LightSensor_Init+0x154>)
 8002814:	f001 ff6c 	bl	80046f0 <DMA_Init>
 8002818:	2101      	movs	r1, #1
 800281a:	4811      	ldr	r0, [pc, #68]	; (8002860 <LightSensor_Init+0x154>)
 800281c:	f001 ffc0 	bl	80047a0 <DMA_Cmd>
 8002820:	2101      	movs	r1, #1
 8002822:	480e      	ldr	r0, [pc, #56]	; (800285c <LightSensor_Init+0x150>)
 8002824:	f7fd ffa2 	bl	800076c <ADC_DMARequestAfterLastTransferCmd>
 8002828:	2101      	movs	r1, #1
 800282a:	480c      	ldr	r0, [pc, #48]	; (800285c <LightSensor_Init+0x150>)
 800282c:	f7fd ff82 	bl	8000734 <ADC_DMACmd>
 8002830:	2301      	movs	r3, #1
 8002832:	2201      	movs	r2, #1
 8002834:	210f      	movs	r1, #15
 8002836:	4809      	ldr	r0, [pc, #36]	; (800285c <LightSensor_Init+0x150>)
 8002838:	f7fd fe2c 	bl	8000494 <ADC_RegularChannelConfig>
 800283c:	2101      	movs	r1, #1
 800283e:	4807      	ldr	r0, [pc, #28]	; (800285c <LightSensor_Init+0x150>)
 8002840:	f7fd fe0c 	bl	800045c <ADC_Cmd>
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d102      	bne.n	8002850 <LightSensor_Init+0x144>
 800284a:	4804      	ldr	r0, [pc, #16]	; (800285c <LightSensor_Init+0x150>)
 800284c:	f7fd feec 	bl	8000628 <ADC_SoftwareStartConv>
 8002850:	bf00      	nop
 8002852:	3778      	adds	r7, #120	; 0x78
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40020800 	.word	0x40020800
 800285c:	40012000 	.word	0x40012000
 8002860:	40026410 	.word	0x40026410
 8002864:	4001204c 	.word	0x4001204c
 8002868:	20000d60 	.word	0x20000d60

0800286c <LightSensor_MeasureUseDMAMode>:
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
 8002870:	4b03      	ldr	r3, [pc, #12]	; (8002880 <LightSensor_MeasureUseDMAMode+0x14>)
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	b29b      	uxth	r3, r3
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	20000d60 	.word	0x20000d60

08002884 <USART2_IRQHandler>:
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	b672      	cpsid	i
 800288c:	f240 5125 	movw	r1, #1317	; 0x525
 8002890:	480e      	ldr	r0, [pc, #56]	; (80028cc <USART2_IRQHandler+0x48>)
 8002892:	f7fe fa2b 	bl	8000cec <USART_GetITStatus>
 8002896:	4603      	mov	r3, r0
 8002898:	2b01      	cmp	r3, #1
 800289a:	d112      	bne.n	80028c2 <USART2_IRQHandler+0x3e>
 800289c:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <USART2_IRQHandler+0x4c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	607b      	str	r3, [r7, #4]
 80028a2:	480a      	ldr	r0, [pc, #40]	; (80028cc <USART2_IRQHandler+0x48>)
 80028a4:	f7fe fa12 	bl	8000ccc <USART_ReceiveData>
 80028a8:	4603      	mov	r3, r0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	70fb      	strb	r3, [r7, #3]
 80028ae:	1cfb      	adds	r3, r7, #3
 80028b0:	4619      	mov	r1, r3
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f001 fd9e 	bl	80043f4 <bufEnDat>
 80028b8:	f240 5125 	movw	r1, #1317	; 0x525
 80028bc:	4803      	ldr	r0, [pc, #12]	; (80028cc <USART2_IRQHandler+0x48>)
 80028be:	f7fe fa70 	bl	8000da2 <USART_ClearITPendingBit>
 80028c2:	b662      	cpsie	i
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40004400 	.word	0x40004400
 80028d0:	20000d64 	.word	0x20000d64

080028d4 <delayMicroseconds>:
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <ucg_gpio_init>:
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	2101      	movs	r1, #1
 80028f0:	2007      	movs	r0, #7
 80028f2:	f7fe f949 	bl	8000b88 <RCC_AHB1PeriphClockCmd>
 80028f6:	2301      	movs	r3, #1
 80028f8:	713b      	strb	r3, [r7, #4]
 80028fa:	2303      	movs	r3, #3
 80028fc:	717b      	strb	r3, [r7, #5]
 80028fe:	2300      	movs	r3, #0
 8002900:	71bb      	strb	r3, [r7, #6]
 8002902:	2300      	movs	r3, #0
 8002904:	71fb      	strb	r3, [r7, #7]
 8002906:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	463b      	mov	r3, r7
 800290e:	4619      	mov	r1, r3
 8002910:	480a      	ldr	r0, [pc, #40]	; (800293c <ucg_gpio_init+0x54>)
 8002912:	f7fd ffe3 	bl	80008dc <GPIO_Init>
 8002916:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	463b      	mov	r3, r7
 800291e:	4619      	mov	r1, r3
 8002920:	4807      	ldr	r0, [pc, #28]	; (8002940 <ucg_gpio_init+0x58>)
 8002922:	f7fd ffdb 	bl	80008dc <GPIO_Init>
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	603b      	str	r3, [r7, #0]
 800292a:	463b      	mov	r3, r7
 800292c:	4619      	mov	r1, r3
 800292e:	4805      	ldr	r0, [pc, #20]	; (8002944 <ucg_gpio_init+0x5c>)
 8002930:	f7fd ffd4 	bl	80008dc <GPIO_Init>
 8002934:	bf00      	nop
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40020000 	.word	0x40020000
 8002940:	40020400 	.word	0x40020400
 8002944:	40020800 	.word	0x40020800

08002948 <ucg_com_arduino_send_generic_SW_SPI>:
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	70fb      	strb	r3, [r7, #3]
 8002954:	2308      	movs	r3, #8
 8002956:	73fb      	strb	r3, [r7, #15]
 8002958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800295c:	2b00      	cmp	r3, #0
 800295e:	da05      	bge.n	800296c <ucg_com_arduino_send_generic_SW_SPI+0x24>
 8002960:	2201      	movs	r2, #1
 8002962:	2180      	movs	r1, #128	; 0x80
 8002964:	4814      	ldr	r0, [pc, #80]	; (80029b8 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8002966:	f7fe f848 	bl	80009fa <GPIO_WriteBit>
 800296a:	e004      	b.n	8002976 <ucg_com_arduino_send_generic_SW_SPI+0x2e>
 800296c:	2200      	movs	r2, #0
 800296e:	2180      	movs	r1, #128	; 0x80
 8002970:	4811      	ldr	r0, [pc, #68]	; (80029b8 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8002972:	f7fe f842 	bl	80009fa <GPIO_WriteBit>
 8002976:	2001      	movs	r0, #1
 8002978:	f7ff ffac 	bl	80028d4 <delayMicroseconds>
 800297c:	2201      	movs	r2, #1
 800297e:	2120      	movs	r1, #32
 8002980:	480d      	ldr	r0, [pc, #52]	; (80029b8 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8002982:	f7fe f83a 	bl	80009fa <GPIO_WriteBit>
 8002986:	2001      	movs	r0, #1
 8002988:	f7ff ffa4 	bl	80028d4 <delayMicroseconds>
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	3b01      	subs	r3, #1
 8002990:	73fb      	strb	r3, [r7, #15]
 8002992:	2200      	movs	r2, #0
 8002994:	2120      	movs	r1, #32
 8002996:	4808      	ldr	r0, [pc, #32]	; (80029b8 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8002998:	f7fe f82f 	bl	80009fa <GPIO_WriteBit>
 800299c:	2001      	movs	r0, #1
 800299e:	f7ff ff99 	bl	80028d4 <delayMicroseconds>
 80029a2:	78fb      	ldrb	r3, [r7, #3]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	70fb      	strb	r3, [r7, #3]
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1d4      	bne.n	8002958 <ucg_com_arduino_send_generic_SW_SPI+0x10>
 80029ae:	bf00      	nop
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40020000 	.word	0x40020000

080029bc <ucg_com_arduino_generic_SW_SPI>:
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	607b      	str	r3, [r7, #4]
 80029c6:	460b      	mov	r3, r1
 80029c8:	817b      	strh	r3, [r7, #10]
 80029ca:	4613      	mov	r3, r2
 80029cc:	813b      	strh	r3, [r7, #8]
 80029ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80029d2:	3b0a      	subs	r3, #10
 80029d4:	2b0b      	cmp	r3, #11
 80029d6:	f200 80dc 	bhi.w	8002b92 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 80029da:	a201      	add	r2, pc, #4	; (adr r2, 80029e0 <ucg_com_arduino_generic_SW_SPI+0x24>)
 80029dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e0:	08002a11 	.word	0x08002a11
 80029e4:	08002b93 	.word	0x08002b93
 80029e8:	08002a63 	.word	0x08002a63
 80029ec:	08002a6d 	.word	0x08002a6d
 80029f0:	08002a7d 	.word	0x08002a7d
 80029f4:	08002a8d 	.word	0x08002a8d
 80029f8:	08002a9f 	.word	0x08002a9f
 80029fc:	08002abf 	.word	0x08002abf
 8002a00:	08002ae7 	.word	0x08002ae7
 8002a04:	08002b1d 	.word	0x08002b1d
 8002a08:	08002b3b 	.word	0x08002b3b
 8002a0c:	08002b8b 	.word	0x08002b8b
 8002a10:	f7ff ff6a 	bl	80028e8 <ucg_gpio_init>
 8002a14:	2201      	movs	r2, #1
 8002a16:	2180      	movs	r1, #128	; 0x80
 8002a18:	4860      	ldr	r0, [pc, #384]	; (8002b9c <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002a1a:	f7fd ffee 	bl	80009fa <GPIO_WriteBit>
 8002a1e:	2201      	movs	r2, #1
 8002a20:	2140      	movs	r1, #64	; 0x40
 8002a22:	485f      	ldr	r0, [pc, #380]	; (8002ba0 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8002a24:	f7fd ffe9 	bl	80009fa <GPIO_WriteBit>
 8002a28:	2201      	movs	r2, #1
 8002a2a:	2180      	movs	r1, #128	; 0x80
 8002a2c:	485d      	ldr	r0, [pc, #372]	; (8002ba4 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 8002a2e:	f7fd ffe4 	bl	80009fa <GPIO_WriteBit>
 8002a32:	2201      	movs	r2, #1
 8002a34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a38:	4858      	ldr	r0, [pc, #352]	; (8002b9c <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002a3a:	f7fd ffde 	bl	80009fa <GPIO_WriteBit>
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2120      	movs	r1, #32
 8002a42:	4856      	ldr	r0, [pc, #344]	; (8002b9c <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002a44:	f7fd ffd9 	bl	80009fa <GPIO_WriteBit>
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a4e:	4854      	ldr	r0, [pc, #336]	; (8002ba0 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8002a50:	f7fd ffd3 	bl	80009fa <GPIO_WriteBit>
 8002a54:	2201      	movs	r2, #1
 8002a56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a5a:	4850      	ldr	r0, [pc, #320]	; (8002b9c <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002a5c:	f7fd ffcd 	bl	80009fa <GPIO_WriteBit>
 8002a60:	e097      	b.n	8002b92 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002a62:	893b      	ldrh	r3, [r7, #8]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff35 	bl	80028d4 <delayMicroseconds>
 8002a6a:	e092      	b.n	8002b92 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002a6c:	893b      	ldrh	r3, [r7, #8]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	461a      	mov	r2, r3
 8002a72:	2180      	movs	r1, #128	; 0x80
 8002a74:	484b      	ldr	r0, [pc, #300]	; (8002ba4 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 8002a76:	f7fd ffc0 	bl	80009fa <GPIO_WriteBit>
 8002a7a:	e08a      	b.n	8002b92 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002a7c:	893b      	ldrh	r3, [r7, #8]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	2140      	movs	r1, #64	; 0x40
 8002a84:	4846      	ldr	r0, [pc, #280]	; (8002ba0 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8002a86:	f7fd ffb8 	bl	80009fa <GPIO_WriteBit>
 8002a8a:	e082      	b.n	8002b92 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002a8c:	893b      	ldrh	r3, [r7, #8]
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a96:	4841      	ldr	r0, [pc, #260]	; (8002b9c <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002a98:	f7fd ffaf 	bl	80009fa <GPIO_WriteBit>
 8002a9c:	e079      	b.n	8002b92 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002a9e:	893b      	ldrh	r3, [r7, #8]
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f7ff ff4f 	bl	8002948 <ucg_com_arduino_send_generic_SW_SPI>
 8002aaa:	e072      	b.n	8002b92 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f7ff ff48 	bl	8002948 <ucg_com_arduino_send_generic_SW_SPI>
 8002ab8:	893b      	ldrh	r3, [r7, #8]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	813b      	strh	r3, [r7, #8]
 8002abe:	893b      	ldrh	r3, [r7, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1f3      	bne.n	8002aac <ucg_com_arduino_generic_SW_SPI+0xf0>
 8002ac4:	e065      	b.n	8002b92 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	4619      	mov	r1, r3
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f7ff ff3b 	bl	8002948 <ucg_com_arduino_send_generic_SW_SPI>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f7ff ff34 	bl	8002948 <ucg_com_arduino_send_generic_SW_SPI>
 8002ae0:	893b      	ldrh	r3, [r7, #8]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	813b      	strh	r3, [r7, #8]
 8002ae6:	893b      	ldrh	r3, [r7, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1ec      	bne.n	8002ac6 <ucg_com_arduino_generic_SW_SPI+0x10a>
 8002aec:	e051      	b.n	8002b92 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	4619      	mov	r1, r3
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f7ff ff27 	bl	8002948 <ucg_com_arduino_send_generic_SW_SPI>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3301      	adds	r3, #1
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4619      	mov	r1, r3
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f7ff ff20 	bl	8002948 <ucg_com_arduino_send_generic_SW_SPI>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3302      	adds	r3, #2
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f7ff ff19 	bl	8002948 <ucg_com_arduino_send_generic_SW_SPI>
 8002b16:	893b      	ldrh	r3, [r7, #8]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	813b      	strh	r3, [r7, #8]
 8002b1c:	893b      	ldrh	r3, [r7, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1e5      	bne.n	8002aee <ucg_com_arduino_generic_SW_SPI+0x132>
 8002b22:	e036      	b.n	8002b92 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f7ff ff0a 	bl	8002948 <ucg_com_arduino_send_generic_SW_SPI>
 8002b34:	893b      	ldrh	r3, [r7, #8]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	813b      	strh	r3, [r7, #8]
 8002b3a:	893b      	ldrh	r3, [r7, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f1      	bne.n	8002b24 <ucg_com_arduino_generic_SW_SPI+0x168>
 8002b40:	e027      	b.n	8002b92 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d010      	beq.n	8002b6c <ucg_com_arduino_generic_SW_SPI+0x1b0>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d106      	bne.n	8002b60 <ucg_com_arduino_generic_SW_SPI+0x1a4>
 8002b52:	2200      	movs	r2, #0
 8002b54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b58:	4810      	ldr	r0, [pc, #64]	; (8002b9c <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002b5a:	f7fd ff4e 	bl	80009fa <GPIO_WriteBit>
 8002b5e:	e005      	b.n	8002b6c <ucg_com_arduino_generic_SW_SPI+0x1b0>
 8002b60:	2201      	movs	r2, #1
 8002b62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b66:	480d      	ldr	r0, [pc, #52]	; (8002b9c <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002b68:	f7fd ff47 	bl	80009fa <GPIO_WriteBit>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	607b      	str	r3, [r7, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	4619      	mov	r1, r3
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f7ff fee5 	bl	8002948 <ucg_com_arduino_send_generic_SW_SPI>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3301      	adds	r3, #1
 8002b82:	607b      	str	r3, [r7, #4]
 8002b84:	893b      	ldrh	r3, [r7, #8]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	813b      	strh	r3, [r7, #8]
 8002b8a:	893b      	ldrh	r3, [r7, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1d8      	bne.n	8002b42 <ucg_com_arduino_generic_SW_SPI+0x186>
 8002b90:	bf00      	nop
 8002b92:	2301      	movs	r3, #1
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40020000 	.word	0x40020000
 8002ba0:	40020400 	.word	0x40020400
 8002ba4:	40020800 	.word	0x40020800

08002ba8 <Ucglib4WireSWSPI_begin>:
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	70fb      	strb	r3, [r7, #3]
 8002bb4:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <Ucglib4WireSWSPI_begin+0x2c>)
 8002bb6:	4a08      	ldr	r2, [pc, #32]	; (8002bd8 <Ucglib4WireSWSPI_begin+0x30>)
 8002bb8:	4908      	ldr	r1, [pc, #32]	; (8002bdc <Ucglib4WireSWSPI_begin+0x34>)
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f001 f9f0 	bl	8003fa0 <ucg_Init>
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 ffd4 	bl	8003b72 <ucg_SetFontMode>
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	080029bd 	.word	0x080029bd
 8002bd8:	080032b1 	.word	0x080032b1
 8002bdc:	080033d9 	.word	0x080033d9

08002be0 <ucg_DrawBox>:
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	4608      	mov	r0, r1
 8002bea:	4611      	mov	r1, r2
 8002bec:	461a      	mov	r2, r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	817b      	strh	r3, [r7, #10]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	813b      	strh	r3, [r7, #8]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	80fb      	strh	r3, [r7, #6]
 8002bfa:	e014      	b.n	8002c26 <ucg_DrawBox+0x46>
 8002bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c00:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002c04:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f001 fa3b 	bl	8004084 <ucg_DrawHLine>
 8002c0e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	833b      	strh	r3, [r7, #24]
 8002c1a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	813b      	strh	r3, [r7, #8]
 8002c26:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	dce6      	bgt.n	8002bfc <ucg_DrawBox+0x1c>
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <ucg_ClearScreen>:
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af02      	add	r7, sp, #8
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	2300      	movs	r3, #0
 8002c44:	2200      	movs	r2, #0
 8002c46:	2100      	movs	r1, #0
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f001 fa59 	bl	8004100 <ucg_SetColor>
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fb89 	bl	8003366 <ucg_SetMaxClipRange>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	4613      	mov	r3, r2
 8002c64:	2200      	movs	r2, #0
 8002c66:	2100      	movs	r1, #0
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff ffb9 	bl	8002be0 <ucg_DrawBox>
 8002c6e:	23ff      	movs	r3, #255	; 0xff
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	23ff      	movs	r3, #255	; 0xff
 8002c74:	22ff      	movs	r2, #255	; 0xff
 8002c76:	2100      	movs	r1, #0
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f001 fa41 	bl	8004100 <ucg_SetColor>
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <ucg_DrawFrame>:
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b086      	sub	sp, #24
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	4608      	mov	r0, r1
 8002c90:	4611      	mov	r1, r2
 8002c92:	461a      	mov	r2, r3
 8002c94:	4603      	mov	r3, r0
 8002c96:	817b      	strh	r3, [r7, #10]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	813b      	strh	r3, [r7, #8]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	80fb      	strh	r3, [r7, #6]
 8002ca0:	897b      	ldrh	r3, [r7, #10]
 8002ca2:	82fb      	strh	r3, [r7, #22]
 8002ca4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ca8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002cac:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f001 f9e7 	bl	8004084 <ucg_DrawHLine>
 8002cb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002cba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002cbe:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f001 f9fd 	bl	80040c2 <ucg_DrawVLine>
 8002cc8:	897a      	ldrh	r2, [r7, #10]
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	4413      	add	r3, r2
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	817b      	strh	r3, [r7, #10]
 8002cd2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	817b      	strh	r3, [r7, #10]
 8002cde:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002ce2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002ce6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f001 f9e9 	bl	80040c2 <ucg_DrawVLine>
 8002cf0:	893a      	ldrh	r2, [r7, #8]
 8002cf2:	8c3b      	ldrh	r3, [r7, #32]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	813b      	strh	r3, [r7, #8]
 8002cfa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	813b      	strh	r3, [r7, #8]
 8002d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d0a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d0e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f001 f9b6 	bl	8004084 <ucg_DrawHLine>
 8002d18:	bf00      	nop
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <ucg_ccs_init>:
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	4608      	mov	r0, r1
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4603      	mov	r3, r0
 8002d30:	70fb      	strb	r3, [r7, #3]
 8002d32:	460b      	mov	r3, r1
 8002d34:	70bb      	strb	r3, [r7, #2]
 8002d36:	4613      	mov	r3, r2
 8002d38:	803b      	strh	r3, [r7, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	78fa      	ldrb	r2, [r7, #3]
 8002d3e:	705a      	strb	r2, [r3, #1]
 8002d40:	78bb      	ldrb	r3, [r7, #2]
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	b21a      	sxth	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	809a      	strh	r2, [r3, #4]
 8002d52:	883b      	ldrh	r3, [r7, #0]
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	b21a      	sxth	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	811a      	strh	r2, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	805a      	strh	r2, [r3, #2]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d72:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d76:	b21a      	sxth	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	80da      	strh	r2, [r3, #6]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	da0c      	bge.n	8002da0 <ucg_ccs_init+0x80>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	425b      	negs	r3, r3
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	b21a      	sxth	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	809a      	strh	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d9e:	805a      	strh	r2, [r3, #2]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002dac:	fb93 f1f2 	sdiv	r1, r3, r2
 8002db0:	fb02 f201 	mul.w	r2, r2, r1
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	b21a      	sxth	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	815a      	strh	r2, [r3, #10]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002dc2:	0fda      	lsrs	r2, r3, #31
 8002dc4:	4413      	add	r3, r2
 8002dc6:	105b      	asrs	r3, r3, #1
 8002dc8:	b21a      	sxth	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	819a      	strh	r2, [r3, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	701a      	strb	r2, [r3, #0]
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <ucg_ccs_step>:
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	781a      	ldrb	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	4413      	add	r3, r2
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	701a      	strb	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	b21a      	sxth	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	819a      	strh	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	db16      	blt.n	8002e54 <ucg_ccs_step+0x74>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	781a      	ldrb	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	701a      	strb	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	b21a      	sxth	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	819a      	strh	r2, [r3, #12]
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <ucg_ccs_seek>:
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	807b      	strh	r3, [r7, #2]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	781a      	ldrb	r2, [r3, #0]
 8002e7c:	887b      	ldrh	r3, [r7, #2]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	fb12 f303 	smulbb	r3, r2, r3
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	701a      	strb	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	887b      	ldrh	r3, [r7, #2]
 8002e94:	fb12 f303 	smulbb	r3, r2, r3
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002ea0:	0fd9      	lsrs	r1, r3, #31
 8002ea2:	440b      	add	r3, r1
 8002ea4:	105b      	asrs	r3, r3, #1
 8002ea6:	b21b      	sxth	r3, r3
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	81fb      	strh	r3, [r7, #14]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	db0e      	blt.n	8002ed8 <ucg_ccs_seek+0x78>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8002ec8:	fb93 f3f1 	sdiv	r3, r3, r1
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	701a      	strb	r2, [r3, #0]
 8002ed6:	e00d      	b.n	8002ef4 <ucg_ccs_seek+0x94>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	781a      	ldrb	r2, [r3, #0]
 8002edc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8002ee6:	fb93 f3f1 	sdiv	r3, r3, r1
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002efe:	fb93 f1f2 	sdiv	r1, r3, r2
 8002f02:	fb02 f201 	mul.w	r2, r2, r1
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	b21a      	sxth	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	819a      	strh	r2, [r3, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	781a      	ldrb	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	785b      	ldrb	r3, [r3, #1]
 8002f16:	4413      	add	r3, r2
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	701a      	strb	r2, [r3, #0]
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <ucg_dev_default_cb>:
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	460b      	mov	r3, r1
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	817b      	strh	r3, [r7, #10]
 8002f38:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f3c:	2b0c      	cmp	r3, #12
 8002f3e:	d00a      	beq.n	8002f56 <ucg_dev_default_cb+0x2c>
 8002f40:	2b17      	cmp	r3, #23
 8002f42:	d10f      	bne.n	8002f64 <ucg_dev_default_cb+0x3a>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	4798      	blx	r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	e007      	b.n	8002f66 <ucg_dev_default_cb+0x3c>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	3370      	adds	r3, #112	; 0x70
 8002f5c:	6810      	ldr	r0, [r2, #0]
 8002f5e:	6851      	ldr	r1, [r2, #4]
 8002f60:	c303      	stmia	r3!, {r0, r1}
 8002f62:	bf00      	nop
 8002f64:	2301      	movs	r3, #1
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <ucg_ext_none>:
 8002f6e:	b480      	push	{r7}
 8002f70:	b085      	sub	sp, #20
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	460b      	mov	r3, r1
 8002f78:	607a      	str	r2, [r7, #4]
 8002f7a:	817b      	strh	r3, [r7, #10]
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <ucg_handle_st7735_l90fx>:
 8002f8c:	b590      	push	{r4, r7, lr}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f001 fcbd 	bl	8004914 <ucg_clip_l90fx>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d053      	beq.n	8003048 <ucg_handle_st7735_l90fx+0xbc>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d008      	beq.n	8002fbc <ucg_handle_st7735_l90fx+0x30>
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d00b      	beq.n	8002fc6 <ucg_handle_st7735_l90fx+0x3a>
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d11b      	bne.n	8002fea <ucg_handle_st7735_l90fx+0x5e>
 8002fb2:	4928      	ldr	r1, [pc, #160]	; (8003054 <ucg_handle_st7735_l90fx+0xc8>)
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f001 ffdb 	bl	8004f70 <ucg_com_SendCmdSeq>
 8002fba:	e028      	b.n	800300e <ucg_handle_st7735_l90fx+0x82>
 8002fbc:	4926      	ldr	r1, [pc, #152]	; (8003058 <ucg_handle_st7735_l90fx+0xcc>)
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f001 ffd6 	bl	8004f70 <ucg_com_SendCmdSeq>
 8002fc4:	e023      	b.n	800300e <ucg_handle_st7735_l90fx+0x82>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002fca:	81fb      	strh	r3, [r7, #14]
 8002fcc:	89fb      	ldrh	r3, [r7, #14]
 8002fce:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	b21a      	sxth	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	849a      	strh	r2, [r3, #36]	; 0x24
 8002fda:	4920      	ldr	r1, [pc, #128]	; (800305c <ucg_handle_st7735_l90fx+0xd0>)
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f001 ffc7 	bl	8004f70 <ucg_com_SendCmdSeq>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	89fa      	ldrh	r2, [r7, #14]
 8002fe6:	849a      	strh	r2, [r3, #36]	; 0x24
 8002fe8:	e011      	b.n	800300e <ucg_handle_st7735_l90fx+0x82>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fee:	81fb      	strh	r3, [r7, #14]
 8002ff0:	89fb      	ldrh	r3, [r7, #14]
 8002ff2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	b21a      	sxth	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	84da      	strh	r2, [r3, #38]	; 0x26
 8002ffe:	4918      	ldr	r1, [pc, #96]	; (8003060 <ucg_handle_st7735_l90fx+0xd4>)
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f001 ffb5 	bl	8004f70 <ucg_com_SendCmdSeq>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	89fa      	ldrh	r2, [r7, #14]
 800300a:	84da      	strh	r2, [r3, #38]	; 0x26
 800300c:	bf00      	nop
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003014:	723b      	strb	r3, [r7, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800301c:	727b      	strb	r3, [r7, #9]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003024:	72bb      	strb	r3, [r7, #10]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69dc      	ldr	r4, [r3, #28]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003030:	b29a      	uxth	r2, r3
 8003032:	f107 0308 	add.w	r3, r7, #8
 8003036:	2113      	movs	r1, #19
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	47a0      	blx	r4
 800303c:	2101      	movs	r1, #1
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f001 fee2 	bl	8004e08 <ucg_com_SetCSLineStatus>
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <ucg_handle_st7735_l90fx+0xbe>
 8003048:	2300      	movs	r3, #0
 800304a:	4618      	mov	r0, r3
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	bd90      	pop	{r4, r7, pc}
 8003052:	bf00      	nop
 8003054:	08005bac 	.word	0x08005bac
 8003058:	08005bcc 	.word	0x08005bcc
 800305c:	08005bf0 	.word	0x08005bf0
 8003060:	08005c14 	.word	0x08005c14

08003064 <ucg_handle_st7735_l90se>:
 8003064:	b590      	push	{r4, r7, lr}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	2300      	movs	r3, #0
 800306e:	75fb      	strb	r3, [r7, #23]
 8003070:	e01a      	b.n	80030a8 <ucg_handle_st7735_l90se+0x44>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8003078:	7dfa      	ldrb	r2, [r7, #23]
 800307a:	4613      	mov	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	18c8      	adds	r0, r1, r3
 8003084:	7dfb      	ldrb	r3, [r7, #23]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	4413      	add	r3, r2
 800308a:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 800308e:	7dfb      	ldrb	r3, [r7, #23]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4413      	add	r3, r2
 8003094:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800309e:	f7ff fe3f 	bl	8002d20 <ucg_ccs_init>
 80030a2:	7dfb      	ldrb	r3, [r7, #23]
 80030a4:	3301      	adds	r3, #1
 80030a6:	75fb      	strb	r3, [r7, #23]
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d9e1      	bls.n	8003072 <ucg_handle_st7735_l90se+0xe>
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f001 fdb0 	bl	8004c14 <ucg_clip_l90se>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d071      	beq.n	800319e <ucg_handle_st7735_l90se+0x13a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d008      	beq.n	80030d6 <ucg_handle_st7735_l90se+0x72>
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d00b      	beq.n	80030e0 <ucg_handle_st7735_l90se+0x7c>
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d11b      	bne.n	8003104 <ucg_handle_st7735_l90se+0xa0>
 80030cc:	4936      	ldr	r1, [pc, #216]	; (80031a8 <ucg_handle_st7735_l90se+0x144>)
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f001 ff4e 	bl	8004f70 <ucg_com_SendCmdSeq>
 80030d4:	e028      	b.n	8003128 <ucg_handle_st7735_l90se+0xc4>
 80030d6:	4935      	ldr	r1, [pc, #212]	; (80031ac <ucg_handle_st7735_l90se+0x148>)
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f001 ff49 	bl	8004f70 <ucg_com_SendCmdSeq>
 80030de:	e023      	b.n	8003128 <ucg_handle_st7735_l90se+0xc4>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80030e4:	827b      	strh	r3, [r7, #18]
 80030e6:	8a7b      	ldrh	r3, [r7, #18]
 80030e8:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	b21a      	sxth	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	849a      	strh	r2, [r3, #36]	; 0x24
 80030f4:	492e      	ldr	r1, [pc, #184]	; (80031b0 <ucg_handle_st7735_l90se+0x14c>)
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f001 ff3a 	bl	8004f70 <ucg_com_SendCmdSeq>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	8a7a      	ldrh	r2, [r7, #18]
 8003100:	849a      	strh	r2, [r3, #36]	; 0x24
 8003102:	e011      	b.n	8003128 <ucg_handle_st7735_l90se+0xc4>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003108:	827b      	strh	r3, [r7, #18]
 800310a:	8a7b      	ldrh	r3, [r7, #18]
 800310c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8003110:	b29b      	uxth	r3, r3
 8003112:	b21a      	sxth	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	84da      	strh	r2, [r3, #38]	; 0x26
 8003118:	4926      	ldr	r1, [pc, #152]	; (80031b4 <ucg_handle_st7735_l90se+0x150>)
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f001 ff28 	bl	8004f70 <ucg_com_SendCmdSeq>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	8a7a      	ldrh	r2, [r7, #18]
 8003124:	84da      	strh	r2, [r3, #38]	; 0x26
 8003126:	bf00      	nop
 8003128:	2300      	movs	r3, #0
 800312a:	82bb      	strh	r3, [r7, #20]
 800312c:	e02a      	b.n	8003184 <ucg_handle_st7735_l90se+0x120>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003134:	733b      	strb	r3, [r7, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800313c:	737b      	strb	r3, [r7, #13]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003144:	73bb      	strb	r3, [r7, #14]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69dc      	ldr	r4, [r3, #28]
 800314a:	f107 030c 	add.w	r3, r7, #12
 800314e:	2201      	movs	r2, #1
 8003150:	2113      	movs	r1, #19
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	47a0      	blx	r4
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3346      	adds	r3, #70	; 0x46
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fe40 	bl	8002de0 <ucg_ccs_step>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3346      	adds	r3, #70	; 0x46
 8003164:	330e      	adds	r3, #14
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff fe3a 	bl	8002de0 <ucg_ccs_step>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3346      	adds	r3, #70	; 0x46
 8003170:	331c      	adds	r3, #28
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fe34 	bl	8002de0 <ucg_ccs_step>
 8003178:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800317c:	b29b      	uxth	r3, r3
 800317e:	3301      	adds	r3, #1
 8003180:	b29b      	uxth	r3, r3
 8003182:	82bb      	strh	r3, [r7, #20]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800318a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800318e:	429a      	cmp	r2, r3
 8003190:	dbcd      	blt.n	800312e <ucg_handle_st7735_l90se+0xca>
 8003192:	2101      	movs	r1, #1
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f001 fe37 	bl	8004e08 <ucg_com_SetCSLineStatus>
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <ucg_handle_st7735_l90se+0x13c>
 800319e:	2300      	movs	r3, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	371c      	adds	r7, #28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd90      	pop	{r4, r7, pc}
 80031a8:	08005bac 	.word	0x08005bac
 80031ac:	08005bcc 	.word	0x08005bcc
 80031b0:	08005bf0 	.word	0x08005bf0
 80031b4:	08005c14 	.word	0x08005c14

080031b8 <ucg_dev_ic_st7735_18>:
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	460b      	mov	r3, r1
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	817b      	strh	r3, [r7, #10]
 80031c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80031ca:	3b0a      	subs	r3, #10
 80031cc:	2b0b      	cmp	r3, #11
 80031ce:	d85f      	bhi.n	8003290 <ucg_dev_ic_st7735_18+0xd8>
 80031d0:	a201      	add	r2, pc, #4	; (adr r2, 80031d8 <ucg_dev_ic_st7735_18+0x20>)
 80031d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d6:	bf00      	nop
 80031d8:	08003209 	.word	0x08003209
 80031dc:	08003223 	.word	0x08003223
 80031e0:	08003291 	.word	0x08003291
 80031e4:	08003291 	.word	0x08003291
 80031e8:	08003291 	.word	0x08003291
 80031ec:	0800322f 	.word	0x0800322f
 80031f0:	08003291 	.word	0x08003291
 80031f4:	08003291 	.word	0x08003291
 80031f8:	08003291 	.word	0x08003291
 80031fc:	08003291 	.word	0x08003291
 8003200:	0800323f 	.word	0x0800323f
 8003204:	08003287 	.word	0x08003287
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2202      	movs	r2, #2
 800320c:	841a      	strh	r2, [r3, #32]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	845a      	strh	r2, [r3, #34]	; 0x22
 8003214:	2242      	movs	r2, #66	; 0x42
 8003216:	2164      	movs	r1, #100	; 0x64
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f001 fd44 	bl	8004ca6 <ucg_com_PowerUp>
 800321e:	4603      	mov	r3, r0
 8003220:	e03e      	b.n	80032a0 <ucg_dev_ic_st7735_18+0xe8>
 8003222:	4921      	ldr	r1, [pc, #132]	; (80032a8 <ucg_dev_ic_st7735_18+0xf0>)
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f001 fea3 	bl	8004f70 <ucg_com_SendCmdSeq>
 800322a:	2301      	movs	r3, #1
 800322c:	e038      	b.n	80032a0 <ucg_dev_ic_st7735_18+0xe8>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2280      	movs	r2, #128	; 0x80
 8003232:	801a      	strh	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2280      	movs	r2, #128	; 0x80
 8003238:	805a      	strh	r2, [r3, #2]
 800323a:	2301      	movs	r3, #1
 800323c:	e030      	b.n	80032a0 <ucg_dev_ic_st7735_18+0xe8>
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f001 fb4e 	bl	80048e0 <ucg_clip_is_pixel_visible>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d01b      	beq.n	8003282 <ucg_dev_ic_st7735_18+0xca>
 800324a:	4918      	ldr	r1, [pc, #96]	; (80032ac <ucg_dev_ic_st7735_18+0xf4>)
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f001 fe8f 	bl	8004f70 <ucg_com_SendCmdSeq>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003258:	753b      	strb	r3, [r7, #20]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003260:	757b      	strb	r3, [r7, #21]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003268:	75bb      	strb	r3, [r7, #22]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	69dc      	ldr	r4, [r3, #28]
 800326e:	f107 0314 	add.w	r3, r7, #20
 8003272:	2201      	movs	r2, #1
 8003274:	2113      	movs	r1, #19
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	47a0      	blx	r4
 800327a:	2101      	movs	r1, #1
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f001 fdc3 	bl	8004e08 <ucg_com_SetCSLineStatus>
 8003282:	2301      	movs	r3, #1
 8003284:	e00c      	b.n	80032a0 <ucg_dev_ic_st7735_18+0xe8>
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f7ff fe80 	bl	8002f8c <ucg_handle_st7735_l90fx>
 800328c:	2301      	movs	r3, #1
 800328e:	e007      	b.n	80032a0 <ucg_dev_ic_st7735_18+0xe8>
 8003290:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	4619      	mov	r1, r3
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f7ff fe46 	bl	8002f2a <ucg_dev_default_cb>
 800329e:	4603      	mov	r3, r0
 80032a0:	4618      	mov	r0, r3
 80032a2:	371c      	adds	r7, #28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd90      	pop	{r4, r7, pc}
 80032a8:	08005c38 	.word	0x08005c38
 80032ac:	08005b8c 	.word	0x08005b8c

080032b0 <ucg_ext_st7735_18>:
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	460b      	mov	r3, r1
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	817b      	strh	r3, [r7, #10]
 80032be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80032c2:	2b17      	cmp	r3, #23
 80032c4:	d103      	bne.n	80032ce <ucg_ext_st7735_18+0x1e>
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f7ff fecc 	bl	8003064 <ucg_handle_st7735_l90se>
 80032cc:	bf00      	nop
 80032ce:	2301      	movs	r3, #1
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <ucg_PowerDown>:
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <ucg_PowerDown+0x2c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2200      	movs	r2, #0
 80032f4:	210b      	movs	r1, #11
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	4798      	blx	r3
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	7813      	ldrb	r3, [r2, #0]
 80032fe:	f36f 0300 	bfc	r3, #0, #1
 8003302:	7013      	strb	r3, [r2, #0]
 8003304:	bf00      	nop
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <ucg_PowerUp>:
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff ffdf 	bl	80032d8 <ucg_PowerDown>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2200      	movs	r2, #0
 8003320:	210a      	movs	r1, #10
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	4798      	blx	r3
 8003326:	4603      	mov	r3, r0
 8003328:	81fb      	strh	r3, [r7, #14]
 800332a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d004      	beq.n	800333c <ucg_PowerUp+0x30>
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	7813      	ldrb	r3, [r2, #0]
 8003336:	f043 0301 	orr.w	r3, r3, #1
 800333a:	7013      	strb	r3, [r2, #0]
 800333c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <ucg_SetClipBox>:
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	210c      	movs	r1, #12
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	4798      	blx	r3
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <ucg_SetMaxClipRange>:
 8003366:	b580      	push	{r7, lr}
 8003368:	b084      	sub	sp, #16
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	f107 030c 	add.w	r3, r7, #12
 8003374:	3202      	adds	r2, #2
 8003376:	6810      	ldr	r0, [r2, #0]
 8003378:	6018      	str	r0, [r3, #0]
 800337a:	2300      	movs	r3, #0
 800337c:	813b      	strh	r3, [r7, #8]
 800337e:	2300      	movs	r3, #0
 8003380:	817b      	strh	r3, [r7, #10]
 8003382:	f107 0308 	add.w	r3, r7, #8
 8003386:	4619      	mov	r1, r3
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff ffdd 	bl	8003348 <ucg_SetClipBox>
 800338e:	bf00      	nop
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <ucg_GetDimension>:
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	3202      	adds	r2, #2
 80033a6:	210f      	movs	r1, #15
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4798      	blx	r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ffda 	bl	8003366 <ucg_SetMaxClipRange>
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <ucg_DrawL90FXWithArg>:
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	3224      	adds	r2, #36	; 0x24
 80033ca:	2115      	movs	r1, #21
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	4798      	blx	r3
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <ucg_dev_st7735_18x128x128>:
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	460b      	mov	r3, r1
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	817b      	strh	r3, [r7, #10]
 80033e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80033ea:	2b0b      	cmp	r3, #11
 80033ec:	d015      	beq.n	800341a <ucg_dev_st7735_18x128x128+0x42>
 80033ee:	2b0f      	cmp	r3, #15
 80033f0:	d01c      	beq.n	800342c <ucg_dev_st7735_18x128x128+0x54>
 80033f2:	2b0a      	cmp	r3, #10
 80033f4:	d122      	bne.n	800343c <ucg_dev_st7735_18x128x128+0x64>
 80033f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4619      	mov	r1, r3
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7ff feda 	bl	80031b8 <ucg_dev_ic_st7735_18>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <ucg_dev_st7735_18x128x128+0x36>
 800340a:	2300      	movs	r3, #0
 800340c:	e01e      	b.n	800344c <ucg_dev_st7735_18x128x128+0x74>
 800340e:	4911      	ldr	r1, [pc, #68]	; (8003454 <ucg_dev_st7735_18x128x128+0x7c>)
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f001 fdad 	bl	8004f70 <ucg_com_SendCmdSeq>
 8003416:	2301      	movs	r3, #1
 8003418:	e018      	b.n	800344c <ucg_dev_st7735_18x128x128+0x74>
 800341a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	4619      	mov	r1, r3
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f7ff fec8 	bl	80031b8 <ucg_dev_ic_st7735_18>
 8003428:	4603      	mov	r3, r0
 800342a:	e00f      	b.n	800344c <ucg_dev_st7735_18x128x128+0x74>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2280      	movs	r2, #128	; 0x80
 8003430:	801a      	strh	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2280      	movs	r2, #128	; 0x80
 8003436:	805a      	strh	r2, [r3, #2]
 8003438:	2301      	movs	r3, #1
 800343a:	e007      	b.n	800344c <ucg_dev_st7735_18x128x128+0x74>
 800343c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	4619      	mov	r1, r3
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f7ff feb7 	bl	80031b8 <ucg_dev_ic_st7735_18>
 800344a:	4603      	mov	r3, r0
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	08005c40 	.word	0x08005c40

08003458 <ucg_font_get_byte>:
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	70fb      	strb	r3, [r7, #3]
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	607b      	str	r3, [r7, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <ucg_font_get_word>:
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	70fb      	strb	r3, [r7, #3]
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	607b      	str	r3, [r7, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	81fb      	strh	r3, [r7, #14]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3301      	adds	r3, #1
 800349a:	607b      	str	r3, [r7, #4]
 800349c:	89fb      	ldrh	r3, [r7, #14]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	81fb      	strh	r3, [r7, #14]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	89fb      	ldrh	r3, [r7, #14]
 80034aa:	4413      	add	r3, r2
 80034ac:	81fb      	strh	r3, [r7, #14]
 80034ae:	89fb      	ldrh	r3, [r7, #14]
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <ucg_read_font_info>:
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
 80034c6:	2100      	movs	r1, #0
 80034c8:	6838      	ldr	r0, [r7, #0]
 80034ca:	f7ff ffc5 	bl	8003458 <ucg_font_get_byte>
 80034ce:	4603      	mov	r3, r0
 80034d0:	461a      	mov	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	701a      	strb	r2, [r3, #0]
 80034d6:	2101      	movs	r1, #1
 80034d8:	6838      	ldr	r0, [r7, #0]
 80034da:	f7ff ffbd 	bl	8003458 <ucg_font_get_byte>
 80034de:	4603      	mov	r3, r0
 80034e0:	461a      	mov	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	705a      	strb	r2, [r3, #1]
 80034e6:	2102      	movs	r1, #2
 80034e8:	6838      	ldr	r0, [r7, #0]
 80034ea:	f7ff ffb5 	bl	8003458 <ucg_font_get_byte>
 80034ee:	4603      	mov	r3, r0
 80034f0:	461a      	mov	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	709a      	strb	r2, [r3, #2]
 80034f6:	2103      	movs	r1, #3
 80034f8:	6838      	ldr	r0, [r7, #0]
 80034fa:	f7ff ffad 	bl	8003458 <ucg_font_get_byte>
 80034fe:	4603      	mov	r3, r0
 8003500:	461a      	mov	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	70da      	strb	r2, [r3, #3]
 8003506:	2104      	movs	r1, #4
 8003508:	6838      	ldr	r0, [r7, #0]
 800350a:	f7ff ffa5 	bl	8003458 <ucg_font_get_byte>
 800350e:	4603      	mov	r3, r0
 8003510:	461a      	mov	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	711a      	strb	r2, [r3, #4]
 8003516:	2105      	movs	r1, #5
 8003518:	6838      	ldr	r0, [r7, #0]
 800351a:	f7ff ff9d 	bl	8003458 <ucg_font_get_byte>
 800351e:	4603      	mov	r3, r0
 8003520:	461a      	mov	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	715a      	strb	r2, [r3, #5]
 8003526:	2106      	movs	r1, #6
 8003528:	6838      	ldr	r0, [r7, #0]
 800352a:	f7ff ff95 	bl	8003458 <ucg_font_get_byte>
 800352e:	4603      	mov	r3, r0
 8003530:	461a      	mov	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	719a      	strb	r2, [r3, #6]
 8003536:	2107      	movs	r1, #7
 8003538:	6838      	ldr	r0, [r7, #0]
 800353a:	f7ff ff8d 	bl	8003458 <ucg_font_get_byte>
 800353e:	4603      	mov	r3, r0
 8003540:	461a      	mov	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	71da      	strb	r2, [r3, #7]
 8003546:	2108      	movs	r1, #8
 8003548:	6838      	ldr	r0, [r7, #0]
 800354a:	f7ff ff85 	bl	8003458 <ucg_font_get_byte>
 800354e:	4603      	mov	r3, r0
 8003550:	461a      	mov	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	721a      	strb	r2, [r3, #8]
 8003556:	2109      	movs	r1, #9
 8003558:	6838      	ldr	r0, [r7, #0]
 800355a:	f7ff ff7d 	bl	8003458 <ucg_font_get_byte>
 800355e:	4603      	mov	r3, r0
 8003560:	b25a      	sxtb	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	725a      	strb	r2, [r3, #9]
 8003566:	210a      	movs	r1, #10
 8003568:	6838      	ldr	r0, [r7, #0]
 800356a:	f7ff ff75 	bl	8003458 <ucg_font_get_byte>
 800356e:	4603      	mov	r3, r0
 8003570:	b25a      	sxtb	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	729a      	strb	r2, [r3, #10]
 8003576:	210b      	movs	r1, #11
 8003578:	6838      	ldr	r0, [r7, #0]
 800357a:	f7ff ff6d 	bl	8003458 <ucg_font_get_byte>
 800357e:	4603      	mov	r3, r0
 8003580:	b25a      	sxtb	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	72da      	strb	r2, [r3, #11]
 8003586:	210c      	movs	r1, #12
 8003588:	6838      	ldr	r0, [r7, #0]
 800358a:	f7ff ff65 	bl	8003458 <ucg_font_get_byte>
 800358e:	4603      	mov	r3, r0
 8003590:	b25a      	sxtb	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	731a      	strb	r2, [r3, #12]
 8003596:	210d      	movs	r1, #13
 8003598:	6838      	ldr	r0, [r7, #0]
 800359a:	f7ff ff5d 	bl	8003458 <ucg_font_get_byte>
 800359e:	4603      	mov	r3, r0
 80035a0:	b25a      	sxtb	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	735a      	strb	r2, [r3, #13]
 80035a6:	210e      	movs	r1, #14
 80035a8:	6838      	ldr	r0, [r7, #0]
 80035aa:	f7ff ff55 	bl	8003458 <ucg_font_get_byte>
 80035ae:	4603      	mov	r3, r0
 80035b0:	b25a      	sxtb	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	739a      	strb	r2, [r3, #14]
 80035b6:	210f      	movs	r1, #15
 80035b8:	6838      	ldr	r0, [r7, #0]
 80035ba:	f7ff ff4d 	bl	8003458 <ucg_font_get_byte>
 80035be:	4603      	mov	r3, r0
 80035c0:	b25a      	sxtb	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	73da      	strb	r2, [r3, #15]
 80035c6:	2110      	movs	r1, #16
 80035c8:	6838      	ldr	r0, [r7, #0]
 80035ca:	f7ff ff45 	bl	8003458 <ucg_font_get_byte>
 80035ce:	4603      	mov	r3, r0
 80035d0:	b25a      	sxtb	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	741a      	strb	r2, [r3, #16]
 80035d6:	2111      	movs	r1, #17
 80035d8:	6838      	ldr	r0, [r7, #0]
 80035da:	f7ff ff4f 	bl	800347c <ucg_font_get_word>
 80035de:	4603      	mov	r3, r0
 80035e0:	461a      	mov	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	825a      	strh	r2, [r3, #18]
 80035e6:	2113      	movs	r1, #19
 80035e8:	6838      	ldr	r0, [r7, #0]
 80035ea:	f7ff ff47 	bl	800347c <ucg_font_get_word>
 80035ee:	4603      	mov	r3, r0
 80035f0:	461a      	mov	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	829a      	strh	r2, [r3, #20]
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <ucg_font_decode_get_unsigned_bits>:
 80035fe:	b480      	push	{r7}
 8003600:	b085      	sub	sp, #20
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	460b      	mov	r3, r1
 8003608:	70fb      	strb	r3, [r7, #3]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	7b1b      	ldrb	r3, [r3, #12]
 800360e:	737b      	strb	r3, [r7, #13]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	73fb      	strb	r3, [r7, #15]
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	7b7b      	ldrb	r3, [r7, #13]
 800361c:	fa42 f303 	asr.w	r3, r2, r3
 8003620:	73fb      	strb	r3, [r7, #15]
 8003622:	7b7b      	ldrb	r3, [r7, #13]
 8003624:	73bb      	strb	r3, [r7, #14]
 8003626:	7bba      	ldrb	r2, [r7, #14]
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	4413      	add	r3, r2
 800362c:	73bb      	strb	r3, [r7, #14]
 800362e:	7bbb      	ldrb	r3, [r7, #14]
 8003630:	2b07      	cmp	r3, #7
 8003632:	d91a      	bls.n	800366a <ucg_font_decode_get_unsigned_bits+0x6c>
 8003634:	2308      	movs	r3, #8
 8003636:	733b      	strb	r3, [r7, #12]
 8003638:	7b3a      	ldrb	r2, [r7, #12]
 800363a:	7b7b      	ldrb	r3, [r7, #13]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	733b      	strb	r3, [r7, #12]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	7b3b      	ldrb	r3, [r7, #12]
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	b25a      	sxtb	r2, r3
 800365a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800365e:	4313      	orrs	r3, r2
 8003660:	b25b      	sxtb	r3, r3
 8003662:	73fb      	strb	r3, [r7, #15]
 8003664:	7bbb      	ldrb	r3, [r7, #14]
 8003666:	3b08      	subs	r3, #8
 8003668:	73bb      	strb	r3, [r7, #14]
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	f04f 32ff 	mov.w	r2, #4294967295
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	b2db      	uxtb	r3, r3
 8003676:	43db      	mvns	r3, r3
 8003678:	b2da      	uxtb	r2, r3
 800367a:	7bfb      	ldrb	r3, [r7, #15]
 800367c:	4013      	ands	r3, r2
 800367e:	73fb      	strb	r3, [r7, #15]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	7bba      	ldrb	r2, [r7, #14]
 8003684:	731a      	strb	r2, [r3, #12]
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	4618      	mov	r0, r3
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <ucg_font_decode_get_signed_bits>:
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	70fb      	strb	r3, [r7, #3]
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	4619      	mov	r1, r3
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff ffaa 	bl	80035fe <ucg_font_decode_get_unsigned_bits>
 80036aa:	4603      	mov	r3, r0
 80036ac:	73fb      	strb	r3, [r7, #15]
 80036ae:	2301      	movs	r3, #1
 80036b0:	73bb      	strb	r3, [r7, #14]
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	3b01      	subs	r3, #1
 80036b6:	70fb      	strb	r3, [r7, #3]
 80036b8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	73bb      	strb	r3, [r7, #14]
 80036c4:	7bfa      	ldrb	r2, [r7, #15]
 80036c6:	7bbb      	ldrb	r3, [r7, #14]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	73fb      	strb	r3, [r7, #15]
 80036ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <ucg_add_vector_y>:
 80036da:	b490      	push	{r4, r7}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	4604      	mov	r4, r0
 80036e2:	4608      	mov	r0, r1
 80036e4:	4611      	mov	r1, r2
 80036e6:	461a      	mov	r2, r3
 80036e8:	4623      	mov	r3, r4
 80036ea:	80fb      	strh	r3, [r7, #6]
 80036ec:	4603      	mov	r3, r0
 80036ee:	717b      	strb	r3, [r7, #5]
 80036f0:	460b      	mov	r3, r1
 80036f2:	713b      	strb	r3, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	70fb      	strb	r3, [r7, #3]
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d00b      	beq.n	8003716 <ucg_add_vector_y+0x3c>
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d011      	beq.n	8003726 <ucg_add_vector_y+0x4c>
 8003702:	2b00      	cmp	r3, #0
 8003704:	d117      	bne.n	8003736 <ucg_add_vector_y+0x5c>
 8003706:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800370a:	b29a      	uxth	r2, r3
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	4413      	add	r3, r2
 8003710:	b29b      	uxth	r3, r3
 8003712:	80fb      	strh	r3, [r7, #6]
 8003714:	e017      	b.n	8003746 <ucg_add_vector_y+0x6c>
 8003716:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800371a:	b29a      	uxth	r2, r3
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	4413      	add	r3, r2
 8003720:	b29b      	uxth	r3, r3
 8003722:	80fb      	strh	r3, [r7, #6]
 8003724:	e00f      	b.n	8003746 <ucg_add_vector_y+0x6c>
 8003726:	88fa      	ldrh	r2, [r7, #6]
 8003728:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800372c:	b29b      	uxth	r3, r3
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	b29b      	uxth	r3, r3
 8003732:	80fb      	strh	r3, [r7, #6]
 8003734:	e007      	b.n	8003746 <ucg_add_vector_y+0x6c>
 8003736:	88fa      	ldrh	r2, [r7, #6]
 8003738:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800373c:	b29b      	uxth	r3, r3
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	b29b      	uxth	r3, r3
 8003742:	80fb      	strh	r3, [r7, #6]
 8003744:	bf00      	nop
 8003746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bc90      	pop	{r4, r7}
 8003752:	4770      	bx	lr

08003754 <ucg_add_vector_x>:
 8003754:	b490      	push	{r4, r7}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	4604      	mov	r4, r0
 800375c:	4608      	mov	r0, r1
 800375e:	4611      	mov	r1, r2
 8003760:	461a      	mov	r2, r3
 8003762:	4623      	mov	r3, r4
 8003764:	80fb      	strh	r3, [r7, #6]
 8003766:	4603      	mov	r3, r0
 8003768:	717b      	strb	r3, [r7, #5]
 800376a:	460b      	mov	r3, r1
 800376c:	713b      	strb	r3, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	70fb      	strb	r3, [r7, #3]
 8003772:	78fb      	ldrb	r3, [r7, #3]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d00b      	beq.n	8003790 <ucg_add_vector_x+0x3c>
 8003778:	2b02      	cmp	r3, #2
 800377a:	d011      	beq.n	80037a0 <ucg_add_vector_x+0x4c>
 800377c:	2b00      	cmp	r3, #0
 800377e:	d117      	bne.n	80037b0 <ucg_add_vector_x+0x5c>
 8003780:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003784:	b29a      	uxth	r2, r3
 8003786:	88fb      	ldrh	r3, [r7, #6]
 8003788:	4413      	add	r3, r2
 800378a:	b29b      	uxth	r3, r3
 800378c:	80fb      	strh	r3, [r7, #6]
 800378e:	e017      	b.n	80037c0 <ucg_add_vector_x+0x6c>
 8003790:	88fa      	ldrh	r2, [r7, #6]
 8003792:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003796:	b29b      	uxth	r3, r3
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	b29b      	uxth	r3, r3
 800379c:	80fb      	strh	r3, [r7, #6]
 800379e:	e00f      	b.n	80037c0 <ucg_add_vector_x+0x6c>
 80037a0:	88fa      	ldrh	r2, [r7, #6]
 80037a2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	80fb      	strh	r3, [r7, #6]
 80037ae:	e007      	b.n	80037c0 <ucg_add_vector_x+0x6c>
 80037b0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	88fb      	ldrh	r3, [r7, #6]
 80037b8:	4413      	add	r3, r2
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	80fb      	strh	r3, [r7, #6]
 80037be:	bf00      	nop
 80037c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc90      	pop	{r4, r7}
 80037cc:	4770      	bx	lr

080037ce <ucg_font_decode_len>:
 80037ce:	b590      	push	{r4, r7, lr}
 80037d0:	b089      	sub	sp, #36	; 0x24
 80037d2:	af02      	add	r7, sp, #8
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	460b      	mov	r3, r1
 80037d8:	70fb      	strb	r3, [r7, #3]
 80037da:	4613      	mov	r3, r2
 80037dc:	70bb      	strb	r3, [r7, #2]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3380      	adds	r3, #128	; 0x80
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	75fb      	strb	r3, [r7, #23]
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80037ee:	757b      	strb	r3, [r7, #21]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80037f6:	753b      	strb	r3, [r7, #20]
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80037fe:	73fb      	strb	r3, [r7, #15]
 8003800:	7bfa      	ldrb	r2, [r7, #15]
 8003802:	7d7b      	ldrb	r3, [r7, #21]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	73fb      	strb	r3, [r7, #15]
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	75bb      	strb	r3, [r7, #22]
 800380c:	7dfa      	ldrb	r2, [r7, #23]
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	429a      	cmp	r2, r3
 8003812:	d201      	bcs.n	8003818 <ucg_font_decode_len+0x4a>
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	75bb      	strb	r3, [r7, #22]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	889b      	ldrh	r3, [r3, #4]
 800381c:	81bb      	strh	r3, [r7, #12]
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	88db      	ldrh	r3, [r3, #6]
 8003822:	817b      	strh	r3, [r7, #10]
 8003824:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003828:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	7b9b      	ldrb	r3, [r3, #14]
 8003830:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8003834:	f7ff ff8e 	bl	8003754 <ucg_add_vector_x>
 8003838:	4603      	mov	r3, r0
 800383a:	81bb      	strh	r3, [r7, #12]
 800383c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003840:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	7b9b      	ldrb	r3, [r3, #14]
 8003848:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 800384c:	f7ff ff45 	bl	80036da <ucg_add_vector_y>
 8003850:	4603      	mov	r3, r0
 8003852:	817b      	strh	r3, [r7, #10]
 8003854:	78bb      	ldrb	r3, [r7, #2]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d011      	beq.n	800387e <ucg_font_decode_len+0xb0>
 800385a:	7dbb      	ldrb	r3, [r7, #22]
 800385c:	b21c      	sxth	r4, r3
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	7b9b      	ldrb	r3, [r3, #14]
 8003862:	b21b      	sxth	r3, r3
 8003864:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8003868:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	9201      	str	r2, [sp, #4]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	4623      	mov	r3, r4
 8003874:	4602      	mov	r2, r0
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fbc0 	bl	8003ffc <ucg_Draw90Line>
 800387c:	e014      	b.n	80038a8 <ucg_font_decode_len+0xda>
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	7b5b      	ldrb	r3, [r3, #13]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d110      	bne.n	80038a8 <ucg_font_decode_len+0xda>
 8003886:	7dbb      	ldrb	r3, [r7, #22]
 8003888:	b21c      	sxth	r4, r3
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	7b9b      	ldrb	r3, [r3, #14]
 800388e:	b21b      	sxth	r3, r3
 8003890:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8003894:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	9201      	str	r2, [sp, #4]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	4623      	mov	r3, r4
 80038a0:	4602      	mov	r2, r0
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fbaa 	bl	8003ffc <ucg_Draw90Line>
 80038a8:	7dfa      	ldrb	r2, [r7, #23]
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d309      	bcc.n	80038c4 <ucg_font_decode_len+0xf6>
 80038b0:	7dfa      	ldrb	r2, [r7, #23]
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	75fb      	strb	r3, [r7, #23]
 80038b8:	2300      	movs	r3, #0
 80038ba:	757b      	strb	r3, [r7, #21]
 80038bc:	7d3b      	ldrb	r3, [r7, #20]
 80038be:	3301      	adds	r3, #1
 80038c0:	753b      	strb	r3, [r7, #20]
 80038c2:	e799      	b.n	80037f8 <ucg_font_decode_len+0x2a>
 80038c4:	bf00      	nop
 80038c6:	7d7a      	ldrb	r2, [r7, #21]
 80038c8:	7dfb      	ldrb	r3, [r7, #23]
 80038ca:	4413      	add	r3, r2
 80038cc:	757b      	strb	r3, [r7, #21]
 80038ce:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	721a      	strb	r2, [r3, #8]
 80038d6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	725a      	strb	r2, [r3, #9]
 80038de:	bf00      	nop
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd90      	pop	{r4, r7, pc}

080038e6 <ucg_font_setup_decode>:
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3380      	adds	r3, #128	; 0x80
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	731a      	strb	r2, [r3, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800391c:	4619      	mov	r1, r3
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f7ff fe6d 	bl	80035fe <ucg_font_decode_get_unsigned_bits>
 8003924:	4603      	mov	r3, r0
 8003926:	b25a      	sxtb	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	729a      	strb	r2, [r3, #10]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8003932:	4619      	mov	r1, r3
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f7ff fe62 	bl	80035fe <ucg_font_decode_get_unsigned_bits>
 800393a:	4603      	mov	r3, r0
 800393c:	b25a      	sxtb	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	72da      	strb	r2, [r3, #11]
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <ucg_font_decode_glyph>:
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	6039      	str	r1, [r7, #0]
 8003954:	6839      	ldr	r1, [r7, #0]
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff ffc5 	bl	80038e6 <ucg_font_setup_decode>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8003962:	73fb      	strb	r3, [r7, #15]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8003970:	4619      	mov	r1, r3
 8003972:	4610      	mov	r0, r2
 8003974:	f7ff fe8e 	bl	8003694 <ucg_font_decode_get_signed_bits>
 8003978:	4603      	mov	r3, r0
 800397a:	73bb      	strb	r3, [r7, #14]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8003988:	4619      	mov	r1, r3
 800398a:	4610      	mov	r0, r2
 800398c:	f7ff fe82 	bl	8003694 <ucg_font_decode_get_signed_bits>
 8003990:	4603      	mov	r3, r0
 8003992:	737b      	strb	r3, [r7, #13]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80039a0:	4619      	mov	r1, r3
 80039a2:	4610      	mov	r0, r2
 80039a4:	f7ff fe76 	bl	8003694 <ucg_font_decode_get_signed_bits>
 80039a8:	4603      	mov	r3, r0
 80039aa:	733b      	strb	r3, [r7, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f993 308a 	ldrsb.w	r3, [r3, #138]	; 0x8a
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	dd69      	ble.n	8003a8a <ucg_font_decode_glyph+0x140>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f9b3 0084 	ldrsh.w	r0, [r3, #132]	; 0x84
 80039bc:	7bfa      	ldrb	r2, [r7, #15]
 80039be:	7b7b      	ldrb	r3, [r7, #13]
 80039c0:	4413      	add	r3, r2
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	425b      	negs	r3, r3
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	b25a      	sxtb	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80039d0:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80039d4:	f7ff febe 	bl	8003754 <ucg_add_vector_x>
 80039d8:	4603      	mov	r3, r0
 80039da:	461a      	mov	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f9b3 0086 	ldrsh.w	r0, [r3, #134]	; 0x86
 80039e8:	7bfa      	ldrb	r2, [r7, #15]
 80039ea:	7b7b      	ldrb	r3, [r7, #13]
 80039ec:	4413      	add	r3, r2
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	425b      	negs	r3, r3
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	b25a      	sxtb	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80039fc:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003a00:	f7ff fe6b 	bl	80036da <ucg_add_vector_y>
 8003a04:	4603      	mov	r3, r0
 8003a06:	461a      	mov	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	f7ff fde6 	bl	80035fe <ucg_font_decode_get_unsigned_bits>
 8003a32:	4603      	mov	r3, r0
 8003a34:	72fb      	strb	r3, [r7, #11]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003a42:	4619      	mov	r1, r3
 8003a44:	4610      	mov	r0, r2
 8003a46:	f7ff fdda 	bl	80035fe <ucg_font_decode_get_unsigned_bits>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	72bb      	strb	r3, [r7, #10]
 8003a4e:	7afb      	ldrb	r3, [r7, #11]
 8003a50:	2200      	movs	r2, #0
 8003a52:	4619      	mov	r1, r3
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff feba 	bl	80037ce <ucg_font_decode_len>
 8003a5a:	7abb      	ldrb	r3, [r7, #10]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	4619      	mov	r1, r3
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff feb4 	bl	80037ce <ucg_font_decode_len>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3380      	adds	r3, #128	; 0x80
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff fdc6 	bl	80035fe <ucg_font_decode_get_unsigned_bits>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1ea      	bne.n	8003a4e <ucg_font_decode_glyph+0x104>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f993 3089 	ldrsb.w	r3, [r3, #137]	; 0x89
 8003a7e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	dd00      	ble.n	8003a88 <ucg_font_decode_glyph+0x13e>
 8003a86:	e7ca      	b.n	8003a1e <ucg_font_decode_glyph+0xd4>
 8003a88:	bf00      	nop
 8003a8a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <ucg_font_get_glyph_data>:
 8003a96:	b480      	push	{r7}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	70fb      	strb	r3, [r7, #3]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3315      	adds	r3, #21
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	2b60      	cmp	r3, #96	; 0x60
 8003ab2:	d907      	bls.n	8003ac4 <ucg_font_get_glyph_data+0x2e>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8003aba:	461a      	mov	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	e009      	b.n	8003ad8 <ucg_font_get_glyph_data+0x42>
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	2b40      	cmp	r3, #64	; 0x40
 8003ac8:	d906      	bls.n	8003ad8 <ucg_font_get_glyph_data+0x42>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	3301      	adds	r3, #1
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00e      	beq.n	8003b00 <ucg_font_get_glyph_data+0x6a>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	78fa      	ldrb	r2, [r7, #3]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d101      	bne.n	8003af0 <ucg_font_get_glyph_data+0x5a>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	e009      	b.n	8003b04 <ucg_font_get_glyph_data+0x6e>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	3301      	adds	r3, #1
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4413      	add	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	e7eb      	b.n	8003ad8 <ucg_font_get_glyph_data+0x42>
 8003b00:	bf00      	nop
 8003b02:	2300      	movs	r3, #0
 8003b04:	4618      	mov	r0, r3
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <ucg_font_draw_glyph>:
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	4608      	mov	r0, r1
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4603      	mov	r3, r0
 8003b20:	817b      	strh	r3, [r7, #10]
 8003b22:	460b      	mov	r3, r1
 8003b24:	813b      	strh	r3, [r7, #8]
 8003b26:	4613      	mov	r3, r2
 8003b28:	71fb      	strb	r3, [r7, #7]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	82fb      	strh	r3, [r7, #22]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	897a      	ldrh	r2, [r7, #10]
 8003b32:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	893a      	ldrh	r2, [r7, #8]
 8003b3a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	79fa      	ldrb	r2, [r7, #7]
 8003b42:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8003b46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f7ff ffa2 	bl	8003a96 <ucg_font_get_glyph_data>
 8003b52:	6138      	str	r0, [r7, #16]
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d005      	beq.n	8003b66 <ucg_font_draw_glyph+0x56>
 8003b5a:	6939      	ldr	r1, [r7, #16]
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f7ff fef4 	bl	800394a <ucg_font_decode_glyph>
 8003b62:	4603      	mov	r3, r0
 8003b64:	82fb      	strh	r3, [r7, #22]
 8003b66:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <ucg_SetFontMode>:
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	70fb      	strb	r3, [r7, #3]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	78fa      	ldrb	r2, [r7, #3]
 8003b82:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
	...

08003b94 <ucg_DrawGlyph>:
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	817b      	strh	r3, [r7, #10]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	813b      	strh	r3, [r7, #8]
 8003baa:	4613      	mov	r3, r2
 8003bac:	71fb      	strb	r3, [r7, #7]
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d837      	bhi.n	8003c24 <ucg_DrawGlyph+0x90>
 8003bb4:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <ucg_DrawGlyph+0x28>)
 8003bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bba:	bf00      	nop
 8003bbc:	08003bcd 	.word	0x08003bcd
 8003bc0:	08003be3 	.word	0x08003be3
 8003bc4:	08003bf9 	.word	0x08003bf9
 8003bc8:	08003c0f 	.word	0x08003c0f
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	4798      	blx	r3
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	893b      	ldrh	r3, [r7, #8]
 8003bda:	4413      	add	r3, r2
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	813b      	strh	r3, [r7, #8]
 8003be0:	e020      	b.n	8003c24 <ucg_DrawGlyph+0x90>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	4798      	blx	r3
 8003bea:	4603      	mov	r3, r0
 8003bec:	897a      	ldrh	r2, [r7, #10]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	817b      	strh	r3, [r7, #10]
 8003bf6:	e015      	b.n	8003c24 <ucg_DrawGlyph+0x90>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	4798      	blx	r3
 8003c00:	4603      	mov	r3, r0
 8003c02:	893a      	ldrh	r2, [r7, #8]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	813b      	strh	r3, [r7, #8]
 8003c0c:	e00a      	b.n	8003c24 <ucg_DrawGlyph+0x90>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	4798      	blx	r3
 8003c16:	4603      	mov	r3, r0
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	897b      	ldrh	r3, [r7, #10]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	817b      	strh	r3, [r7, #10]
 8003c22:	bf00      	nop
 8003c24:	79f8      	ldrb	r0, [r7, #7]
 8003c26:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003c2a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003c2e:	7e3b      	ldrb	r3, [r7, #24]
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	4603      	mov	r3, r0
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f7ff ff6b 	bl	8003b10 <ucg_font_draw_glyph>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <task_drawString>:
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	81fb      	strh	r3, [r7, #14]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	60bb      	str	r3, [r7, #8]
 8003c54:	4b45      	ldr	r3, [pc, #276]	; (8003d6c <task_drawString+0x128>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <task_drawString+0x1e>
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d01e      	beq.n	8003c9e <task_drawString+0x5a>
 8003c60:	e07b      	b.n	8003d5a <task_drawString+0x116>
 8003c62:	4843      	ldr	r0, [pc, #268]	; (8003d70 <task_drawString+0x12c>)
 8003c64:	f000 fb7b 	bl	800435e <bufNumItems>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <task_drawString+0x3a>
 8003c6e:	4941      	ldr	r1, [pc, #260]	; (8003d74 <task_drawString+0x130>)
 8003c70:	483f      	ldr	r0, [pc, #252]	; (8003d70 <task_drawString+0x12c>)
 8003c72:	f000 fc0d 	bl	8004490 <bufDeDat>
 8003c76:	4b3d      	ldr	r3, [pc, #244]	; (8003d6c <task_drawString+0x128>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	701a      	strb	r2, [r3, #0]
 8003c7c:	e071      	b.n	8003d62 <task_drawString+0x11e>
 8003c7e:	4b3e      	ldr	r3, [pc, #248]	; (8003d78 <task_drawString+0x134>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2bff      	cmp	r3, #255	; 0xff
 8003c84:	d007      	beq.n	8003c96 <task_drawString+0x52>
 8003c86:	4b3c      	ldr	r3, [pc, #240]	; (8003d78 <task_drawString+0x134>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fe fbf6 	bl	800247c <TimerStop>
 8003c90:	4b39      	ldr	r3, [pc, #228]	; (8003d78 <task_drawString+0x134>)
 8003c92:	22ff      	movs	r2, #255	; 0xff
 8003c94:	701a      	strb	r2, [r3, #0]
 8003c96:	4b35      	ldr	r3, [pc, #212]	; (8003d6c <task_drawString+0x128>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	e061      	b.n	8003d62 <task_drawString+0x11e>
 8003c9e:	4b35      	ldr	r3, [pc, #212]	; (8003d74 <task_drawString+0x130>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d054      	beq.n	8003d52 <task_drawString+0x10e>
 8003ca8:	4b32      	ldr	r3, [pc, #200]	; (8003d74 <task_drawString+0x130>)
 8003caa:	f9b3 1000 	ldrsh.w	r1, [r3]
 8003cae:	4b31      	ldr	r3, [pc, #196]	; (8003d74 <task_drawString+0x130>)
 8003cb0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003cb4:	4b2f      	ldr	r3, [pc, #188]	; (8003d74 <task_drawString+0x130>)
 8003cb6:	7918      	ldrb	r0, [r3, #4]
 8003cb8:	4b2e      	ldr	r3, [pc, #184]	; (8003d74 <task_drawString+0x130>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	68b8      	ldr	r0, [r7, #8]
 8003cc4:	f7ff ff66 	bl	8003b94 <ucg_DrawGlyph>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	81fb      	strh	r3, [r7, #14]
 8003ccc:	4b29      	ldr	r3, [pc, #164]	; (8003d74 <task_drawString+0x130>)
 8003cce:	791b      	ldrb	r3, [r3, #4]
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d837      	bhi.n	8003d44 <task_drawString+0x100>
 8003cd4:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <task_drawString+0x98>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003ced 	.word	0x08003ced
 8003ce0:	08003d03 	.word	0x08003d03
 8003ce4:	08003d19 	.word	0x08003d19
 8003ce8:	08003d2f 	.word	0x08003d2f
 8003cec:	4b21      	ldr	r3, [pc, #132]	; (8003d74 <task_drawString+0x130>)
 8003cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	89fb      	ldrh	r3, [r7, #14]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	b21a      	sxth	r2, r3
 8003cfc:	4b1d      	ldr	r3, [pc, #116]	; (8003d74 <task_drawString+0x130>)
 8003cfe:	801a      	strh	r2, [r3, #0]
 8003d00:	e021      	b.n	8003d46 <task_drawString+0x102>
 8003d02:	4b1c      	ldr	r3, [pc, #112]	; (8003d74 <task_drawString+0x130>)
 8003d04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	89fb      	ldrh	r3, [r7, #14]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	b21a      	sxth	r2, r3
 8003d12:	4b18      	ldr	r3, [pc, #96]	; (8003d74 <task_drawString+0x130>)
 8003d14:	805a      	strh	r2, [r3, #2]
 8003d16:	e016      	b.n	8003d46 <task_drawString+0x102>
 8003d18:	4b16      	ldr	r3, [pc, #88]	; (8003d74 <task_drawString+0x130>)
 8003d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	89fb      	ldrh	r3, [r7, #14]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	b21a      	sxth	r2, r3
 8003d28:	4b12      	ldr	r3, [pc, #72]	; (8003d74 <task_drawString+0x130>)
 8003d2a:	801a      	strh	r2, [r3, #0]
 8003d2c:	e00b      	b.n	8003d46 <task_drawString+0x102>
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <task_drawString+0x130>)
 8003d30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	89fb      	ldrh	r3, [r7, #14]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	b21a      	sxth	r2, r3
 8003d3e:	4b0d      	ldr	r3, [pc, #52]	; (8003d74 <task_drawString+0x130>)
 8003d40:	805a      	strh	r2, [r3, #2]
 8003d42:	e000      	b.n	8003d46 <task_drawString+0x102>
 8003d44:	bf00      	nop
 8003d46:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <task_drawString+0x130>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	4a09      	ldr	r2, [pc, #36]	; (8003d74 <task_drawString+0x130>)
 8003d4e:	6093      	str	r3, [r2, #8]
 8003d50:	e007      	b.n	8003d62 <task_drawString+0x11e>
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <task_drawString+0x128>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	701a      	strb	r2, [r3, #0]
 8003d58:	e003      	b.n	8003d62 <task_drawString+0x11e>
 8003d5a:	4b04      	ldr	r3, [pc, #16]	; (8003d6c <task_drawString+0x128>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	bf00      	nop
 8003d62:	bf00      	nop
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20001d7c 	.word	0x20001d7c
 8003d70:	20000d6c 	.word	0x20000d6c
 8003d74:	20001ec8 	.word	0x20001ec8
 8003d78:	20000594 	.word	0x20000594

08003d7c <ucg_DrawString>:
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08a      	sub	sp, #40	; 0x28
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	4608      	mov	r0, r1
 8003d86:	4611      	mov	r1, r2
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	817b      	strh	r3, [r7, #10]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	813b      	strh	r3, [r7, #8]
 8003d92:	4613      	mov	r3, r2
 8003d94:	71fb      	strb	r3, [r7, #7]
 8003d96:	2300      	movs	r3, #0
 8003d98:	83fb      	strh	r3, [r7, #30]
 8003d9a:	897b      	ldrh	r3, [r7, #10]
 8003d9c:	823b      	strh	r3, [r7, #16]
 8003d9e:	893b      	ldrh	r3, [r7, #8]
 8003da0:	827b      	strh	r3, [r7, #18]
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	753b      	strb	r3, [r7, #20]
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da8:	61bb      	str	r3, [r7, #24]
 8003daa:	f107 0310 	add.w	r3, r7, #16
 8003dae:	4619      	mov	r1, r3
 8003db0:	480c      	ldr	r0, [pc, #48]	; (8003de4 <ucg_DrawString+0x68>)
 8003db2:	f000 fb1f 	bl	80043f4 <bufEnDat>
 8003db6:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <ucg_DrawString+0x6c>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2bff      	cmp	r3, #255	; 0xff
 8003dbc:	d10b      	bne.n	8003dd6 <ucg_DrawString+0x5a>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <ucg_DrawString+0x70>)
 8003dc4:	22ff      	movs	r2, #255	; 0xff
 8003dc6:	211e      	movs	r1, #30
 8003dc8:	4809      	ldr	r0, [pc, #36]	; (8003df0 <ucg_DrawString+0x74>)
 8003dca:	f7fe faf5 	bl	80023b8 <TimerStart>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <ucg_DrawString+0x6c>)
 8003dd4:	701a      	strb	r2, [r3, #0]
 8003dd6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3720      	adds	r7, #32
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000d6c 	.word	0x20000d6c
 8003de8:	20000594 	.word	0x20000594
 8003dec:	08003c45 	.word	0x08003c45
 8003df0:	08005b7c 	.word	0x08005b7c

08003df4 <ucg_UpdateRefHeight>:
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d05d      	beq.n	8003ec0 <ucg_UpdateRefHeight+0xcc>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f993 209d 	ldrsb.w	r2, [r3, #157]	; 0x9d
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f993 209e 	ldrsb.w	r2, [r3, #158]	; 0x9e
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d04d      	beq.n	8003ec2 <ucg_UpdateRefHeight+0xce>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d11c      	bne.n	8003e6a <ucg_UpdateRefHeight+0x76>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f993 20ac 	ldrsb.w	r2, [r3, #172]	; 0xac
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f993 309f 	ldrsb.w	r3, [r3, #159]	; 0x9f
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	da05      	bge.n	8003e4c <ucg_UpdateRefHeight+0x58>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f993 209f 	ldrsb.w	r2, [r3, #159]	; 0x9f
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	dd32      	ble.n	8003ec2 <ucg_UpdateRefHeight+0xce>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f993 20a0 	ldrsb.w	r2, [r3, #160]	; 0xa0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8003e68:	e02b      	b.n	8003ec2 <ucg_UpdateRefHeight+0xce>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f993 30ac 	ldrsb.w	r3, [r3, #172]	; 0xac
 8003e70:	461a      	mov	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 8003e78:	4619      	mov	r1, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8003e80:	440b      	add	r3, r1
 8003e82:	429a      	cmp	r2, r3
 8003e84:	da0d      	bge.n	8003ea2 <ucg_UpdateRefHeight+0xae>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	4413      	add	r3, r2
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	b25a      	sxtb	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	dd07      	ble.n	8003ec2 <ucg_UpdateRefHeight+0xce>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f993 209c 	ldrsb.w	r2, [r3, #156]	; 0x9c
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8003ebe:	e000      	b.n	8003ec2 <ucg_UpdateRefHeight+0xce>
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <ucg_font_calc_vref_font>:
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <ucg_SetFontPosBaseline>:
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a04      	ldr	r2, [pc, #16]	; (8003f00 <ucg_SetFontPosBaseline+0x1c>)
 8003ef0:	67da      	str	r2, [r3, #124]	; 0x7c
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	08003ecd 	.word	0x08003ecd

08003f04 <ucg_SetFont>:
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d012      	beq.n	8003f3e <ucg_SetFont+0x3a>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	679a      	str	r2, [r3, #120]	; 0x78
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3390      	adds	r3, #144	; 0x90
 8003f22:	6839      	ldr	r1, [r7, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff fac9 	bl	80034bc <ucg_read_font_info>
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff ff62 	bl	8003df4 <ucg_UpdateRefHeight>
 8003f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f34:	220c      	movs	r2, #12
 8003f36:	4904      	ldr	r1, [pc, #16]	; (8003f48 <ucg_SetFont+0x44>)
 8003f38:	4804      	ldr	r0, [pc, #16]	; (8003f4c <ucg_SetFont+0x48>)
 8003f3a:	f000 f9f5 	bl	8004328 <bufInit>
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000d6c 	.word	0x20000d6c
 8003f4c:	20000d7c 	.word	0x20000d7c

08003f50 <ucg_init_struct>:
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	7813      	ldrb	r3, [r2, #0]
 8003f5c:	f36f 0300 	bfc	r3, #0, #1
 8003f60:	7013      	strb	r3, [r2, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	611a      	str	r2, [r3, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	865a      	strh	r2, [r3, #50]	; 0x32
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	679a      	str	r2, [r3, #120]	; 0x78
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <ucg_Init>:
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f7ff ffce 	bl	8003f50 <ucg_init_struct>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d103      	bne.n	8003fc2 <ucg_Init+0x22>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4a0e      	ldr	r2, [pc, #56]	; (8003ff8 <ucg_Init+0x58>)
 8003fbe:	60da      	str	r2, [r3, #12]
 8003fc0:	e002      	b.n	8003fc8 <ucg_Init+0x28>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	60da      	str	r2, [r3, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	609a      	str	r2, [r3, #8]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	61da      	str	r2, [r3, #28]
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f7ff ff85 	bl	8003ee4 <ucg_SetFontPosBaseline>
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f7ff f996 	bl	800330c <ucg_PowerUp>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	82fb      	strh	r3, [r7, #22]
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f7ff f9d6 	bl	8003396 <ucg_GetDimension>
 8003fea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	08002f6f 	.word	0x08002f6f

08003ffc <ucg_Draw90Line>:
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	4608      	mov	r0, r1
 8004006:	4611      	mov	r1, r2
 8004008:	461a      	mov	r2, r3
 800400a:	4603      	mov	r3, r0
 800400c:	817b      	strh	r3, [r7, #10]
 800400e:	460b      	mov	r3, r1
 8004010:	813b      	strh	r3, [r7, #8]
 8004012:	4613      	mov	r3, r2
 8004014:	80fb      	strh	r3, [r7, #6]
 8004016:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800401a:	68f9      	ldr	r1, [r7, #12]
 800401c:	4613      	mov	r3, r2
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	4413      	add	r3, r2
 8004022:	440b      	add	r3, r1
 8004024:	333a      	adds	r3, #58	; 0x3a
 8004026:	781a      	ldrb	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800402e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	4613      	mov	r3, r2
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	4413      	add	r3, r2
 800403a:	440b      	add	r3, r1
 800403c:	333b      	adds	r3, #59	; 0x3b
 800403e:	781a      	ldrb	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004046:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800404a:	68f9      	ldr	r1, [r7, #12]
 800404c:	4613      	mov	r3, r2
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	4413      	add	r3, r2
 8004052:	440b      	add	r3, r1
 8004054:	333c      	adds	r3, #60	; 0x3c
 8004056:	781a      	ldrb	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	897a      	ldrh	r2, [r7, #10]
 8004062:	849a      	strh	r2, [r3, #36]	; 0x24
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	893a      	ldrh	r2, [r7, #8]
 8004068:	84da      	strh	r2, [r3, #38]	; 0x26
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	88fa      	ldrh	r2, [r7, #6]
 800406e:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8b3a      	ldrh	r2, [r7, #24]
 8004074:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f7ff f99f 	bl	80033ba <ucg_DrawL90FXWithArg>
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <ucg_DrawHLine>:
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	4608      	mov	r0, r1
 800408e:	4611      	mov	r1, r2
 8004090:	461a      	mov	r2, r3
 8004092:	4603      	mov	r3, r0
 8004094:	817b      	strh	r3, [r7, #10]
 8004096:	460b      	mov	r3, r1
 8004098:	813b      	strh	r3, [r7, #8]
 800409a:	4613      	mov	r3, r2
 800409c:	80fb      	strh	r3, [r7, #6]
 800409e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80040a2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80040a6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80040aa:	2300      	movs	r3, #0
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	2300      	movs	r3, #0
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	4603      	mov	r3, r0
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f7ff ffa1 	bl	8003ffc <ucg_Draw90Line>
 80040ba:	bf00      	nop
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <ucg_DrawVLine>:
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b086      	sub	sp, #24
 80040c6:	af02      	add	r7, sp, #8
 80040c8:	60f8      	str	r0, [r7, #12]
 80040ca:	4608      	mov	r0, r1
 80040cc:	4611      	mov	r1, r2
 80040ce:	461a      	mov	r2, r3
 80040d0:	4603      	mov	r3, r0
 80040d2:	817b      	strh	r3, [r7, #10]
 80040d4:	460b      	mov	r3, r1
 80040d6:	813b      	strh	r3, [r7, #8]
 80040d8:	4613      	mov	r3, r2
 80040da:	80fb      	strh	r3, [r7, #6]
 80040dc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80040e0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80040e4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80040e8:	2300      	movs	r3, #0
 80040ea:	9301      	str	r3, [sp, #4]
 80040ec:	2301      	movs	r3, #1
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	4603      	mov	r3, r0
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f7ff ff82 	bl	8003ffc <ucg_Draw90Line>
 80040f8:	bf00      	nop
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <ucg_SetColor>:
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	4608      	mov	r0, r1
 800410a:	4611      	mov	r1, r2
 800410c:	461a      	mov	r2, r3
 800410e:	4603      	mov	r3, r0
 8004110:	70fb      	strb	r3, [r7, #3]
 8004112:	460b      	mov	r3, r1
 8004114:	70bb      	strb	r3, [r7, #2]
 8004116:	4613      	mov	r3, r2
 8004118:	707b      	strb	r3, [r7, #1]
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	4413      	add	r3, r2
 8004124:	440b      	add	r3, r1
 8004126:	333a      	adds	r3, #58	; 0x3a
 8004128:	78ba      	ldrb	r2, [r7, #2]
 800412a:	701a      	strb	r2, [r3, #0]
 800412c:	78fa      	ldrb	r2, [r7, #3]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	4413      	add	r3, r2
 8004136:	440b      	add	r3, r1
 8004138:	333b      	adds	r3, #59	; 0x3b
 800413a:	787a      	ldrb	r2, [r7, #1]
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	78fa      	ldrb	r2, [r7, #3]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	4413      	add	r3, r2
 8004148:	440b      	add	r3, r1
 800414a:	333c      	adds	r3, #60	; 0x3c
 800414c:	7c3a      	ldrb	r2, [r7, #16]
 800414e:	701a      	strb	r2, [r3, #0]
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <ucg_UndoRotate>:
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d006      	beq.n	800417a <ucg_UndoRotate+0x1e>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	611a      	str	r2, [r3, #16]
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff f90b 	bl	8003396 <ucg_GetDimension>
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff f8f0 	bl	8003366 <ucg_SetMaxClipRange>
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <ucg_rotate_180_xy>:
 800418e:	b480      	push	{r7}
 8004190:	b085      	sub	sp, #20
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	6039      	str	r1, [r7, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	8adb      	ldrh	r3, [r3, #22]
 800419c:	81fb      	strh	r3, [r7, #14]
 800419e:	89fa      	ldrh	r2, [r7, #14]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	81fb      	strh	r3, [r7, #14]
 80041ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	81fb      	strh	r3, [r7, #14]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	89fa      	ldrh	r2, [r7, #14]
 80041be:	805a      	strh	r2, [r3, #2]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8a9b      	ldrh	r3, [r3, #20]
 80041c4:	81bb      	strh	r3, [r7, #12]
 80041c6:	89ba      	ldrh	r2, [r7, #12]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	81bb      	strh	r3, [r7, #12]
 80041d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29b      	uxth	r3, r3
 80041e0:	81bb      	strh	r3, [r7, #12]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	89ba      	ldrh	r2, [r7, #12]
 80041e6:	801a      	strh	r2, [r3, #0]
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <ucg_dev_rotate180>:
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	460b      	mov	r3, r1
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	817b      	strh	r3, [r7, #10]
 8004202:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004206:	3b0c      	subs	r3, #12
 8004208:	2b0b      	cmp	r3, #11
 800420a:	d866      	bhi.n	80042da <ucg_dev_rotate180+0xe6>
 800420c:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <ucg_dev_rotate180+0x20>)
 800420e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004212:	bf00      	nop
 8004214:	08004263 	.word	0x08004263
 8004218:	080042db 	.word	0x080042db
 800421c:	080042db 	.word	0x080042db
 8004220:	08004245 	.word	0x08004245
 8004224:	080042db 	.word	0x080042db
 8004228:	080042db 	.word	0x080042db
 800422c:	080042db 	.word	0x080042db
 8004230:	080042db 	.word	0x080042db
 8004234:	080042ab 	.word	0x080042ab
 8004238:	080042ab 	.word	0x080042ab
 800423c:	080042db 	.word	0x080042db
 8004240:	080042ab 	.word	0x080042ab
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	3214      	adds	r2, #20
 800424c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	4798      	blx	r3
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	3314      	adds	r3, #20
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	6010      	str	r0, [r2, #0]
 800425e:	2301      	movs	r3, #1
 8004260:	e043      	b.n	80042ea <ucg_dev_rotate180+0xf6>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004268:	b29a      	uxth	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004270:	b29b      	uxth	r3, r3
 8004272:	4413      	add	r3, r2
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29b      	uxth	r3, r3
 800427a:	b21a      	sxth	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	805a      	strh	r2, [r3, #2]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004286:	b29a      	uxth	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800428e:	b29b      	uxth	r3, r3
 8004290:	4413      	add	r3, r2
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29b      	uxth	r3, r3
 8004298:	b21a      	sxth	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	801a      	strh	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4619      	mov	r1, r3
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f7ff ff73 	bl	800418e <ucg_rotate_180_xy>
 80042a8:	e017      	b.n	80042da <ucg_dev_rotate180+0xe6>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3302      	adds	r3, #2
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	b21a      	sxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	85da      	strh	r2, [r3, #46]	; 0x2e
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	b21a      	sxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	85da      	strh	r2, [r3, #46]	; 0x2e
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3324      	adds	r3, #36	; 0x24
 80042d0:	4619      	mov	r1, r3
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff ff5b 	bl	800418e <ucg_rotate_180_xy>
 80042d8:	bf00      	nop
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	4798      	blx	r3
 80042e8:	4603      	mov	r3, r0
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop

080042f4 <ucg_SetRotate180>:
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff ff2d 	bl	800415c <ucg_UndoRotate>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	611a      	str	r2, [r3, #16]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a05      	ldr	r2, [pc, #20]	; (8004324 <ucg_SetRotate180+0x30>)
 800430e:	609a      	str	r2, [r3, #8]
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff f840 	bl	8003396 <ucg_GetDimension>
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff f825 	bl	8003366 <ucg_SetMaxClipRange>
 800431c:	bf00      	nop
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	080041f5 	.word	0x080041f5

08004328 <bufInit>:
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	4611      	mov	r1, r2
 8004334:	461a      	mov	r2, r3
 8004336:	460b      	mov	r3, r1
 8004338:	71fb      	strb	r3, [r7, #7]
 800433a:	4613      	mov	r3, r2
 800433c:	80bb      	strh	r3, [r7, #4]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	88ba      	ldrh	r2, [r7, #4]
 8004342:	801a      	strh	r2, [r3, #0]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	79fa      	ldrb	r2, [r7, #7]
 8004348:	711a      	strb	r2, [r3, #4]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	60da      	str	r2, [r3, #12]
 8004350:	68b8      	ldr	r0, [r7, #8]
 8004352:	f000 f836 	bl	80043c2 <bufFlush>
 8004356:	bf00      	nop
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <bufNumItems>:
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	885b      	ldrh	r3, [r3, #2]
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <bufIsFull>:
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	885a      	ldrh	r2, [r3, #2]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	bf2c      	ite	cs
 800438a:	2301      	movcs	r3, #1
 800438c:	2300      	movcc	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	4618      	mov	r0, r3
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <bufIsEmpty>:
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	88da      	ldrh	r2, [r3, #6]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	891b      	ldrh	r3, [r3, #8]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	4618      	mov	r0, r3
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <bufFlush>:
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b082      	sub	sp, #8
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	80da      	strh	r2, [r3, #6]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	811a      	strh	r2, [r3, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	805a      	strh	r2, [r3, #2]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68d8      	ldr	r0, [r3, #12]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	2100      	movs	r1, #0
 80043e8:	f000 f894 	bl	8004514 <memsetl>
 80043ec:	bf00      	nop
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <bufEnDat>:
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
 80043fe:	b672      	cpsid	i
 8004400:	2300      	movs	r3, #0
 8004402:	73fb      	strb	r3, [r7, #15]
 8004404:	e021      	b.n	800444a <bufEnDat+0x56>
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	441a      	add	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	88c9      	ldrh	r1, [r1, #6]
 8004414:	440b      	add	r3, r1
 8004416:	7812      	ldrb	r2, [r2, #0]
 8004418:	701a      	strb	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	88db      	ldrh	r3, [r3, #6]
 800441e:	3301      	adds	r3, #1
 8004420:	b29b      	uxth	r3, r3
 8004422:	b21a      	sxth	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	3b01      	subs	r3, #1
 800442a:	b29b      	uxth	r3, r3
 800442c:	b21b      	sxth	r3, r3
 800442e:	4013      	ands	r3, r2
 8004430:	b21b      	sxth	r3, r3
 8004432:	b29a      	uxth	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	80da      	strh	r2, [r3, #6]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	885b      	ldrh	r3, [r3, #2]
 800443c:	3301      	adds	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	805a      	strh	r2, [r3, #2]
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	3301      	adds	r3, #1
 8004448:	73fb      	strb	r3, [r7, #15]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	791b      	ldrb	r3, [r3, #4]
 800444e:	7bfa      	ldrb	r2, [r7, #15]
 8004450:	429a      	cmp	r2, r3
 8004452:	d3d8      	bcc.n	8004406 <bufEnDat+0x12>
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff ff8e 	bl	8004376 <bufIsFull>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d011      	beq.n	8004484 <bufEnDat+0x90>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	891a      	ldrh	r2, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	791b      	ldrb	r3, [r3, #4]
 8004468:	b29b      	uxth	r3, r3
 800446a:	4413      	add	r3, r2
 800446c:	b29b      	uxth	r3, r3
 800446e:	b21a      	sxth	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	3b01      	subs	r3, #1
 8004476:	b29b      	uxth	r3, r3
 8004478:	b21b      	sxth	r3, r3
 800447a:	4013      	ands	r3, r2
 800447c:	b21b      	sxth	r3, r3
 800447e:	b29a      	uxth	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	811a      	strh	r2, [r3, #8]
 8004484:	b662      	cpsie	i
 8004486:	2300      	movs	r3, #0
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <bufDeDat>:
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
 800449a:	b672      	cpsid	i
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff ff7d 	bl	800439c <bufIsEmpty>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <bufDeDat+0x24>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	805a      	strh	r2, [r3, #2]
 80044ae:	b662      	cpsie	i
 80044b0:	2302      	movs	r3, #2
 80044b2:	e02b      	b.n	800450c <bufDeDat+0x7c>
 80044b4:	2300      	movs	r3, #0
 80044b6:	73fb      	strb	r3, [r7, #15]
 80044b8:	e021      	b.n	80044fe <bufDeDat+0x6e>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	8912      	ldrh	r2, [r2, #8]
 80044c2:	441a      	add	r2, r3
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	6839      	ldr	r1, [r7, #0]
 80044c8:	440b      	add	r3, r1
 80044ca:	7812      	ldrb	r2, [r2, #0]
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	891b      	ldrh	r3, [r3, #8]
 80044d2:	3301      	adds	r3, #1
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	b21a      	sxth	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29b      	uxth	r3, r3
 80044e0:	b21b      	sxth	r3, r3
 80044e2:	4013      	ands	r3, r2
 80044e4:	b21b      	sxth	r3, r3
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	811a      	strh	r2, [r3, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	885b      	ldrh	r3, [r3, #2]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	805a      	strh	r2, [r3, #2]
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	3301      	adds	r3, #1
 80044fc:	73fb      	strb	r3, [r7, #15]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	791b      	ldrb	r3, [r3, #4]
 8004502:	7bfa      	ldrb	r2, [r7, #15]
 8004504:	429a      	cmp	r2, r3
 8004506:	d3d8      	bcc.n	80044ba <bufDeDat+0x2a>
 8004508:	b662      	cpsie	i
 800450a:	2300      	movs	r3, #0
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <memsetl>:
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	70fb      	strb	r3, [r7, #3]
 8004520:	4613      	mov	r3, r2
 8004522:	803b      	strh	r3, [r7, #0]
 8004524:	e004      	b.n	8004530 <memsetl+0x1c>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	78fa      	ldrb	r2, [r7, #3]
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	883b      	ldrh	r3, [r7, #0]
 8004532:	1e5a      	subs	r2, r3, #1
 8004534:	803a      	strh	r2, [r7, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f5      	bne.n	8004526 <memsetl+0x12>
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
	...

08004548 <DMA_DeInit>:
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f023 0201 	bic.w	r2, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	605a      	str	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	609a      	str	r2, [r3, #8]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	60da      	str	r2, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	611a      	str	r2, [r3, #16]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2221      	movs	r2, #33	; 0x21
 800457e:	615a      	str	r2, [r3, #20]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a46      	ldr	r2, [pc, #280]	; (800469c <DMA_DeInit+0x154>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d103      	bne.n	8004590 <DMA_DeInit+0x48>
 8004588:	4b45      	ldr	r3, [pc, #276]	; (80046a0 <DMA_DeInit+0x158>)
 800458a:	223d      	movs	r2, #61	; 0x3d
 800458c:	609a      	str	r2, [r3, #8]
 800458e:	e07e      	b.n	800468e <DMA_DeInit+0x146>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a44      	ldr	r2, [pc, #272]	; (80046a4 <DMA_DeInit+0x15c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d104      	bne.n	80045a2 <DMA_DeInit+0x5a>
 8004598:	4b41      	ldr	r3, [pc, #260]	; (80046a0 <DMA_DeInit+0x158>)
 800459a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800459e:	609a      	str	r2, [r3, #8]
 80045a0:	e075      	b.n	800468e <DMA_DeInit+0x146>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a40      	ldr	r2, [pc, #256]	; (80046a8 <DMA_DeInit+0x160>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d104      	bne.n	80045b4 <DMA_DeInit+0x6c>
 80045aa:	4b3d      	ldr	r3, [pc, #244]	; (80046a0 <DMA_DeInit+0x158>)
 80045ac:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80045b0:	609a      	str	r2, [r3, #8]
 80045b2:	e06c      	b.n	800468e <DMA_DeInit+0x146>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a3d      	ldr	r2, [pc, #244]	; (80046ac <DMA_DeInit+0x164>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d104      	bne.n	80045c6 <DMA_DeInit+0x7e>
 80045bc:	4b38      	ldr	r3, [pc, #224]	; (80046a0 <DMA_DeInit+0x158>)
 80045be:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80045c2:	609a      	str	r2, [r3, #8]
 80045c4:	e063      	b.n	800468e <DMA_DeInit+0x146>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a39      	ldr	r2, [pc, #228]	; (80046b0 <DMA_DeInit+0x168>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d103      	bne.n	80045d6 <DMA_DeInit+0x8e>
 80045ce:	4b34      	ldr	r3, [pc, #208]	; (80046a0 <DMA_DeInit+0x158>)
 80045d0:	4a38      	ldr	r2, [pc, #224]	; (80046b4 <DMA_DeInit+0x16c>)
 80045d2:	60da      	str	r2, [r3, #12]
 80045d4:	e05b      	b.n	800468e <DMA_DeInit+0x146>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a37      	ldr	r2, [pc, #220]	; (80046b8 <DMA_DeInit+0x170>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d103      	bne.n	80045e6 <DMA_DeInit+0x9e>
 80045de:	4b30      	ldr	r3, [pc, #192]	; (80046a0 <DMA_DeInit+0x158>)
 80045e0:	4a36      	ldr	r2, [pc, #216]	; (80046bc <DMA_DeInit+0x174>)
 80045e2:	60da      	str	r2, [r3, #12]
 80045e4:	e053      	b.n	800468e <DMA_DeInit+0x146>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a35      	ldr	r2, [pc, #212]	; (80046c0 <DMA_DeInit+0x178>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d103      	bne.n	80045f6 <DMA_DeInit+0xae>
 80045ee:	4b2c      	ldr	r3, [pc, #176]	; (80046a0 <DMA_DeInit+0x158>)
 80045f0:	4a34      	ldr	r2, [pc, #208]	; (80046c4 <DMA_DeInit+0x17c>)
 80045f2:	60da      	str	r2, [r3, #12]
 80045f4:	e04b      	b.n	800468e <DMA_DeInit+0x146>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a33      	ldr	r2, [pc, #204]	; (80046c8 <DMA_DeInit+0x180>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d104      	bne.n	8004608 <DMA_DeInit+0xc0>
 80045fe:	4b28      	ldr	r3, [pc, #160]	; (80046a0 <DMA_DeInit+0x158>)
 8004600:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8004604:	60da      	str	r2, [r3, #12]
 8004606:	e042      	b.n	800468e <DMA_DeInit+0x146>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a30      	ldr	r2, [pc, #192]	; (80046cc <DMA_DeInit+0x184>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d103      	bne.n	8004618 <DMA_DeInit+0xd0>
 8004610:	4b2f      	ldr	r3, [pc, #188]	; (80046d0 <DMA_DeInit+0x188>)
 8004612:	223d      	movs	r2, #61	; 0x3d
 8004614:	609a      	str	r2, [r3, #8]
 8004616:	e03a      	b.n	800468e <DMA_DeInit+0x146>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a2e      	ldr	r2, [pc, #184]	; (80046d4 <DMA_DeInit+0x18c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d104      	bne.n	800462a <DMA_DeInit+0xe2>
 8004620:	4b2b      	ldr	r3, [pc, #172]	; (80046d0 <DMA_DeInit+0x188>)
 8004622:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8004626:	609a      	str	r2, [r3, #8]
 8004628:	e031      	b.n	800468e <DMA_DeInit+0x146>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a2a      	ldr	r2, [pc, #168]	; (80046d8 <DMA_DeInit+0x190>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d104      	bne.n	800463c <DMA_DeInit+0xf4>
 8004632:	4b27      	ldr	r3, [pc, #156]	; (80046d0 <DMA_DeInit+0x188>)
 8004634:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8004638:	609a      	str	r2, [r3, #8]
 800463a:	e028      	b.n	800468e <DMA_DeInit+0x146>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a27      	ldr	r2, [pc, #156]	; (80046dc <DMA_DeInit+0x194>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d104      	bne.n	800464e <DMA_DeInit+0x106>
 8004644:	4b22      	ldr	r3, [pc, #136]	; (80046d0 <DMA_DeInit+0x188>)
 8004646:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800464a:	609a      	str	r2, [r3, #8]
 800464c:	e01f      	b.n	800468e <DMA_DeInit+0x146>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a23      	ldr	r2, [pc, #140]	; (80046e0 <DMA_DeInit+0x198>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d103      	bne.n	800465e <DMA_DeInit+0x116>
 8004656:	4b1e      	ldr	r3, [pc, #120]	; (80046d0 <DMA_DeInit+0x188>)
 8004658:	4a16      	ldr	r2, [pc, #88]	; (80046b4 <DMA_DeInit+0x16c>)
 800465a:	60da      	str	r2, [r3, #12]
 800465c:	e017      	b.n	800468e <DMA_DeInit+0x146>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a20      	ldr	r2, [pc, #128]	; (80046e4 <DMA_DeInit+0x19c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d103      	bne.n	800466e <DMA_DeInit+0x126>
 8004666:	4b1a      	ldr	r3, [pc, #104]	; (80046d0 <DMA_DeInit+0x188>)
 8004668:	4a14      	ldr	r2, [pc, #80]	; (80046bc <DMA_DeInit+0x174>)
 800466a:	60da      	str	r2, [r3, #12]
 800466c:	e00f      	b.n	800468e <DMA_DeInit+0x146>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a1d      	ldr	r2, [pc, #116]	; (80046e8 <DMA_DeInit+0x1a0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d103      	bne.n	800467e <DMA_DeInit+0x136>
 8004676:	4b16      	ldr	r3, [pc, #88]	; (80046d0 <DMA_DeInit+0x188>)
 8004678:	4a12      	ldr	r2, [pc, #72]	; (80046c4 <DMA_DeInit+0x17c>)
 800467a:	60da      	str	r2, [r3, #12]
 800467c:	e007      	b.n	800468e <DMA_DeInit+0x146>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a1a      	ldr	r2, [pc, #104]	; (80046ec <DMA_DeInit+0x1a4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d103      	bne.n	800468e <DMA_DeInit+0x146>
 8004686:	4b12      	ldr	r3, [pc, #72]	; (80046d0 <DMA_DeInit+0x188>)
 8004688:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800468c:	60da      	str	r2, [r3, #12]
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40026010 	.word	0x40026010
 80046a0:	40026000 	.word	0x40026000
 80046a4:	40026028 	.word	0x40026028
 80046a8:	40026040 	.word	0x40026040
 80046ac:	40026058 	.word	0x40026058
 80046b0:	40026070 	.word	0x40026070
 80046b4:	2000003d 	.word	0x2000003d
 80046b8:	40026088 	.word	0x40026088
 80046bc:	20000f40 	.word	0x20000f40
 80046c0:	400260a0 	.word	0x400260a0
 80046c4:	203d0000 	.word	0x203d0000
 80046c8:	400260b8 	.word	0x400260b8
 80046cc:	40026410 	.word	0x40026410
 80046d0:	40026400 	.word	0x40026400
 80046d4:	40026428 	.word	0x40026428
 80046d8:	40026440 	.word	0x40026440
 80046dc:	40026458 	.word	0x40026458
 80046e0:	40026470 	.word	0x40026470
 80046e4:	40026488 	.word	0x40026488
 80046e8:	400264a0 	.word	0x400264a0
 80046ec:	400264b8 	.word	0x400264b8

080046f0 <DMA_Init>:
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4b25      	ldr	r3, [pc, #148]	; (800479c <DMA_Init+0xac>)
 8004708:	4013      	ands	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	431a      	orrs	r2, r3
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	431a      	orrs	r2, r3
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	431a      	orrs	r2, r3
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	431a      	orrs	r2, r3
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	431a      	orrs	r2, r3
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	431a      	orrs	r2, r3
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004738:	431a      	orrs	r2, r3
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473e:	431a      	orrs	r2, r3
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	4313      	orrs	r3, r2
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4313      	orrs	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0307 	bic.w	r3, r3, #7
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	4313      	orrs	r3, r2
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	615a      	str	r2, [r3, #20]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	605a      	str	r2, [r3, #4]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	609a      	str	r2, [r3, #8]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	60da      	str	r2, [r3, #12]
 800478e:	bf00      	nop
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	f01c803f 	.word	0xf01c803f

080047a0 <DMA_Cmd>:
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	70fb      	strb	r3, [r7, #3]
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d006      	beq.n	80047c0 <DMA_Cmd+0x20>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f043 0201 	orr.w	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	e005      	b.n	80047cc <DMA_Cmd+0x2c>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f023 0201 	bic.w	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <ucg_clip_is_x_visible>:
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80047e4:	81fb      	strh	r3, [r7, #14]
 80047e6:	89fa      	ldrh	r2, [r7, #14]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	81fb      	strh	r3, [r7, #14]
 80047f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	da01      	bge.n	8004802 <ucg_clip_is_x_visible+0x2a>
 80047fe:	2300      	movs	r3, #0
 8004800:	e009      	b.n	8004816 <ucg_clip_is_x_visible+0x3e>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8004808:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800480c:	429a      	cmp	r2, r3
 800480e:	db01      	blt.n	8004814 <ucg_clip_is_x_visible+0x3c>
 8004810:	2300      	movs	r3, #0
 8004812:	e000      	b.n	8004816 <ucg_clip_is_x_visible+0x3e>
 8004814:	2301      	movs	r3, #1
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <ucg_clip_is_y_visible>:
 8004822:	b480      	push	{r7}
 8004824:	b085      	sub	sp, #20
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800482e:	81fb      	strh	r3, [r7, #14]
 8004830:	89fa      	ldrh	r2, [r7, #14]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8004838:	b29b      	uxth	r3, r3
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	b29b      	uxth	r3, r3
 800483e:	81fb      	strh	r3, [r7, #14]
 8004840:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004844:	2b00      	cmp	r3, #0
 8004846:	da01      	bge.n	800484c <ucg_clip_is_y_visible+0x2a>
 8004848:	2300      	movs	r3, #0
 800484a:	e009      	b.n	8004860 <ucg_clip_is_y_visible+0x3e>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8004852:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004856:	429a      	cmp	r2, r3
 8004858:	db01      	blt.n	800485e <ucg_clip_is_y_visible+0x3c>
 800485a:	2300      	movs	r3, #0
 800485c:	e000      	b.n	8004860 <ucg_clip_is_y_visible+0x3e>
 800485e:	2301      	movs	r3, #1
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <ucg_clip_intersection>:
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	4611      	mov	r1, r2
 8004878:	461a      	mov	r2, r3
 800487a:	460b      	mov	r3, r1
 800487c:	80fb      	strh	r3, [r7, #6]
 800487e:	4613      	mov	r3, r2
 8004880:	80bb      	strh	r3, [r7, #4]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	82fb      	strh	r3, [r7, #22]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	82bb      	strh	r3, [r7, #20]
 800488e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004892:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004896:	429a      	cmp	r2, r3
 8004898:	db01      	blt.n	800489e <ucg_clip_intersection+0x32>
 800489a:	2300      	movs	r3, #0
 800489c:	e01a      	b.n	80048d4 <ucg_clip_intersection+0x68>
 800489e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80048a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	dc01      	bgt.n	80048ae <ucg_clip_intersection+0x42>
 80048aa:	2300      	movs	r3, #0
 80048ac:	e012      	b.n	80048d4 <ucg_clip_intersection+0x68>
 80048ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80048b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	da02      	bge.n	80048c0 <ucg_clip_intersection+0x54>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	88fa      	ldrh	r2, [r7, #6]
 80048be:	801a      	strh	r2, [r3, #0]
 80048c0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80048c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	dd02      	ble.n	80048d2 <ucg_clip_intersection+0x66>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	88ba      	ldrh	r2, [r7, #4]
 80048d0:	801a      	strh	r2, [r3, #0]
 80048d2:	2301      	movs	r3, #1
 80048d4:	4618      	mov	r0, r3
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <ucg_clip_is_pixel_visible>:
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff ff75 	bl	80047d8 <ucg_clip_is_x_visible>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <ucg_clip_is_pixel_visible+0x18>
 80048f4:	2300      	movs	r3, #0
 80048f6:	e008      	b.n	800490a <ucg_clip_is_pixel_visible+0x2a>
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff ff92 	bl	8004822 <ucg_clip_is_y_visible>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <ucg_clip_is_pixel_visible+0x28>
 8004904:	2300      	movs	r3, #0
 8004906:	e000      	b.n	800490a <ucg_clip_is_pixel_visible+0x2a>
 8004908:	2301      	movs	r3, #1
 800490a:	4618      	mov	r0, r3
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
	...

08004914 <ucg_clip_l90fx>:
 8004914:	b590      	push	{r4, r7, lr}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	861a      	strh	r2, [r3, #48]	; 0x30
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8004928:	2b03      	cmp	r3, #3
 800492a:	f200 816d 	bhi.w	8004c08 <ucg_clip_l90fx+0x2f4>
 800492e:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <ucg_clip_l90fx+0x20>)
 8004930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004934:	08004945 	.word	0x08004945
 8004938:	080049eb 	.word	0x080049eb
 800493c:	08004a91 	.word	0x08004a91
 8004940:	08004b4d 	.word	0x08004b4d
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff ff6c 	bl	8004822 <ucg_clip_is_y_visible>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <ucg_clip_l90fx+0x40>
 8004950:	2300      	movs	r3, #0
 8004952:	e15a      	b.n	8004c0a <ucg_clip_l90fx+0x2f6>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800495a:	81fb      	strh	r3, [r7, #14]
 800495c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004960:	81bb      	strh	r3, [r7, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004968:	b29a      	uxth	r2, r3
 800496a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800496e:	b29b      	uxth	r3, r3
 8004970:	4413      	add	r3, r2
 8004972:	b29b      	uxth	r3, r3
 8004974:	b21b      	sxth	r3, r3
 8004976:	81bb      	strh	r3, [r7, #12]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8004984:	b29a      	uxth	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 800498c:	b29b      	uxth	r3, r3
 800498e:	4413      	add	r3, r2
 8004990:	b29b      	uxth	r3, r3
 8004992:	b21b      	sxth	r3, r3
 8004994:	f107 010c 	add.w	r1, r7, #12
 8004998:	f107 000e 	add.w	r0, r7, #14
 800499c:	4622      	mov	r2, r4
 800499e:	f7ff ff65 	bl	800486c <ucg_clip_intersection>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <ucg_clip_l90fx+0x98>
 80049a8:	2300      	movs	r3, #0
 80049aa:	e12e      	b.n	8004c0a <ucg_clip_l90fx+0x2f6>
 80049ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	b29b      	uxth	r3, r3
 80049be:	b21a      	sxth	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	861a      	strh	r2, [r3, #48]	; 0x30
 80049c4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	849a      	strh	r2, [r3, #36]	; 0x24
 80049cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	b29b      	uxth	r3, r3
 80049dc:	b21b      	sxth	r3, r3
 80049de:	81bb      	strh	r3, [r7, #12]
 80049e0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	859a      	strh	r2, [r3, #44]	; 0x2c
 80049e8:	e10e      	b.n	8004c08 <ucg_clip_l90fx+0x2f4>
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff fef4 	bl	80047d8 <ucg_clip_is_x_visible>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <ucg_clip_l90fx+0xe6>
 80049f6:	2300      	movs	r3, #0
 80049f8:	e107      	b.n	8004c0a <ucg_clip_l90fx+0x2f6>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004a00:	81fb      	strh	r3, [r7, #14]
 8004a02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a06:	81bb      	strh	r3, [r7, #12]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	4413      	add	r3, r2
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	b21b      	sxth	r3, r3
 8004a1c:	81bb      	strh	r3, [r7, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	4413      	add	r3, r2
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	b21b      	sxth	r3, r3
 8004a3a:	f107 010c 	add.w	r1, r7, #12
 8004a3e:	f107 000e 	add.w	r0, r7, #14
 8004a42:	4622      	mov	r2, r4
 8004a44:	f7ff ff12 	bl	800486c <ucg_clip_intersection>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <ucg_clip_l90fx+0x13e>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e0db      	b.n	8004c0a <ucg_clip_l90fx+0x2f6>
 8004a52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	b21a      	sxth	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	861a      	strh	r2, [r3, #48]	; 0x30
 8004a6a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	84da      	strh	r2, [r3, #38]	; 0x26
 8004a72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	b21b      	sxth	r3, r3
 8004a84:	81bb      	strh	r3, [r7, #12]
 8004a86:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004a8e:	e0bb      	b.n	8004c08 <ucg_clip_l90fx+0x2f4>
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff fec6 	bl	8004822 <ucg_clip_is_y_visible>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <ucg_clip_l90fx+0x18c>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	e0b4      	b.n	8004c0a <ucg_clip_l90fx+0x2f6>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004aa6:	81bb      	strh	r3, [r7, #12]
 8004aa8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3301      	adds	r3, #1
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	b21b      	sxth	r3, r3
 8004ab4:	81bb      	strh	r3, [r7, #12]
 8004ab6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004aba:	81fb      	strh	r3, [r7, #14]
 8004abc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	b21b      	sxth	r3, r3
 8004ad0:	81fb      	strh	r3, [r7, #14]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	4413      	add	r3, r2
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	b21b      	sxth	r3, r3
 8004aee:	f107 010c 	add.w	r1, r7, #12
 8004af2:	f107 000e 	add.w	r0, r7, #14
 8004af6:	4622      	mov	r2, r4
 8004af8:	f7ff feb8 	bl	800486c <ucg_clip_intersection>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <ucg_clip_l90fx+0x1f2>
 8004b02:	2300      	movs	r3, #0
 8004b04:	e081      	b.n	8004c0a <ucg_clip_l90fx+0x2f6>
 8004b06:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	b21a      	sxth	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004b1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	b21b      	sxth	r3, r3
 8004b28:	81bb      	strh	r3, [r7, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	b21a      	sxth	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	861a      	strh	r2, [r3, #48]	; 0x30
 8004b42:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	849a      	strh	r2, [r3, #36]	; 0x24
 8004b4a:	e05d      	b.n	8004c08 <ucg_clip_l90fx+0x2f4>
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff fe43 	bl	80047d8 <ucg_clip_is_x_visible>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <ucg_clip_l90fx+0x248>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	e056      	b.n	8004c0a <ucg_clip_l90fx+0x2f6>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004b62:	81bb      	strh	r3, [r7, #12]
 8004b64:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	b21b      	sxth	r3, r3
 8004b70:	81bb      	strh	r3, [r7, #12]
 8004b72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b76:	81fb      	strh	r3, [r7, #14]
 8004b78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	b21b      	sxth	r3, r3
 8004b8c:	81fb      	strh	r3, [r7, #14]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	4413      	add	r3, r2
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	b21b      	sxth	r3, r3
 8004baa:	f107 010c 	add.w	r1, r7, #12
 8004bae:	f107 000e 	add.w	r0, r7, #14
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	f7ff fe5a 	bl	800486c <ucg_clip_intersection>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <ucg_clip_l90fx+0x2ae>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e023      	b.n	8004c0a <ucg_clip_l90fx+0x2f6>
 8004bc2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	b21a      	sxth	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004bd8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	b21b      	sxth	r3, r3
 8004be4:	81bb      	strh	r3, [r7, #12]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	b21a      	sxth	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	861a      	strh	r2, [r3, #48]	; 0x30
 8004bfe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	84da      	strh	r2, [r3, #38]	; 0x26
 8004c06:	bf00      	nop
 8004c08:	2301      	movs	r3, #1
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd90      	pop	{r4, r7, pc}
 8004c12:	bf00      	nop

08004c14 <ucg_clip_l90se>:
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff fe79 	bl	8004914 <ucg_clip_l90fx>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <ucg_clip_l90se+0x18>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	e019      	b.n	8004c60 <ucg_clip_l90se+0x4c>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	73fb      	strb	r3, [r7, #15]
 8004c30:	e012      	b.n	8004c58 <ucg_clip_l90se+0x44>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8004c38:	7bfa      	ldrb	r2, [r7, #15]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	18ca      	adds	r2, r1, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	f7fe f907 	bl	8002e60 <ucg_ccs_seek>
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
 8004c54:	3301      	adds	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d9e9      	bls.n	8004c32 <ucg_clip_l90se+0x1e>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <ucg_com_PowerDown>:
 8004c68:	b590      	push	{r4, r7, lr}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d006      	beq.n	8004c8c <ucg_com_PowerDown+0x24>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69dc      	ldr	r4, [r3, #28]
 8004c82:	2300      	movs	r3, #0
 8004c84:	2200      	movs	r2, #0
 8004c86:	210b      	movs	r1, #11
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	47a0      	blx	r4
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8004c92:	f023 0308 	bic.w	r3, r3, #8
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd90      	pop	{r4, r7, pc}

08004ca6 <ucg_com_PowerUp>:
 8004ca6:	b590      	push	{r4, r7, lr}
 8004ca8:	b085      	sub	sp, #20
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	807b      	strh	r3, [r7, #2]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	803b      	strh	r3, [r7, #0]
 8004cb6:	887b      	ldrh	r3, [r7, #2]
 8004cb8:	813b      	strh	r3, [r7, #8]
 8004cba:	883b      	ldrh	r3, [r7, #0]
 8004cbc:	817b      	strh	r3, [r7, #10]
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff ffd2 	bl	8004c68 <ucg_com_PowerDown>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	69dc      	ldr	r4, [r3, #28]
 8004cd0:	f107 0308 	add.w	r3, r7, #8
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	210a      	movs	r1, #10
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	47a0      	blx	r4
 8004cdc:	4603      	mov	r3, r0
 8004cde:	81fb      	strh	r3, [r7, #14]
 8004ce0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d008      	beq.n	8004cfa <ucg_com_PowerUp+0x54>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8004cee:	f043 0308 	orr.w	r3, r3, #8
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8004cfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd90      	pop	{r4, r7, pc}

08004d06 <ucg_com_SetLineStatus>:
 8004d06:	b590      	push	{r4, r7, lr}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	4608      	mov	r0, r1
 8004d10:	4611      	mov	r1, r2
 8004d12:	461a      	mov	r2, r3
 8004d14:	4603      	mov	r3, r0
 8004d16:	70fb      	strb	r3, [r7, #3]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	70bb      	strb	r3, [r7, #2]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	707b      	strb	r3, [r7, #1]
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d131      	bne.n	8004d8a <ucg_com_SetLineStatus+0x84>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8004d2c:	78bb      	ldrb	r3, [r7, #2]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d008      	beq.n	8004d48 <ucg_com_SetLineStatus+0x42>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8004d3c:	78bb      	ldrb	r3, [r7, #2]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	78ba      	ldrb	r2, [r7, #2]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d14b      	bne.n	8004de0 <ucg_com_SetLineStatus+0xda>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69dc      	ldr	r4, [r3, #28]
 8004d4c:	787b      	ldrb	r3, [r7, #1]
 8004d4e:	b219      	sxth	r1, r3
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	2300      	movs	r3, #0
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	47a0      	blx	r4
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8004d60:	b25a      	sxtb	r2, r3
 8004d62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d66:	43db      	mvns	r3, r3
 8004d68:	b25b      	sxtb	r3, r3
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	b25b      	sxtb	r3, r3
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8004d7c:	78bb      	ldrb	r3, [r7, #2]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8004d88:	e02a      	b.n	8004de0 <ucg_com_SetLineStatus+0xda>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8004d90:	78bb      	ldrb	r3, [r7, #2]
 8004d92:	4013      	ands	r3, r2
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d007      	beq.n	8004daa <ucg_com_SetLineStatus+0xa4>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8004da0:	78bb      	ldrb	r3, [r7, #2]
 8004da2:	4013      	ands	r3, r2
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d11a      	bne.n	8004de0 <ucg_com_SetLineStatus+0xda>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69dc      	ldr	r4, [r3, #28]
 8004dae:	787b      	ldrb	r3, [r7, #1]
 8004db0:	b219      	sxth	r1, r3
 8004db2:	78fb      	ldrb	r3, [r7, #3]
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	2300      	movs	r3, #0
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	47a0      	blx	r4
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8004dc2:	78bb      	ldrb	r3, [r7, #2]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8004dd4:	78bb      	ldrb	r3, [r7, #2]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd90      	pop	{r4, r7, pc}

08004de8 <ucg_com_SetResetLineStatus>:
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	70fb      	strb	r3, [r7, #3]
 8004df4:	78f9      	ldrb	r1, [r7, #3]
 8004df6:	230d      	movs	r3, #13
 8004df8:	2204      	movs	r2, #4
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7ff ff83 	bl	8004d06 <ucg_com_SetLineStatus>
 8004e00:	bf00      	nop
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <ucg_com_SetCSLineStatus>:
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	70fb      	strb	r3, [r7, #3]
 8004e14:	78f9      	ldrb	r1, [r7, #3]
 8004e16:	230e      	movs	r3, #14
 8004e18:	2202      	movs	r2, #2
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff ff73 	bl	8004d06 <ucg_com_SetLineStatus>
 8004e20:	bf00      	nop
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <ucg_com_SetCDLineStatus>:
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	460b      	mov	r3, r1
 8004e32:	70fb      	strb	r3, [r7, #3]
 8004e34:	78f9      	ldrb	r1, [r7, #3]
 8004e36:	230f      	movs	r3, #15
 8004e38:	2201      	movs	r2, #1
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff ff63 	bl	8004d06 <ucg_com_SetLineStatus>
 8004e40:	bf00      	nop
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <ucg_com_DelayMicroseconds>:
 8004e48:	b590      	push	{r4, r7, lr}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	807b      	strh	r3, [r7, #2]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	69dc      	ldr	r4, [r3, #28]
 8004e58:	887a      	ldrh	r2, [r7, #2]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	210c      	movs	r1, #12
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	47a0      	blx	r4
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd90      	pop	{r4, r7, pc}

08004e6a <ucg_com_DelayMilliseconds>:
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b082      	sub	sp, #8
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	460b      	mov	r3, r1
 8004e74:	807b      	strh	r3, [r7, #2]
 8004e76:	e007      	b.n	8004e88 <ucg_com_DelayMilliseconds+0x1e>
 8004e78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff ffe3 	bl	8004e48 <ucg_com_DelayMicroseconds>
 8004e82:	887b      	ldrh	r3, [r7, #2]
 8004e84:	3b01      	subs	r3, #1
 8004e86:	807b      	strh	r3, [r7, #2]
 8004e88:	887b      	ldrh	r3, [r7, #2]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f4      	bne.n	8004e78 <ucg_com_DelayMilliseconds+0xe>
 8004e8e:	bf00      	nop
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <ucg_com_SendByte>:
 8004e96:	b590      	push	{r4, r7, lr}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	70fb      	strb	r3, [r7, #3]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69dc      	ldr	r4, [r3, #28]
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	2300      	movs	r3, #0
 8004eac:	2110      	movs	r1, #16
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	47a0      	blx	r4
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd90      	pop	{r4, r7, pc}

08004eba <ucg_com_SendStringP>:
 8004eba:	b590      	push	{r4, r7, lr}
 8004ebc:	b087      	sub	sp, #28
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	607a      	str	r2, [r7, #4]
 8004ec6:	817b      	strh	r3, [r7, #10]
 8004ec8:	e010      	b.n	8004eec <ucg_com_SendStringP+0x32>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	75fb      	strb	r3, [r7, #23]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	69dc      	ldr	r4, [r3, #28]
 8004ed4:	7dfb      	ldrb	r3, [r7, #23]
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	2300      	movs	r3, #0
 8004eda:	2110      	movs	r1, #16
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	47a0      	blx	r4
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	607b      	str	r3, [r7, #4]
 8004ee6:	897b      	ldrh	r3, [r7, #10]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	817b      	strh	r3, [r7, #10]
 8004eec:	897b      	ldrh	r3, [r7, #10]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1eb      	bne.n	8004eca <ucg_com_SendStringP+0x10>
 8004ef2:	bf00      	nop
 8004ef4:	371c      	adds	r7, #28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd90      	pop	{r4, r7, pc}

08004efa <ucg_com_SendCmdArg>:
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	4611      	mov	r1, r2
 8004f06:	461a      	mov	r2, r3
 8004f08:	460b      	mov	r3, r1
 8004f0a:	71fb      	strb	r3, [r7, #7]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	71bb      	strb	r3, [r7, #6]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004f16:	085b      	lsrs	r3, r3, #1
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	4619      	mov	r1, r3
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f7ff ff80 	bl	8004e28 <ucg_com_SetCDLineStatus>
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	4619      	mov	r1, r3
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f7ff ffc2 	bl	8004eba <ucg_com_SendStringP>
 8004f36:	79bb      	ldrb	r3, [r7, #6]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d014      	beq.n	8004f66 <ucg_com_SendCmdArg+0x6c>
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	4413      	add	r3, r2
 8004f42:	60bb      	str	r3, [r7, #8]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	4619      	mov	r1, r3
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f7ff ff68 	bl	8004e28 <ucg_com_SetCDLineStatus>
 8004f58:	79bb      	ldrb	r3, [r7, #6]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	4619      	mov	r1, r3
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f7ff ffaa 	bl	8004eba <ucg_com_SendStringP>
 8004f66:	bf00      	nop
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <ucg_com_SendCmdSeq>:
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	73fb      	strb	r3, [r7, #15]
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	091b      	lsrs	r3, r3, #4
 8004f84:	73bb      	strb	r3, [r7, #14]
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	f003 030f 	and.w	r3, r3, #15
 8004f8c:	737b      	strb	r3, [r7, #13]
 8004f8e:	7bbb      	ldrb	r3, [r7, #14]
 8004f90:	2b0f      	cmp	r3, #15
 8004f92:	f200 8124 	bhi.w	80051de <ucg_com_SendCmdSeq+0x26e>
 8004f96:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <ucg_com_SendCmdSeq+0x2c>)
 8004f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9c:	080051df 	.word	0x080051df
 8004fa0:	08004fdd 	.word	0x08004fdd
 8004fa4:	08004fdd 	.word	0x08004fdd
 8004fa8:	08004fdd 	.word	0x08004fdd
 8004fac:	080051df 	.word	0x080051df
 8004fb0:	080051df 	.word	0x080051df
 8004fb4:	08004ffd 	.word	0x08004ffd
 8004fb8:	0800502f 	.word	0x0800502f
 8004fbc:	08005073 	.word	0x08005073
 8004fc0:	0800509f 	.word	0x0800509f
 8004fc4:	080050cb 	.word	0x080050cb
 8004fc8:	0800512b 	.word	0x0800512b
 8004fcc:	080051df 	.word	0x080051df
 8004fd0:	080051df 	.word	0x080051df
 8004fd4:	080051df 	.word	0x080051df
 8004fd8:	0800518b 	.word	0x0800518b
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	1c59      	adds	r1, r3, #1
 8004fe0:	7b7b      	ldrb	r3, [r7, #13]
 8004fe2:	7bba      	ldrb	r2, [r7, #14]
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7ff ff88 	bl	8004efa <ucg_com_SendCmdArg>
 8004fea:	7bbb      	ldrb	r3, [r7, #14]
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	7b7b      	ldrb	r3, [r7, #13]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	603b      	str	r3, [r7, #0]
 8004ffa:	e0ef      	b.n	80051dc <ucg_com_SendCmdSeq+0x26c>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	b2db      	uxtb	r3, r3
 8005008:	4619      	mov	r1, r3
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7ff ff0c 	bl	8004e28 <ucg_com_SetCDLineStatus>
 8005010:	7b7b      	ldrb	r3, [r7, #13]
 8005012:	b299      	uxth	r1, r3
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	3301      	adds	r3, #1
 8005018:	461a      	mov	r2, r3
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7ff ff4d 	bl	8004eba <ucg_com_SendStringP>
 8005020:	7b7b      	ldrb	r3, [r7, #13]
 8005022:	3301      	adds	r3, #1
 8005024:	461a      	mov	r2, r3
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	4413      	add	r3, r2
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	e0d6      	b.n	80051dc <ucg_com_SendCmdSeq+0x26c>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005034:	085b      	lsrs	r3, r3, #1
 8005036:	b2db      	uxtb	r3, r3
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	bf0c      	ite	eq
 8005040:	2301      	moveq	r3, #1
 8005042:	2300      	movne	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	4619      	mov	r1, r3
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff feed 	bl	8004e28 <ucg_com_SetCDLineStatus>
 800504e:	7b7b      	ldrb	r3, [r7, #13]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d007      	beq.n	8005064 <ucg_com_SendCmdSeq+0xf4>
 8005054:	7b7b      	ldrb	r3, [r7, #13]
 8005056:	b299      	uxth	r1, r3
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	3301      	adds	r3, #1
 800505c:	461a      	mov	r2, r3
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7ff ff2b 	bl	8004eba <ucg_com_SendStringP>
 8005064:	7b7b      	ldrb	r3, [r7, #13]
 8005066:	3301      	adds	r3, #1
 8005068:	461a      	mov	r2, r3
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	4413      	add	r3, r2
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	e0b4      	b.n	80051dc <ucg_com_SendCmdSeq+0x26c>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	3301      	adds	r3, #1
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	73fb      	strb	r3, [r7, #15]
 800507e:	7b7b      	ldrb	r3, [r7, #13]
 8005080:	b29b      	uxth	r3, r3
 8005082:	021b      	lsls	r3, r3, #8
 8005084:	b29a      	uxth	r2, r3
 8005086:	7bfb      	ldrb	r3, [r7, #15]
 8005088:	b29b      	uxth	r3, r3
 800508a:	4413      	add	r3, r2
 800508c:	b29b      	uxth	r3, r3
 800508e:	4619      	mov	r1, r3
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff feea 	bl	8004e6a <ucg_com_DelayMilliseconds>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	3301      	adds	r3, #1
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	e09e      	b.n	80051dc <ucg_com_SendCmdSeq+0x26c>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	3301      	adds	r3, #1
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	73fb      	strb	r3, [r7, #15]
 80050aa:	7b7b      	ldrb	r3, [r7, #13]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	021b      	lsls	r3, r3, #8
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	4413      	add	r3, r2
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	4619      	mov	r1, r3
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff fec3 	bl	8004e48 <ucg_com_DelayMicroseconds>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	3301      	adds	r3, #1
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	e088      	b.n	80051dc <ucg_com_SendCmdSeq+0x26c>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	3301      	adds	r3, #1
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	73fb      	strb	r3, [r7, #15]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	3301      	adds	r3, #1
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	733b      	strb	r3, [r7, #12]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	3301      	adds	r3, #1
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	4619      	mov	r1, r3
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7ff fe96 	bl	8004e28 <ucg_com_SetCDLineStatus>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8005102:	461a      	mov	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800510a:	441a      	add	r2, r3
 800510c:	7b7b      	ldrb	r3, [r7, #13]
 800510e:	fa42 f303 	asr.w	r3, r2, r3
 8005112:	b2da      	uxtb	r2, r3
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	4013      	ands	r3, r2
 8005118:	b2da      	uxtb	r2, r3
 800511a:	7b3b      	ldrb	r3, [r7, #12]
 800511c:	4313      	orrs	r3, r2
 800511e:	b2db      	uxtb	r3, r3
 8005120:	4619      	mov	r1, r3
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7ff feb7 	bl	8004e96 <ucg_com_SendByte>
 8005128:	e058      	b.n	80051dc <ucg_com_SendCmdSeq+0x26c>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	3301      	adds	r3, #1
 800512e:	603b      	str	r3, [r7, #0]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	73fb      	strb	r3, [r7, #15]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	3301      	adds	r3, #1
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	733b      	strb	r3, [r7, #12]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	3301      	adds	r3, #1
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	b2db      	uxtb	r3, r3
 8005154:	4619      	mov	r1, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff fe66 	bl	8004e28 <ucg_com_SetCDLineStatus>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8005162:	461a      	mov	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800516a:	441a      	add	r2, r3
 800516c:	7b7b      	ldrb	r3, [r7, #13]
 800516e:	fa42 f303 	asr.w	r3, r2, r3
 8005172:	b2da      	uxtb	r2, r3
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	4013      	ands	r3, r2
 8005178:	b2da      	uxtb	r2, r3
 800517a:	7b3b      	ldrb	r3, [r7, #12]
 800517c:	4313      	orrs	r3, r2
 800517e:	b2db      	uxtb	r3, r3
 8005180:	4619      	mov	r1, r3
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff fe87 	bl	8004e96 <ucg_com_SendByte>
 8005188:	e028      	b.n	80051dc <ucg_com_SendCmdSeq+0x26c>
 800518a:	7b7b      	ldrb	r3, [r7, #13]
 800518c:	089b      	lsrs	r3, r3, #2
 800518e:	73bb      	strb	r3, [r7, #14]
 8005190:	7b7b      	ldrb	r3, [r7, #13]
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	737b      	strb	r3, [r7, #13]
 8005198:	7bbb      	ldrb	r3, [r7, #14]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d00c      	beq.n	80051b8 <ucg_com_SendCmdSeq+0x248>
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d013      	beq.n	80051ca <ucg_com_SendCmdSeq+0x25a>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d116      	bne.n	80051d4 <ucg_com_SendCmdSeq+0x264>
 80051a6:	7b7b      	ldrb	r3, [r7, #13]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	4619      	mov	r1, r3
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7ff fe19 	bl	8004de8 <ucg_com_SetResetLineStatus>
 80051b6:	e00d      	b.n	80051d4 <ucg_com_SendCmdSeq+0x264>
 80051b8:	7b7b      	ldrb	r3, [r7, #13]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	4619      	mov	r1, r3
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7ff fe20 	bl	8004e08 <ucg_com_SetCSLineStatus>
 80051c8:	e004      	b.n	80051d4 <ucg_com_SendCmdSeq+0x264>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	7b7a      	ldrb	r2, [r7, #13]
 80051ce:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 80051d2:	bf00      	nop
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	3301      	adds	r3, #1
 80051d8:	603b      	str	r3, [r7, #0]
 80051da:	bf00      	nop
 80051dc:	e6cd      	b.n	8004f7a <ucg_com_SendCmdSeq+0xa>
 80051de:	bf00      	nop
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop

080051e8 <siprintf>:
 80051e8:	b40e      	push	{r1, r2, r3}
 80051ea:	b500      	push	{lr}
 80051ec:	b09c      	sub	sp, #112	; 0x70
 80051ee:	ab1d      	add	r3, sp, #116	; 0x74
 80051f0:	9002      	str	r0, [sp, #8]
 80051f2:	9006      	str	r0, [sp, #24]
 80051f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051f8:	4809      	ldr	r0, [pc, #36]	; (8005220 <siprintf+0x38>)
 80051fa:	9107      	str	r1, [sp, #28]
 80051fc:	9104      	str	r1, [sp, #16]
 80051fe:	4909      	ldr	r1, [pc, #36]	; (8005224 <siprintf+0x3c>)
 8005200:	f853 2b04 	ldr.w	r2, [r3], #4
 8005204:	9105      	str	r1, [sp, #20]
 8005206:	6800      	ldr	r0, [r0, #0]
 8005208:	9301      	str	r3, [sp, #4]
 800520a:	a902      	add	r1, sp, #8
 800520c:	f000 f992 	bl	8005534 <_svfiprintf_r>
 8005210:	9b02      	ldr	r3, [sp, #8]
 8005212:	2200      	movs	r2, #0
 8005214:	701a      	strb	r2, [r3, #0]
 8005216:	b01c      	add	sp, #112	; 0x70
 8005218:	f85d eb04 	ldr.w	lr, [sp], #4
 800521c:	b003      	add	sp, #12
 800521e:	4770      	bx	lr
 8005220:	200005e4 	.word	0x200005e4
 8005224:	ffff0208 	.word	0xffff0208

08005228 <memset>:
 8005228:	4402      	add	r2, r0
 800522a:	4603      	mov	r3, r0
 800522c:	4293      	cmp	r3, r2
 800522e:	d100      	bne.n	8005232 <memset+0xa>
 8005230:	4770      	bx	lr
 8005232:	f803 1b01 	strb.w	r1, [r3], #1
 8005236:	e7f9      	b.n	800522c <memset+0x4>

08005238 <__errno>:
 8005238:	4b01      	ldr	r3, [pc, #4]	; (8005240 <__errno+0x8>)
 800523a:	6818      	ldr	r0, [r3, #0]
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	200005e4 	.word	0x200005e4

08005244 <__libc_init_array>:
 8005244:	b570      	push	{r4, r5, r6, lr}
 8005246:	4d0d      	ldr	r5, [pc, #52]	; (800527c <__libc_init_array+0x38>)
 8005248:	4c0d      	ldr	r4, [pc, #52]	; (8005280 <__libc_init_array+0x3c>)
 800524a:	1b64      	subs	r4, r4, r5
 800524c:	10a4      	asrs	r4, r4, #2
 800524e:	2600      	movs	r6, #0
 8005250:	42a6      	cmp	r6, r4
 8005252:	d109      	bne.n	8005268 <__libc_init_array+0x24>
 8005254:	4d0b      	ldr	r5, [pc, #44]	; (8005284 <__libc_init_array+0x40>)
 8005256:	4c0c      	ldr	r4, [pc, #48]	; (8005288 <__libc_init_array+0x44>)
 8005258:	f000 fc6a 	bl	8005b30 <_init>
 800525c:	1b64      	subs	r4, r4, r5
 800525e:	10a4      	asrs	r4, r4, #2
 8005260:	2600      	movs	r6, #0
 8005262:	42a6      	cmp	r6, r4
 8005264:	d105      	bne.n	8005272 <__libc_init_array+0x2e>
 8005266:	bd70      	pop	{r4, r5, r6, pc}
 8005268:	f855 3b04 	ldr.w	r3, [r5], #4
 800526c:	4798      	blx	r3
 800526e:	3601      	adds	r6, #1
 8005270:	e7ee      	b.n	8005250 <__libc_init_array+0xc>
 8005272:	f855 3b04 	ldr.w	r3, [r5], #4
 8005276:	4798      	blx	r3
 8005278:	3601      	adds	r6, #1
 800527a:	e7f2      	b.n	8005262 <__libc_init_array+0x1e>
 800527c:	0800619c 	.word	0x0800619c
 8005280:	0800619c 	.word	0x0800619c
 8005284:	0800619c 	.word	0x0800619c
 8005288:	080061a0 	.word	0x080061a0

0800528c <__retarget_lock_acquire_recursive>:
 800528c:	4770      	bx	lr

0800528e <__retarget_lock_release_recursive>:
 800528e:	4770      	bx	lr

08005290 <_free_r>:
 8005290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005292:	2900      	cmp	r1, #0
 8005294:	d044      	beq.n	8005320 <_free_r+0x90>
 8005296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800529a:	9001      	str	r0, [sp, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	f1a1 0404 	sub.w	r4, r1, #4
 80052a2:	bfb8      	it	lt
 80052a4:	18e4      	addlt	r4, r4, r3
 80052a6:	f000 f8df 	bl	8005468 <__malloc_lock>
 80052aa:	4a1e      	ldr	r2, [pc, #120]	; (8005324 <_free_r+0x94>)
 80052ac:	9801      	ldr	r0, [sp, #4]
 80052ae:	6813      	ldr	r3, [r2, #0]
 80052b0:	b933      	cbnz	r3, 80052c0 <_free_r+0x30>
 80052b2:	6063      	str	r3, [r4, #4]
 80052b4:	6014      	str	r4, [r2, #0]
 80052b6:	b003      	add	sp, #12
 80052b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052bc:	f000 b8da 	b.w	8005474 <__malloc_unlock>
 80052c0:	42a3      	cmp	r3, r4
 80052c2:	d908      	bls.n	80052d6 <_free_r+0x46>
 80052c4:	6825      	ldr	r5, [r4, #0]
 80052c6:	1961      	adds	r1, r4, r5
 80052c8:	428b      	cmp	r3, r1
 80052ca:	bf01      	itttt	eq
 80052cc:	6819      	ldreq	r1, [r3, #0]
 80052ce:	685b      	ldreq	r3, [r3, #4]
 80052d0:	1949      	addeq	r1, r1, r5
 80052d2:	6021      	streq	r1, [r4, #0]
 80052d4:	e7ed      	b.n	80052b2 <_free_r+0x22>
 80052d6:	461a      	mov	r2, r3
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	b10b      	cbz	r3, 80052e0 <_free_r+0x50>
 80052dc:	42a3      	cmp	r3, r4
 80052de:	d9fa      	bls.n	80052d6 <_free_r+0x46>
 80052e0:	6811      	ldr	r1, [r2, #0]
 80052e2:	1855      	adds	r5, r2, r1
 80052e4:	42a5      	cmp	r5, r4
 80052e6:	d10b      	bne.n	8005300 <_free_r+0x70>
 80052e8:	6824      	ldr	r4, [r4, #0]
 80052ea:	4421      	add	r1, r4
 80052ec:	1854      	adds	r4, r2, r1
 80052ee:	42a3      	cmp	r3, r4
 80052f0:	6011      	str	r1, [r2, #0]
 80052f2:	d1e0      	bne.n	80052b6 <_free_r+0x26>
 80052f4:	681c      	ldr	r4, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	6053      	str	r3, [r2, #4]
 80052fa:	440c      	add	r4, r1
 80052fc:	6014      	str	r4, [r2, #0]
 80052fe:	e7da      	b.n	80052b6 <_free_r+0x26>
 8005300:	d902      	bls.n	8005308 <_free_r+0x78>
 8005302:	230c      	movs	r3, #12
 8005304:	6003      	str	r3, [r0, #0]
 8005306:	e7d6      	b.n	80052b6 <_free_r+0x26>
 8005308:	6825      	ldr	r5, [r4, #0]
 800530a:	1961      	adds	r1, r4, r5
 800530c:	428b      	cmp	r3, r1
 800530e:	bf04      	itt	eq
 8005310:	6819      	ldreq	r1, [r3, #0]
 8005312:	685b      	ldreq	r3, [r3, #4]
 8005314:	6063      	str	r3, [r4, #4]
 8005316:	bf04      	itt	eq
 8005318:	1949      	addeq	r1, r1, r5
 800531a:	6021      	streq	r1, [r4, #0]
 800531c:	6054      	str	r4, [r2, #4]
 800531e:	e7ca      	b.n	80052b6 <_free_r+0x26>
 8005320:	b003      	add	sp, #12
 8005322:	bd30      	pop	{r4, r5, pc}
 8005324:	20001ec0 	.word	0x20001ec0

08005328 <sbrk_aligned>:
 8005328:	b570      	push	{r4, r5, r6, lr}
 800532a:	4e0e      	ldr	r6, [pc, #56]	; (8005364 <sbrk_aligned+0x3c>)
 800532c:	460c      	mov	r4, r1
 800532e:	6831      	ldr	r1, [r6, #0]
 8005330:	4605      	mov	r5, r0
 8005332:	b911      	cbnz	r1, 800533a <sbrk_aligned+0x12>
 8005334:	f000 fba6 	bl	8005a84 <_sbrk_r>
 8005338:	6030      	str	r0, [r6, #0]
 800533a:	4621      	mov	r1, r4
 800533c:	4628      	mov	r0, r5
 800533e:	f000 fba1 	bl	8005a84 <_sbrk_r>
 8005342:	1c43      	adds	r3, r0, #1
 8005344:	d00a      	beq.n	800535c <sbrk_aligned+0x34>
 8005346:	1cc4      	adds	r4, r0, #3
 8005348:	f024 0403 	bic.w	r4, r4, #3
 800534c:	42a0      	cmp	r0, r4
 800534e:	d007      	beq.n	8005360 <sbrk_aligned+0x38>
 8005350:	1a21      	subs	r1, r4, r0
 8005352:	4628      	mov	r0, r5
 8005354:	f000 fb96 	bl	8005a84 <_sbrk_r>
 8005358:	3001      	adds	r0, #1
 800535a:	d101      	bne.n	8005360 <sbrk_aligned+0x38>
 800535c:	f04f 34ff 	mov.w	r4, #4294967295
 8005360:	4620      	mov	r0, r4
 8005362:	bd70      	pop	{r4, r5, r6, pc}
 8005364:	20001ec4 	.word	0x20001ec4

08005368 <_malloc_r>:
 8005368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800536c:	1ccd      	adds	r5, r1, #3
 800536e:	f025 0503 	bic.w	r5, r5, #3
 8005372:	3508      	adds	r5, #8
 8005374:	2d0c      	cmp	r5, #12
 8005376:	bf38      	it	cc
 8005378:	250c      	movcc	r5, #12
 800537a:	2d00      	cmp	r5, #0
 800537c:	4607      	mov	r7, r0
 800537e:	db01      	blt.n	8005384 <_malloc_r+0x1c>
 8005380:	42a9      	cmp	r1, r5
 8005382:	d905      	bls.n	8005390 <_malloc_r+0x28>
 8005384:	230c      	movs	r3, #12
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	2600      	movs	r6, #0
 800538a:	4630      	mov	r0, r6
 800538c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005390:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005464 <_malloc_r+0xfc>
 8005394:	f000 f868 	bl	8005468 <__malloc_lock>
 8005398:	f8d8 3000 	ldr.w	r3, [r8]
 800539c:	461c      	mov	r4, r3
 800539e:	bb5c      	cbnz	r4, 80053f8 <_malloc_r+0x90>
 80053a0:	4629      	mov	r1, r5
 80053a2:	4638      	mov	r0, r7
 80053a4:	f7ff ffc0 	bl	8005328 <sbrk_aligned>
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	4604      	mov	r4, r0
 80053ac:	d155      	bne.n	800545a <_malloc_r+0xf2>
 80053ae:	f8d8 4000 	ldr.w	r4, [r8]
 80053b2:	4626      	mov	r6, r4
 80053b4:	2e00      	cmp	r6, #0
 80053b6:	d145      	bne.n	8005444 <_malloc_r+0xdc>
 80053b8:	2c00      	cmp	r4, #0
 80053ba:	d048      	beq.n	800544e <_malloc_r+0xe6>
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	4631      	mov	r1, r6
 80053c0:	4638      	mov	r0, r7
 80053c2:	eb04 0903 	add.w	r9, r4, r3
 80053c6:	f000 fb5d 	bl	8005a84 <_sbrk_r>
 80053ca:	4581      	cmp	r9, r0
 80053cc:	d13f      	bne.n	800544e <_malloc_r+0xe6>
 80053ce:	6821      	ldr	r1, [r4, #0]
 80053d0:	1a6d      	subs	r5, r5, r1
 80053d2:	4629      	mov	r1, r5
 80053d4:	4638      	mov	r0, r7
 80053d6:	f7ff ffa7 	bl	8005328 <sbrk_aligned>
 80053da:	3001      	adds	r0, #1
 80053dc:	d037      	beq.n	800544e <_malloc_r+0xe6>
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	442b      	add	r3, r5
 80053e2:	6023      	str	r3, [r4, #0]
 80053e4:	f8d8 3000 	ldr.w	r3, [r8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d038      	beq.n	800545e <_malloc_r+0xf6>
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	42a2      	cmp	r2, r4
 80053f0:	d12b      	bne.n	800544a <_malloc_r+0xe2>
 80053f2:	2200      	movs	r2, #0
 80053f4:	605a      	str	r2, [r3, #4]
 80053f6:	e00f      	b.n	8005418 <_malloc_r+0xb0>
 80053f8:	6822      	ldr	r2, [r4, #0]
 80053fa:	1b52      	subs	r2, r2, r5
 80053fc:	d41f      	bmi.n	800543e <_malloc_r+0xd6>
 80053fe:	2a0b      	cmp	r2, #11
 8005400:	d917      	bls.n	8005432 <_malloc_r+0xca>
 8005402:	1961      	adds	r1, r4, r5
 8005404:	42a3      	cmp	r3, r4
 8005406:	6025      	str	r5, [r4, #0]
 8005408:	bf18      	it	ne
 800540a:	6059      	strne	r1, [r3, #4]
 800540c:	6863      	ldr	r3, [r4, #4]
 800540e:	bf08      	it	eq
 8005410:	f8c8 1000 	streq.w	r1, [r8]
 8005414:	5162      	str	r2, [r4, r5]
 8005416:	604b      	str	r3, [r1, #4]
 8005418:	4638      	mov	r0, r7
 800541a:	f104 060b 	add.w	r6, r4, #11
 800541e:	f000 f829 	bl	8005474 <__malloc_unlock>
 8005422:	f026 0607 	bic.w	r6, r6, #7
 8005426:	1d23      	adds	r3, r4, #4
 8005428:	1af2      	subs	r2, r6, r3
 800542a:	d0ae      	beq.n	800538a <_malloc_r+0x22>
 800542c:	1b9b      	subs	r3, r3, r6
 800542e:	50a3      	str	r3, [r4, r2]
 8005430:	e7ab      	b.n	800538a <_malloc_r+0x22>
 8005432:	42a3      	cmp	r3, r4
 8005434:	6862      	ldr	r2, [r4, #4]
 8005436:	d1dd      	bne.n	80053f4 <_malloc_r+0x8c>
 8005438:	f8c8 2000 	str.w	r2, [r8]
 800543c:	e7ec      	b.n	8005418 <_malloc_r+0xb0>
 800543e:	4623      	mov	r3, r4
 8005440:	6864      	ldr	r4, [r4, #4]
 8005442:	e7ac      	b.n	800539e <_malloc_r+0x36>
 8005444:	4634      	mov	r4, r6
 8005446:	6876      	ldr	r6, [r6, #4]
 8005448:	e7b4      	b.n	80053b4 <_malloc_r+0x4c>
 800544a:	4613      	mov	r3, r2
 800544c:	e7cc      	b.n	80053e8 <_malloc_r+0x80>
 800544e:	230c      	movs	r3, #12
 8005450:	603b      	str	r3, [r7, #0]
 8005452:	4638      	mov	r0, r7
 8005454:	f000 f80e 	bl	8005474 <__malloc_unlock>
 8005458:	e797      	b.n	800538a <_malloc_r+0x22>
 800545a:	6025      	str	r5, [r4, #0]
 800545c:	e7dc      	b.n	8005418 <_malloc_r+0xb0>
 800545e:	605b      	str	r3, [r3, #4]
 8005460:	deff      	udf	#255	; 0xff
 8005462:	bf00      	nop
 8005464:	20001ec0 	.word	0x20001ec0

08005468 <__malloc_lock>:
 8005468:	4801      	ldr	r0, [pc, #4]	; (8005470 <__malloc_lock+0x8>)
 800546a:	f7ff bf0f 	b.w	800528c <__retarget_lock_acquire_recursive>
 800546e:	bf00      	nop
 8005470:	20001ebc 	.word	0x20001ebc

08005474 <__malloc_unlock>:
 8005474:	4801      	ldr	r0, [pc, #4]	; (800547c <__malloc_unlock+0x8>)
 8005476:	f7ff bf0a 	b.w	800528e <__retarget_lock_release_recursive>
 800547a:	bf00      	nop
 800547c:	20001ebc 	.word	0x20001ebc

08005480 <__ssputs_r>:
 8005480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005484:	688e      	ldr	r6, [r1, #8]
 8005486:	461f      	mov	r7, r3
 8005488:	42be      	cmp	r6, r7
 800548a:	680b      	ldr	r3, [r1, #0]
 800548c:	4682      	mov	sl, r0
 800548e:	460c      	mov	r4, r1
 8005490:	4690      	mov	r8, r2
 8005492:	d82c      	bhi.n	80054ee <__ssputs_r+0x6e>
 8005494:	898a      	ldrh	r2, [r1, #12]
 8005496:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800549a:	d026      	beq.n	80054ea <__ssputs_r+0x6a>
 800549c:	6965      	ldr	r5, [r4, #20]
 800549e:	6909      	ldr	r1, [r1, #16]
 80054a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054a4:	eba3 0901 	sub.w	r9, r3, r1
 80054a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054ac:	1c7b      	adds	r3, r7, #1
 80054ae:	444b      	add	r3, r9
 80054b0:	106d      	asrs	r5, r5, #1
 80054b2:	429d      	cmp	r5, r3
 80054b4:	bf38      	it	cc
 80054b6:	461d      	movcc	r5, r3
 80054b8:	0553      	lsls	r3, r2, #21
 80054ba:	d527      	bpl.n	800550c <__ssputs_r+0x8c>
 80054bc:	4629      	mov	r1, r5
 80054be:	f7ff ff53 	bl	8005368 <_malloc_r>
 80054c2:	4606      	mov	r6, r0
 80054c4:	b360      	cbz	r0, 8005520 <__ssputs_r+0xa0>
 80054c6:	6921      	ldr	r1, [r4, #16]
 80054c8:	464a      	mov	r2, r9
 80054ca:	f000 faeb 	bl	8005aa4 <memcpy>
 80054ce:	89a3      	ldrh	r3, [r4, #12]
 80054d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d8:	81a3      	strh	r3, [r4, #12]
 80054da:	6126      	str	r6, [r4, #16]
 80054dc:	6165      	str	r5, [r4, #20]
 80054de:	444e      	add	r6, r9
 80054e0:	eba5 0509 	sub.w	r5, r5, r9
 80054e4:	6026      	str	r6, [r4, #0]
 80054e6:	60a5      	str	r5, [r4, #8]
 80054e8:	463e      	mov	r6, r7
 80054ea:	42be      	cmp	r6, r7
 80054ec:	d900      	bls.n	80054f0 <__ssputs_r+0x70>
 80054ee:	463e      	mov	r6, r7
 80054f0:	6820      	ldr	r0, [r4, #0]
 80054f2:	4632      	mov	r2, r6
 80054f4:	4641      	mov	r1, r8
 80054f6:	f000 faab 	bl	8005a50 <memmove>
 80054fa:	68a3      	ldr	r3, [r4, #8]
 80054fc:	1b9b      	subs	r3, r3, r6
 80054fe:	60a3      	str	r3, [r4, #8]
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	4433      	add	r3, r6
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	2000      	movs	r0, #0
 8005508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800550c:	462a      	mov	r2, r5
 800550e:	f000 fad7 	bl	8005ac0 <_realloc_r>
 8005512:	4606      	mov	r6, r0
 8005514:	2800      	cmp	r0, #0
 8005516:	d1e0      	bne.n	80054da <__ssputs_r+0x5a>
 8005518:	6921      	ldr	r1, [r4, #16]
 800551a:	4650      	mov	r0, sl
 800551c:	f7ff feb8 	bl	8005290 <_free_r>
 8005520:	230c      	movs	r3, #12
 8005522:	f8ca 3000 	str.w	r3, [sl]
 8005526:	89a3      	ldrh	r3, [r4, #12]
 8005528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800552c:	81a3      	strh	r3, [r4, #12]
 800552e:	f04f 30ff 	mov.w	r0, #4294967295
 8005532:	e7e9      	b.n	8005508 <__ssputs_r+0x88>

08005534 <_svfiprintf_r>:
 8005534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005538:	4698      	mov	r8, r3
 800553a:	898b      	ldrh	r3, [r1, #12]
 800553c:	061b      	lsls	r3, r3, #24
 800553e:	b09d      	sub	sp, #116	; 0x74
 8005540:	4607      	mov	r7, r0
 8005542:	460d      	mov	r5, r1
 8005544:	4614      	mov	r4, r2
 8005546:	d50e      	bpl.n	8005566 <_svfiprintf_r+0x32>
 8005548:	690b      	ldr	r3, [r1, #16]
 800554a:	b963      	cbnz	r3, 8005566 <_svfiprintf_r+0x32>
 800554c:	2140      	movs	r1, #64	; 0x40
 800554e:	f7ff ff0b 	bl	8005368 <_malloc_r>
 8005552:	6028      	str	r0, [r5, #0]
 8005554:	6128      	str	r0, [r5, #16]
 8005556:	b920      	cbnz	r0, 8005562 <_svfiprintf_r+0x2e>
 8005558:	230c      	movs	r3, #12
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	f04f 30ff 	mov.w	r0, #4294967295
 8005560:	e0d0      	b.n	8005704 <_svfiprintf_r+0x1d0>
 8005562:	2340      	movs	r3, #64	; 0x40
 8005564:	616b      	str	r3, [r5, #20]
 8005566:	2300      	movs	r3, #0
 8005568:	9309      	str	r3, [sp, #36]	; 0x24
 800556a:	2320      	movs	r3, #32
 800556c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005570:	f8cd 800c 	str.w	r8, [sp, #12]
 8005574:	2330      	movs	r3, #48	; 0x30
 8005576:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800571c <_svfiprintf_r+0x1e8>
 800557a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800557e:	f04f 0901 	mov.w	r9, #1
 8005582:	4623      	mov	r3, r4
 8005584:	469a      	mov	sl, r3
 8005586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800558a:	b10a      	cbz	r2, 8005590 <_svfiprintf_r+0x5c>
 800558c:	2a25      	cmp	r2, #37	; 0x25
 800558e:	d1f9      	bne.n	8005584 <_svfiprintf_r+0x50>
 8005590:	ebba 0b04 	subs.w	fp, sl, r4
 8005594:	d00b      	beq.n	80055ae <_svfiprintf_r+0x7a>
 8005596:	465b      	mov	r3, fp
 8005598:	4622      	mov	r2, r4
 800559a:	4629      	mov	r1, r5
 800559c:	4638      	mov	r0, r7
 800559e:	f7ff ff6f 	bl	8005480 <__ssputs_r>
 80055a2:	3001      	adds	r0, #1
 80055a4:	f000 80a9 	beq.w	80056fa <_svfiprintf_r+0x1c6>
 80055a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055aa:	445a      	add	r2, fp
 80055ac:	9209      	str	r2, [sp, #36]	; 0x24
 80055ae:	f89a 3000 	ldrb.w	r3, [sl]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 80a1 	beq.w	80056fa <_svfiprintf_r+0x1c6>
 80055b8:	2300      	movs	r3, #0
 80055ba:	f04f 32ff 	mov.w	r2, #4294967295
 80055be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055c2:	f10a 0a01 	add.w	sl, sl, #1
 80055c6:	9304      	str	r3, [sp, #16]
 80055c8:	9307      	str	r3, [sp, #28]
 80055ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055ce:	931a      	str	r3, [sp, #104]	; 0x68
 80055d0:	4654      	mov	r4, sl
 80055d2:	2205      	movs	r2, #5
 80055d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d8:	4850      	ldr	r0, [pc, #320]	; (800571c <_svfiprintf_r+0x1e8>)
 80055da:	f7fa fe01 	bl	80001e0 <memchr>
 80055de:	9a04      	ldr	r2, [sp, #16]
 80055e0:	b9d8      	cbnz	r0, 800561a <_svfiprintf_r+0xe6>
 80055e2:	06d0      	lsls	r0, r2, #27
 80055e4:	bf44      	itt	mi
 80055e6:	2320      	movmi	r3, #32
 80055e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055ec:	0711      	lsls	r1, r2, #28
 80055ee:	bf44      	itt	mi
 80055f0:	232b      	movmi	r3, #43	; 0x2b
 80055f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055f6:	f89a 3000 	ldrb.w	r3, [sl]
 80055fa:	2b2a      	cmp	r3, #42	; 0x2a
 80055fc:	d015      	beq.n	800562a <_svfiprintf_r+0xf6>
 80055fe:	9a07      	ldr	r2, [sp, #28]
 8005600:	4654      	mov	r4, sl
 8005602:	2000      	movs	r0, #0
 8005604:	f04f 0c0a 	mov.w	ip, #10
 8005608:	4621      	mov	r1, r4
 800560a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800560e:	3b30      	subs	r3, #48	; 0x30
 8005610:	2b09      	cmp	r3, #9
 8005612:	d94d      	bls.n	80056b0 <_svfiprintf_r+0x17c>
 8005614:	b1b0      	cbz	r0, 8005644 <_svfiprintf_r+0x110>
 8005616:	9207      	str	r2, [sp, #28]
 8005618:	e014      	b.n	8005644 <_svfiprintf_r+0x110>
 800561a:	eba0 0308 	sub.w	r3, r0, r8
 800561e:	fa09 f303 	lsl.w	r3, r9, r3
 8005622:	4313      	orrs	r3, r2
 8005624:	9304      	str	r3, [sp, #16]
 8005626:	46a2      	mov	sl, r4
 8005628:	e7d2      	b.n	80055d0 <_svfiprintf_r+0x9c>
 800562a:	9b03      	ldr	r3, [sp, #12]
 800562c:	1d19      	adds	r1, r3, #4
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	9103      	str	r1, [sp, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	bfbb      	ittet	lt
 8005636:	425b      	neglt	r3, r3
 8005638:	f042 0202 	orrlt.w	r2, r2, #2
 800563c:	9307      	strge	r3, [sp, #28]
 800563e:	9307      	strlt	r3, [sp, #28]
 8005640:	bfb8      	it	lt
 8005642:	9204      	strlt	r2, [sp, #16]
 8005644:	7823      	ldrb	r3, [r4, #0]
 8005646:	2b2e      	cmp	r3, #46	; 0x2e
 8005648:	d10c      	bne.n	8005664 <_svfiprintf_r+0x130>
 800564a:	7863      	ldrb	r3, [r4, #1]
 800564c:	2b2a      	cmp	r3, #42	; 0x2a
 800564e:	d134      	bne.n	80056ba <_svfiprintf_r+0x186>
 8005650:	9b03      	ldr	r3, [sp, #12]
 8005652:	1d1a      	adds	r2, r3, #4
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	9203      	str	r2, [sp, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	bfb8      	it	lt
 800565c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005660:	3402      	adds	r4, #2
 8005662:	9305      	str	r3, [sp, #20]
 8005664:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800572c <_svfiprintf_r+0x1f8>
 8005668:	7821      	ldrb	r1, [r4, #0]
 800566a:	2203      	movs	r2, #3
 800566c:	4650      	mov	r0, sl
 800566e:	f7fa fdb7 	bl	80001e0 <memchr>
 8005672:	b138      	cbz	r0, 8005684 <_svfiprintf_r+0x150>
 8005674:	9b04      	ldr	r3, [sp, #16]
 8005676:	eba0 000a 	sub.w	r0, r0, sl
 800567a:	2240      	movs	r2, #64	; 0x40
 800567c:	4082      	lsls	r2, r0
 800567e:	4313      	orrs	r3, r2
 8005680:	3401      	adds	r4, #1
 8005682:	9304      	str	r3, [sp, #16]
 8005684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005688:	4825      	ldr	r0, [pc, #148]	; (8005720 <_svfiprintf_r+0x1ec>)
 800568a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800568e:	2206      	movs	r2, #6
 8005690:	f7fa fda6 	bl	80001e0 <memchr>
 8005694:	2800      	cmp	r0, #0
 8005696:	d038      	beq.n	800570a <_svfiprintf_r+0x1d6>
 8005698:	4b22      	ldr	r3, [pc, #136]	; (8005724 <_svfiprintf_r+0x1f0>)
 800569a:	bb1b      	cbnz	r3, 80056e4 <_svfiprintf_r+0x1b0>
 800569c:	9b03      	ldr	r3, [sp, #12]
 800569e:	3307      	adds	r3, #7
 80056a0:	f023 0307 	bic.w	r3, r3, #7
 80056a4:	3308      	adds	r3, #8
 80056a6:	9303      	str	r3, [sp, #12]
 80056a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056aa:	4433      	add	r3, r6
 80056ac:	9309      	str	r3, [sp, #36]	; 0x24
 80056ae:	e768      	b.n	8005582 <_svfiprintf_r+0x4e>
 80056b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80056b4:	460c      	mov	r4, r1
 80056b6:	2001      	movs	r0, #1
 80056b8:	e7a6      	b.n	8005608 <_svfiprintf_r+0xd4>
 80056ba:	2300      	movs	r3, #0
 80056bc:	3401      	adds	r4, #1
 80056be:	9305      	str	r3, [sp, #20]
 80056c0:	4619      	mov	r1, r3
 80056c2:	f04f 0c0a 	mov.w	ip, #10
 80056c6:	4620      	mov	r0, r4
 80056c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056cc:	3a30      	subs	r2, #48	; 0x30
 80056ce:	2a09      	cmp	r2, #9
 80056d0:	d903      	bls.n	80056da <_svfiprintf_r+0x1a6>
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0c6      	beq.n	8005664 <_svfiprintf_r+0x130>
 80056d6:	9105      	str	r1, [sp, #20]
 80056d8:	e7c4      	b.n	8005664 <_svfiprintf_r+0x130>
 80056da:	fb0c 2101 	mla	r1, ip, r1, r2
 80056de:	4604      	mov	r4, r0
 80056e0:	2301      	movs	r3, #1
 80056e2:	e7f0      	b.n	80056c6 <_svfiprintf_r+0x192>
 80056e4:	ab03      	add	r3, sp, #12
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	462a      	mov	r2, r5
 80056ea:	4b0f      	ldr	r3, [pc, #60]	; (8005728 <_svfiprintf_r+0x1f4>)
 80056ec:	a904      	add	r1, sp, #16
 80056ee:	4638      	mov	r0, r7
 80056f0:	f3af 8000 	nop.w
 80056f4:	1c42      	adds	r2, r0, #1
 80056f6:	4606      	mov	r6, r0
 80056f8:	d1d6      	bne.n	80056a8 <_svfiprintf_r+0x174>
 80056fa:	89ab      	ldrh	r3, [r5, #12]
 80056fc:	065b      	lsls	r3, r3, #25
 80056fe:	f53f af2d 	bmi.w	800555c <_svfiprintf_r+0x28>
 8005702:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005704:	b01d      	add	sp, #116	; 0x74
 8005706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570a:	ab03      	add	r3, sp, #12
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	462a      	mov	r2, r5
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <_svfiprintf_r+0x1f4>)
 8005712:	a904      	add	r1, sp, #16
 8005714:	4638      	mov	r0, r7
 8005716:	f000 f879 	bl	800580c <_printf_i>
 800571a:	e7eb      	b.n	80056f4 <_svfiprintf_r+0x1c0>
 800571c:	08006169 	.word	0x08006169
 8005720:	08006173 	.word	0x08006173
 8005724:	00000000 	.word	0x00000000
 8005728:	08005481 	.word	0x08005481
 800572c:	0800616f 	.word	0x0800616f

08005730 <_printf_common>:
 8005730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005734:	4616      	mov	r6, r2
 8005736:	4699      	mov	r9, r3
 8005738:	688a      	ldr	r2, [r1, #8]
 800573a:	690b      	ldr	r3, [r1, #16]
 800573c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005740:	4293      	cmp	r3, r2
 8005742:	bfb8      	it	lt
 8005744:	4613      	movlt	r3, r2
 8005746:	6033      	str	r3, [r6, #0]
 8005748:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800574c:	4607      	mov	r7, r0
 800574e:	460c      	mov	r4, r1
 8005750:	b10a      	cbz	r2, 8005756 <_printf_common+0x26>
 8005752:	3301      	adds	r3, #1
 8005754:	6033      	str	r3, [r6, #0]
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	0699      	lsls	r1, r3, #26
 800575a:	bf42      	ittt	mi
 800575c:	6833      	ldrmi	r3, [r6, #0]
 800575e:	3302      	addmi	r3, #2
 8005760:	6033      	strmi	r3, [r6, #0]
 8005762:	6825      	ldr	r5, [r4, #0]
 8005764:	f015 0506 	ands.w	r5, r5, #6
 8005768:	d106      	bne.n	8005778 <_printf_common+0x48>
 800576a:	f104 0a19 	add.w	sl, r4, #25
 800576e:	68e3      	ldr	r3, [r4, #12]
 8005770:	6832      	ldr	r2, [r6, #0]
 8005772:	1a9b      	subs	r3, r3, r2
 8005774:	42ab      	cmp	r3, r5
 8005776:	dc26      	bgt.n	80057c6 <_printf_common+0x96>
 8005778:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800577c:	1e13      	subs	r3, r2, #0
 800577e:	6822      	ldr	r2, [r4, #0]
 8005780:	bf18      	it	ne
 8005782:	2301      	movne	r3, #1
 8005784:	0692      	lsls	r2, r2, #26
 8005786:	d42b      	bmi.n	80057e0 <_printf_common+0xb0>
 8005788:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800578c:	4649      	mov	r1, r9
 800578e:	4638      	mov	r0, r7
 8005790:	47c0      	blx	r8
 8005792:	3001      	adds	r0, #1
 8005794:	d01e      	beq.n	80057d4 <_printf_common+0xa4>
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	6922      	ldr	r2, [r4, #16]
 800579a:	f003 0306 	and.w	r3, r3, #6
 800579e:	2b04      	cmp	r3, #4
 80057a0:	bf02      	ittt	eq
 80057a2:	68e5      	ldreq	r5, [r4, #12]
 80057a4:	6833      	ldreq	r3, [r6, #0]
 80057a6:	1aed      	subeq	r5, r5, r3
 80057a8:	68a3      	ldr	r3, [r4, #8]
 80057aa:	bf0c      	ite	eq
 80057ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057b0:	2500      	movne	r5, #0
 80057b2:	4293      	cmp	r3, r2
 80057b4:	bfc4      	itt	gt
 80057b6:	1a9b      	subgt	r3, r3, r2
 80057b8:	18ed      	addgt	r5, r5, r3
 80057ba:	2600      	movs	r6, #0
 80057bc:	341a      	adds	r4, #26
 80057be:	42b5      	cmp	r5, r6
 80057c0:	d11a      	bne.n	80057f8 <_printf_common+0xc8>
 80057c2:	2000      	movs	r0, #0
 80057c4:	e008      	b.n	80057d8 <_printf_common+0xa8>
 80057c6:	2301      	movs	r3, #1
 80057c8:	4652      	mov	r2, sl
 80057ca:	4649      	mov	r1, r9
 80057cc:	4638      	mov	r0, r7
 80057ce:	47c0      	blx	r8
 80057d0:	3001      	adds	r0, #1
 80057d2:	d103      	bne.n	80057dc <_printf_common+0xac>
 80057d4:	f04f 30ff 	mov.w	r0, #4294967295
 80057d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057dc:	3501      	adds	r5, #1
 80057de:	e7c6      	b.n	800576e <_printf_common+0x3e>
 80057e0:	18e1      	adds	r1, r4, r3
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	2030      	movs	r0, #48	; 0x30
 80057e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057ea:	4422      	add	r2, r4
 80057ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057f4:	3302      	adds	r3, #2
 80057f6:	e7c7      	b.n	8005788 <_printf_common+0x58>
 80057f8:	2301      	movs	r3, #1
 80057fa:	4622      	mov	r2, r4
 80057fc:	4649      	mov	r1, r9
 80057fe:	4638      	mov	r0, r7
 8005800:	47c0      	blx	r8
 8005802:	3001      	adds	r0, #1
 8005804:	d0e6      	beq.n	80057d4 <_printf_common+0xa4>
 8005806:	3601      	adds	r6, #1
 8005808:	e7d9      	b.n	80057be <_printf_common+0x8e>
	...

0800580c <_printf_i>:
 800580c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005810:	7e0f      	ldrb	r7, [r1, #24]
 8005812:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005814:	2f78      	cmp	r7, #120	; 0x78
 8005816:	4691      	mov	r9, r2
 8005818:	4680      	mov	r8, r0
 800581a:	460c      	mov	r4, r1
 800581c:	469a      	mov	sl, r3
 800581e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005822:	d807      	bhi.n	8005834 <_printf_i+0x28>
 8005824:	2f62      	cmp	r7, #98	; 0x62
 8005826:	d80a      	bhi.n	800583e <_printf_i+0x32>
 8005828:	2f00      	cmp	r7, #0
 800582a:	f000 80d4 	beq.w	80059d6 <_printf_i+0x1ca>
 800582e:	2f58      	cmp	r7, #88	; 0x58
 8005830:	f000 80c0 	beq.w	80059b4 <_printf_i+0x1a8>
 8005834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005838:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800583c:	e03a      	b.n	80058b4 <_printf_i+0xa8>
 800583e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005842:	2b15      	cmp	r3, #21
 8005844:	d8f6      	bhi.n	8005834 <_printf_i+0x28>
 8005846:	a101      	add	r1, pc, #4	; (adr r1, 800584c <_printf_i+0x40>)
 8005848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800584c:	080058a5 	.word	0x080058a5
 8005850:	080058b9 	.word	0x080058b9
 8005854:	08005835 	.word	0x08005835
 8005858:	08005835 	.word	0x08005835
 800585c:	08005835 	.word	0x08005835
 8005860:	08005835 	.word	0x08005835
 8005864:	080058b9 	.word	0x080058b9
 8005868:	08005835 	.word	0x08005835
 800586c:	08005835 	.word	0x08005835
 8005870:	08005835 	.word	0x08005835
 8005874:	08005835 	.word	0x08005835
 8005878:	080059bd 	.word	0x080059bd
 800587c:	080058e5 	.word	0x080058e5
 8005880:	08005977 	.word	0x08005977
 8005884:	08005835 	.word	0x08005835
 8005888:	08005835 	.word	0x08005835
 800588c:	080059df 	.word	0x080059df
 8005890:	08005835 	.word	0x08005835
 8005894:	080058e5 	.word	0x080058e5
 8005898:	08005835 	.word	0x08005835
 800589c:	08005835 	.word	0x08005835
 80058a0:	0800597f 	.word	0x0800597f
 80058a4:	682b      	ldr	r3, [r5, #0]
 80058a6:	1d1a      	adds	r2, r3, #4
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	602a      	str	r2, [r5, #0]
 80058ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058b4:	2301      	movs	r3, #1
 80058b6:	e09f      	b.n	80059f8 <_printf_i+0x1ec>
 80058b8:	6820      	ldr	r0, [r4, #0]
 80058ba:	682b      	ldr	r3, [r5, #0]
 80058bc:	0607      	lsls	r7, r0, #24
 80058be:	f103 0104 	add.w	r1, r3, #4
 80058c2:	6029      	str	r1, [r5, #0]
 80058c4:	d501      	bpl.n	80058ca <_printf_i+0xbe>
 80058c6:	681e      	ldr	r6, [r3, #0]
 80058c8:	e003      	b.n	80058d2 <_printf_i+0xc6>
 80058ca:	0646      	lsls	r6, r0, #25
 80058cc:	d5fb      	bpl.n	80058c6 <_printf_i+0xba>
 80058ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80058d2:	2e00      	cmp	r6, #0
 80058d4:	da03      	bge.n	80058de <_printf_i+0xd2>
 80058d6:	232d      	movs	r3, #45	; 0x2d
 80058d8:	4276      	negs	r6, r6
 80058da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058de:	485a      	ldr	r0, [pc, #360]	; (8005a48 <_printf_i+0x23c>)
 80058e0:	230a      	movs	r3, #10
 80058e2:	e012      	b.n	800590a <_printf_i+0xfe>
 80058e4:	682b      	ldr	r3, [r5, #0]
 80058e6:	6820      	ldr	r0, [r4, #0]
 80058e8:	1d19      	adds	r1, r3, #4
 80058ea:	6029      	str	r1, [r5, #0]
 80058ec:	0605      	lsls	r5, r0, #24
 80058ee:	d501      	bpl.n	80058f4 <_printf_i+0xe8>
 80058f0:	681e      	ldr	r6, [r3, #0]
 80058f2:	e002      	b.n	80058fa <_printf_i+0xee>
 80058f4:	0641      	lsls	r1, r0, #25
 80058f6:	d5fb      	bpl.n	80058f0 <_printf_i+0xe4>
 80058f8:	881e      	ldrh	r6, [r3, #0]
 80058fa:	4853      	ldr	r0, [pc, #332]	; (8005a48 <_printf_i+0x23c>)
 80058fc:	2f6f      	cmp	r7, #111	; 0x6f
 80058fe:	bf0c      	ite	eq
 8005900:	2308      	moveq	r3, #8
 8005902:	230a      	movne	r3, #10
 8005904:	2100      	movs	r1, #0
 8005906:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800590a:	6865      	ldr	r5, [r4, #4]
 800590c:	60a5      	str	r5, [r4, #8]
 800590e:	2d00      	cmp	r5, #0
 8005910:	bfa2      	ittt	ge
 8005912:	6821      	ldrge	r1, [r4, #0]
 8005914:	f021 0104 	bicge.w	r1, r1, #4
 8005918:	6021      	strge	r1, [r4, #0]
 800591a:	b90e      	cbnz	r6, 8005920 <_printf_i+0x114>
 800591c:	2d00      	cmp	r5, #0
 800591e:	d04b      	beq.n	80059b8 <_printf_i+0x1ac>
 8005920:	4615      	mov	r5, r2
 8005922:	fbb6 f1f3 	udiv	r1, r6, r3
 8005926:	fb03 6711 	mls	r7, r3, r1, r6
 800592a:	5dc7      	ldrb	r7, [r0, r7]
 800592c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005930:	4637      	mov	r7, r6
 8005932:	42bb      	cmp	r3, r7
 8005934:	460e      	mov	r6, r1
 8005936:	d9f4      	bls.n	8005922 <_printf_i+0x116>
 8005938:	2b08      	cmp	r3, #8
 800593a:	d10b      	bne.n	8005954 <_printf_i+0x148>
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	07de      	lsls	r6, r3, #31
 8005940:	d508      	bpl.n	8005954 <_printf_i+0x148>
 8005942:	6923      	ldr	r3, [r4, #16]
 8005944:	6861      	ldr	r1, [r4, #4]
 8005946:	4299      	cmp	r1, r3
 8005948:	bfde      	ittt	le
 800594a:	2330      	movle	r3, #48	; 0x30
 800594c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005950:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005954:	1b52      	subs	r2, r2, r5
 8005956:	6122      	str	r2, [r4, #16]
 8005958:	f8cd a000 	str.w	sl, [sp]
 800595c:	464b      	mov	r3, r9
 800595e:	aa03      	add	r2, sp, #12
 8005960:	4621      	mov	r1, r4
 8005962:	4640      	mov	r0, r8
 8005964:	f7ff fee4 	bl	8005730 <_printf_common>
 8005968:	3001      	adds	r0, #1
 800596a:	d14a      	bne.n	8005a02 <_printf_i+0x1f6>
 800596c:	f04f 30ff 	mov.w	r0, #4294967295
 8005970:	b004      	add	sp, #16
 8005972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	f043 0320 	orr.w	r3, r3, #32
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	4833      	ldr	r0, [pc, #204]	; (8005a4c <_printf_i+0x240>)
 8005980:	2778      	movs	r7, #120	; 0x78
 8005982:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	6829      	ldr	r1, [r5, #0]
 800598a:	061f      	lsls	r7, r3, #24
 800598c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005990:	d402      	bmi.n	8005998 <_printf_i+0x18c>
 8005992:	065f      	lsls	r7, r3, #25
 8005994:	bf48      	it	mi
 8005996:	b2b6      	uxthmi	r6, r6
 8005998:	07df      	lsls	r7, r3, #31
 800599a:	bf48      	it	mi
 800599c:	f043 0320 	orrmi.w	r3, r3, #32
 80059a0:	6029      	str	r1, [r5, #0]
 80059a2:	bf48      	it	mi
 80059a4:	6023      	strmi	r3, [r4, #0]
 80059a6:	b91e      	cbnz	r6, 80059b0 <_printf_i+0x1a4>
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	f023 0320 	bic.w	r3, r3, #32
 80059ae:	6023      	str	r3, [r4, #0]
 80059b0:	2310      	movs	r3, #16
 80059b2:	e7a7      	b.n	8005904 <_printf_i+0xf8>
 80059b4:	4824      	ldr	r0, [pc, #144]	; (8005a48 <_printf_i+0x23c>)
 80059b6:	e7e4      	b.n	8005982 <_printf_i+0x176>
 80059b8:	4615      	mov	r5, r2
 80059ba:	e7bd      	b.n	8005938 <_printf_i+0x12c>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	6826      	ldr	r6, [r4, #0]
 80059c0:	6961      	ldr	r1, [r4, #20]
 80059c2:	1d18      	adds	r0, r3, #4
 80059c4:	6028      	str	r0, [r5, #0]
 80059c6:	0635      	lsls	r5, r6, #24
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	d501      	bpl.n	80059d0 <_printf_i+0x1c4>
 80059cc:	6019      	str	r1, [r3, #0]
 80059ce:	e002      	b.n	80059d6 <_printf_i+0x1ca>
 80059d0:	0670      	lsls	r0, r6, #25
 80059d2:	d5fb      	bpl.n	80059cc <_printf_i+0x1c0>
 80059d4:	8019      	strh	r1, [r3, #0]
 80059d6:	2300      	movs	r3, #0
 80059d8:	6123      	str	r3, [r4, #16]
 80059da:	4615      	mov	r5, r2
 80059dc:	e7bc      	b.n	8005958 <_printf_i+0x14c>
 80059de:	682b      	ldr	r3, [r5, #0]
 80059e0:	1d1a      	adds	r2, r3, #4
 80059e2:	602a      	str	r2, [r5, #0]
 80059e4:	681d      	ldr	r5, [r3, #0]
 80059e6:	6862      	ldr	r2, [r4, #4]
 80059e8:	2100      	movs	r1, #0
 80059ea:	4628      	mov	r0, r5
 80059ec:	f7fa fbf8 	bl	80001e0 <memchr>
 80059f0:	b108      	cbz	r0, 80059f6 <_printf_i+0x1ea>
 80059f2:	1b40      	subs	r0, r0, r5
 80059f4:	6060      	str	r0, [r4, #4]
 80059f6:	6863      	ldr	r3, [r4, #4]
 80059f8:	6123      	str	r3, [r4, #16]
 80059fa:	2300      	movs	r3, #0
 80059fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a00:	e7aa      	b.n	8005958 <_printf_i+0x14c>
 8005a02:	6923      	ldr	r3, [r4, #16]
 8005a04:	462a      	mov	r2, r5
 8005a06:	4649      	mov	r1, r9
 8005a08:	4640      	mov	r0, r8
 8005a0a:	47d0      	blx	sl
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	d0ad      	beq.n	800596c <_printf_i+0x160>
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	079b      	lsls	r3, r3, #30
 8005a14:	d413      	bmi.n	8005a3e <_printf_i+0x232>
 8005a16:	68e0      	ldr	r0, [r4, #12]
 8005a18:	9b03      	ldr	r3, [sp, #12]
 8005a1a:	4298      	cmp	r0, r3
 8005a1c:	bfb8      	it	lt
 8005a1e:	4618      	movlt	r0, r3
 8005a20:	e7a6      	b.n	8005970 <_printf_i+0x164>
 8005a22:	2301      	movs	r3, #1
 8005a24:	4632      	mov	r2, r6
 8005a26:	4649      	mov	r1, r9
 8005a28:	4640      	mov	r0, r8
 8005a2a:	47d0      	blx	sl
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	d09d      	beq.n	800596c <_printf_i+0x160>
 8005a30:	3501      	adds	r5, #1
 8005a32:	68e3      	ldr	r3, [r4, #12]
 8005a34:	9903      	ldr	r1, [sp, #12]
 8005a36:	1a5b      	subs	r3, r3, r1
 8005a38:	42ab      	cmp	r3, r5
 8005a3a:	dcf2      	bgt.n	8005a22 <_printf_i+0x216>
 8005a3c:	e7eb      	b.n	8005a16 <_printf_i+0x20a>
 8005a3e:	2500      	movs	r5, #0
 8005a40:	f104 0619 	add.w	r6, r4, #25
 8005a44:	e7f5      	b.n	8005a32 <_printf_i+0x226>
 8005a46:	bf00      	nop
 8005a48:	0800617a 	.word	0x0800617a
 8005a4c:	0800618b 	.word	0x0800618b

08005a50 <memmove>:
 8005a50:	4288      	cmp	r0, r1
 8005a52:	b510      	push	{r4, lr}
 8005a54:	eb01 0402 	add.w	r4, r1, r2
 8005a58:	d902      	bls.n	8005a60 <memmove+0x10>
 8005a5a:	4284      	cmp	r4, r0
 8005a5c:	4623      	mov	r3, r4
 8005a5e:	d807      	bhi.n	8005a70 <memmove+0x20>
 8005a60:	1e43      	subs	r3, r0, #1
 8005a62:	42a1      	cmp	r1, r4
 8005a64:	d008      	beq.n	8005a78 <memmove+0x28>
 8005a66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a6e:	e7f8      	b.n	8005a62 <memmove+0x12>
 8005a70:	4402      	add	r2, r0
 8005a72:	4601      	mov	r1, r0
 8005a74:	428a      	cmp	r2, r1
 8005a76:	d100      	bne.n	8005a7a <memmove+0x2a>
 8005a78:	bd10      	pop	{r4, pc}
 8005a7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a82:	e7f7      	b.n	8005a74 <memmove+0x24>

08005a84 <_sbrk_r>:
 8005a84:	b538      	push	{r3, r4, r5, lr}
 8005a86:	4d06      	ldr	r5, [pc, #24]	; (8005aa0 <_sbrk_r+0x1c>)
 8005a88:	2300      	movs	r3, #0
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	602b      	str	r3, [r5, #0]
 8005a90:	f7fc fac2 	bl	8002018 <_sbrk>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	d102      	bne.n	8005a9e <_sbrk_r+0x1a>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	b103      	cbz	r3, 8005a9e <_sbrk_r+0x1a>
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	bd38      	pop	{r3, r4, r5, pc}
 8005aa0:	20001eb8 	.word	0x20001eb8

08005aa4 <memcpy>:
 8005aa4:	440a      	add	r2, r1
 8005aa6:	4291      	cmp	r1, r2
 8005aa8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005aac:	d100      	bne.n	8005ab0 <memcpy+0xc>
 8005aae:	4770      	bx	lr
 8005ab0:	b510      	push	{r4, lr}
 8005ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aba:	4291      	cmp	r1, r2
 8005abc:	d1f9      	bne.n	8005ab2 <memcpy+0xe>
 8005abe:	bd10      	pop	{r4, pc}

08005ac0 <_realloc_r>:
 8005ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac4:	4680      	mov	r8, r0
 8005ac6:	4614      	mov	r4, r2
 8005ac8:	460e      	mov	r6, r1
 8005aca:	b921      	cbnz	r1, 8005ad6 <_realloc_r+0x16>
 8005acc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad0:	4611      	mov	r1, r2
 8005ad2:	f7ff bc49 	b.w	8005368 <_malloc_r>
 8005ad6:	b92a      	cbnz	r2, 8005ae4 <_realloc_r+0x24>
 8005ad8:	f7ff fbda 	bl	8005290 <_free_r>
 8005adc:	4625      	mov	r5, r4
 8005ade:	4628      	mov	r0, r5
 8005ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ae4:	f000 f81b 	bl	8005b1e <_malloc_usable_size_r>
 8005ae8:	4284      	cmp	r4, r0
 8005aea:	4607      	mov	r7, r0
 8005aec:	d802      	bhi.n	8005af4 <_realloc_r+0x34>
 8005aee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005af2:	d812      	bhi.n	8005b1a <_realloc_r+0x5a>
 8005af4:	4621      	mov	r1, r4
 8005af6:	4640      	mov	r0, r8
 8005af8:	f7ff fc36 	bl	8005368 <_malloc_r>
 8005afc:	4605      	mov	r5, r0
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d0ed      	beq.n	8005ade <_realloc_r+0x1e>
 8005b02:	42bc      	cmp	r4, r7
 8005b04:	4622      	mov	r2, r4
 8005b06:	4631      	mov	r1, r6
 8005b08:	bf28      	it	cs
 8005b0a:	463a      	movcs	r2, r7
 8005b0c:	f7ff ffca 	bl	8005aa4 <memcpy>
 8005b10:	4631      	mov	r1, r6
 8005b12:	4640      	mov	r0, r8
 8005b14:	f7ff fbbc 	bl	8005290 <_free_r>
 8005b18:	e7e1      	b.n	8005ade <_realloc_r+0x1e>
 8005b1a:	4635      	mov	r5, r6
 8005b1c:	e7df      	b.n	8005ade <_realloc_r+0x1e>

08005b1e <_malloc_usable_size_r>:
 8005b1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b22:	1f18      	subs	r0, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	bfbc      	itt	lt
 8005b28:	580b      	ldrlt	r3, [r1, r0]
 8005b2a:	18c0      	addlt	r0, r0, r3
 8005b2c:	4770      	bx	lr
	...

08005b30 <_init>:
 8005b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b32:	bf00      	nop
 8005b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b36:	bc08      	pop	{r3}
 8005b38:	469e      	mov	lr, r3
 8005b3a:	4770      	bx	lr

08005b3c <_fini>:
 8005b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3e:	bf00      	nop
 8005b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b42:	bc08      	pop	{r3}
 8005b44:	469e      	mov	lr, r3
 8005b46:	4770      	bx	lr
